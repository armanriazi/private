{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"public/public/","title":"Walk-through","text":"<p>No permission</p>"},{"location":"self/a-r/","title":"Subjects","text":"<p>Programming</p> <p>Commands</p> <p>Domain-Driven Design</p> <p>PostgreSQL</p> <p>Issues</p> <p>Technical</p> <p>Mindmap</p> <p>English</p> <p>Slide-Until-2019</p> <p>Magazine</p>"},{"location":"self/todo/","title":"ToDo","text":"<p>IMF  \u06cc\u0648\u0644 \u0628\u0647 \u06a9\u0634\u0648\u0631 \u0647\u0627 \u0642\u0631\u0636 \u0645\u06cc\u062f\u0647\u0646\u062f</p> <p>GDP \u0646\u0627\u062e\u0627\u0644\u0635 \u0645\u0644\u06cc</p>"},{"location":"self/commands/commands/","title":"Commands","text":"<p>Docker</p> <p>Cargo-Rust</p> <p>Substrate-double-node-running</p> <p>Ubuntu</p>"},{"location":"self/commands/private-docker-commands/","title":"Private docker commands","text":"<p><code>docker run --rm -it -v ${PWD}:/docs armanriazi.jfrog.io/default-docker-virtual/squidfunk/mkdocs-material:202204 build</code></p> <p><code>docker tag local-image:tagname new-repo:tagname</code></p> <p><code>docker push armanriazi2blockchain/armanriazi2blockchain:tagname</code></p> <p><code>docker exec -it -u root node-docker /bin/bash</code></p> <p><code>docker run -it autodevops.dynv6.net:5000/mongo:4</code></p> <p><code>chmod 777 /home/user/.docker</code></p>"},{"location":"self/commands/private-rust-cargo/","title":"Private rust cargo","text":""},{"location":"self/commands/private-rust-cargo/#cargo","title":"Cargo","text":""},{"location":"self/commands/private-rust-cargo/#help","title":"Help","text":"<pre><code>cargo --list\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#build-run","title":"Build Run","text":"<pre><code>cargo build --features foo\n</code></pre> <pre><code>cargo build --release --target=wasm32-unknown-unknown\n</code></pre> <pre><code>cargo run -p subcrate\n</code></pre> <pre><code>time cargo run\n</code></pre> <pre><code>cargo make --makefile build.toml\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#tree","title":"Tree","text":"<pre><code>cargo tree -d\n</code></pre> <pre><code>cargo tree --duplicates\n</code></pre> Info <p>This will show features in the dependency graph. Each feature will appear showing which package enabled it</p> <pre><code>cargo tree -e features\n</code></pre> <pre><code>cargo modules generate tree --with-types --package shared\n</code></pre> Info <p>This is a more compact view that shows a comma-separated list of features enabled on each package</p> <pre><code>cargo tree -f \"{p} {f}\"\n</code></pre> Info <p>This will invert the tree, showing how features flow into the given package \"foo\". This can be useful because viewing the entire graph can be quite large and overwhelming. Use this when you are trying to figure out which features are enabled on a specific package and why. See the example at the bottom of the cargo tree page on how to read this.</p> <pre><code>cargo tree -e features -i foo\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#watch","title":"Watch","text":"<pre><code>cargo watch -x run\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#package","title":"Package","text":"<pre><code>cargo clear\n</code></pre> <pre><code>cargo upgrade/add package\n</code></pre> <pre><code>cargo publish -vvv --no-verify\n</code></pre> <pre><code>cargo release\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#fix","title":"Fix","text":"<pre><code>cargo fix --allow-dirty --edition\n</code></pre> <pre><code>cargo clippy --fix\n</code></pre> <pre><code>cargo clippy -p example -- --no-deps\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#test","title":"Test","text":"Info <p>Test coverage on linux</p> <pre><code>cargo tarpaulin --out Html\n</code></pre> <pre><code>cargo test -- --ignored\n</code></pre> <pre><code>cargo audit\n</code></pre> <pre><code>cargo nexttest run\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#rust","title":"Rust","text":"<pre><code>RUST_LOG=debug RUST_BACKTRACE=1 ./target/release/node-template -lruntime=debug --dev\n</code></pre> <pre><code>rustup show\n</code></pre> <pre><code>rustup default stable\n</code></pre> <pre><code>rustup update nightly\n</code></pre> <pre><code>rustup update stable\n</code></pre> <pre><code>rustup toolchain install nightly version\n</code></pre> <pre><code>rustup target add wasm32-unknown-unknown --toolchain stable\n</code></pre> <pre><code>rustup component add rust-src --toolchain stable-x86_64-unknown-linux-gnu\n</code></pre> Info <p>rust-toolchain.toml file content</p> <pre><code>[toolchain]\nchannel = \"stable-x86_64-unknown-linux-gnu\"\ncomponents = [ \"rustfmt\", \"rustc-dev\",\"clippy\"]\ntargets = [ \"x86_64-unknown-linux-gnu\", \"wasm32-unknown-unknown\" ]\nprofile = \"minimal\"\n</code></pre> <pre><code>rustup override set stable\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#inunistall","title":"In/Unistall","text":""},{"location":"self/commands/private-rust-cargo/#rust-and-cargo","title":"Rust And Cargo","text":"Info <p>Providing configuration for rust and substarte on ubuntu</p> <p><pre><code>apt-get update\n\nsudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main universe\"\n\napt-get -u dist-upgrade\n\napt install aptitude\n\nsudo aptitude install libc6=2.31-0ubuntu9\n\nsudo aptitude install build-essential\n\napt-get update\n\nsudo apt install -y cmake pkg-config libssl-dev git gcc build-essential clang libclang-dev\n\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y\n\nrustup toolchain install nightly --allow-downgrade --profile minimal --component clippy\ncurl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable\n\nsource $HOME/.cargo/env\n\n[Continue reference to](#Rust)\n\ncargo install --git https://github.com/alexcrichton/wasm-gc --force\n\n#rustup component add --toolchain=nightly rust-src rustfmt\n\napt-get install llvm clang linux-headers-\"$(uname -r)\"\n\napt install llvm clang\n\ncargo build --release\n</code></pre> Other commands(Maybe you needs follow): Cargo command section</p>"},{"location":"self/commands/private-rust-cargo/#uninstall-cargo-and-rust","title":"Uninstall Cargo And Rust","text":"<pre><code>rustup self uninstall\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#wasm","title":"WASM","text":"<pre><code>cargo build --target wasm32-unknown-unknown --release\n</code></pre> <pre><code>curl https://get.wasmer.io -sSfL | sh\n</code></pre> <pre><code>wasm-gc ./target/wasm32-unknown-unknown/release/wasm_example.wasm ./wasm_example_rust.wasm\n</code></pre> <pre><code>wasm-pack build --target web\n</code></pre> <pre><code>wasmer wasm_example_rust.wasm -i yourprogram args\n</code></pre>"},{"location":"self/commands/private-rust-cargo/#optional","title":"Optional","text":"<pre><code>sudo apt-get install libtinfo5\n</code></pre> <pre><code>sudo apt-get install  libncurses5\n</code></pre> <pre><code>console.log(\"\ud83e\udd80 Rust + \ud83d\udd78 Wasm = \u2764\");\n</code></pre> <pre><code>python3 -m http.server\n</code></pre>"},{"location":"self/commands/private-substrate-double-node-running-commands/","title":"Private substrate double node running commands","text":""},{"location":"self/commands/private-substrate-double-node-running-commands/#node-setup1","title":"Node-Setup1","text":"<pre><code>./target/release/node-template \\\n  --base-path /tmp/alice \\\n  --chain local \\\n  --alice \\\n  --port 30333 \\\n  --ws-port 9945 \\\n  --rpc-port 9933 \\\n  --unsafe-rpc-external \\\n  --rpc-methods=unsafe \\\n  --validator \\\n  --ws-external \\\n  --rpc-cors all  \\\n  --no-mdns \\\n  --name \"Arman Riazi\"  \\\n  --node-key 0000000000000000000000000000000000000000000000000000000000000001 \n</code></pre>"},{"location":"self/commands/private-substrate-double-node-running-commands/#node-setup2","title":"Node-Setup2","text":"<pre><code>./target/release/node-template \\\n  --base-path /tmp/bob \\\n  --chain local \\\n  --bob \\\n  --port 30334 \\\n  --ws-port 9946 \\\n  --unsafe-rpc-external \\\n  --rpc-methods=unsafe \\\n  --rpc-port 9934 \\\n  --validator \\\n  --ws-external \\\n  --rpc-cors all  \\\n  --no-mdns  \\\n  --name \"Arman Riazi 2\"  \\\n  --bootnodes /ip4/192.168.8.110/tcp/30333/p2p/12D3KooWEyoppNCUx8Yx66oV9fJnriXwCcXwDDUA2kj6vnc6iDEp\n</code></pre>"},{"location":"self/commands/private-substrate-double-node-running-commands/#node-setup-other-commands","title":"Node-Setup-Other-Commands","text":"<p>--enable-offchain-indexing true \\   --telemetry-url 'wss://telemetry.polkadot.io/submit/ 0' \\   --enable-offchain-indexing true \\   --chain ./customSpecRaw.json      --rpc-methods Unsafe \\</p> <p><code>subkey restore Alice</code></p> <p><code>./target/release/node-template purge-chain --base-path /tmp/alice --chain local</code></p> <pre><code>  /home/u2004zero/u2004zero/app/substrate/substrate-node-template\n  cargo build --release &amp;&amp; ./target/release/node-template --ws-external --rpc-cors all --name \"Arman Riazi\" --pruning archive --prometheus-external --chain local  --tmp --dev  (fir)  (--base-path ./my-chain-state --enable-offchain-indexing true)\n</code></pre> <p><code>/scripts/docker_run.sh cargo build --release &amp;&amp; ./target/release/node-template --dev --ws-external --base-path ./my-chain-state</code></p> <p><code>SKIP_WASM_BUILD=1 cargo check -p node-template-runtime</code></p>"},{"location":"self/commands/private-ubuntu-commands/","title":"Private ubuntu commands","text":""},{"location":"self/commands/private-ubuntu-commands/#lvm-disk","title":"LVM-Disk","text":""},{"location":"self/commands/private-ubuntu-commands/#notice","title":"Notice","text":"<p>[[partprobe]]</p> <p>to force the kernel to re-read the partition table so that it is not necessary to perform a reboot.</p>"},{"location":"self/commands/private-ubuntu-commands/#get-status","title":"Get Status","text":"<p><code>lsblk</code> <code>pvscan</code> <code>vgs -o +devices,lv_path</code> <code>vgdisplay</code> <code>lvmdiskscan</code></p>"},{"location":"self/commands/private-ubuntu-commands/#add-disk","title":"Add Disk","text":"<p><code>`fdisk /dev/sdX</code></p> <p>Regular disk: n =&gt; (Enter All)=&gt;p =&gt; t =&gt; 8e = changes to LVM partition type=&gt;w</p> <p>Swap disk: n =&gt; (Enter All)=&gt;p =&gt; t =&gt; 82 = changes to SWAP partition type=&gt;w</p>"},{"location":"self/commands/private-ubuntu-commands/#create-partition","title":"Create Partition","text":"<p><code>pvcreate /dev/sdX1</code></p>"},{"location":"self/commands/private-ubuntu-commands/#create-logical-volume","title":"Create Logical Volume","text":"<p><code>vgextend vgubuntu /dev/sdX</code> <code>lvcreate -l 100%FREE -n XLV vgubuntu</code></p> <p>For Regular Disk</p> <p><code>mkfs -t ext4 /dev/vgubuntu/XLV</code> <code>mount -t ext4 /dev/vgubuntu/XLV /mnt/X/</code></p> <p>For Swap Disk</p> <p><code>mkswap /dev/vgubuntu/swap</code> <code>mkswap /dev/mapper/vgubuntu-swap</code> <code>swapon -v /dev/vgubuntu/swap</code> <code>partprobe</code> <code>swapon -va</code> <code>cat /proc/swaps</code> <code>Free -h</code></p>"},{"location":"self/commands/private-ubuntu-commands/#fstab-boot","title":"Fstab Boot","text":"<p><code>gedit /etc/fstab</code></p> <pre><code># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;\n/dev/mapper/vgubuntu-root /               ext4    errors=remount-ro 0       1\n\n/dev/mapper/vgubuntu-swap   swap     swap    defaults     0 0\n\n# /boot/efi was on /dev/sda1 during installation\n\nUUID=9fd9c344-09a7-4bbf-af88-9b4e1c24955d       /mnt/docker    ext4    defaults        0       2\n\n/dev/mapper/vgubuntu-home /mnt/home ext4 errors=remount-ro,x-gvfs-show,x-udisks-auth,x-gvfs-name=mnt-home 0 1\n\n/dev/mapper/vgubuntu-sub /mnt/sub ext4 errors=remount-ro,x-gvfs-show,x-udisks-auth,x-gvfs-name=mnt-sub 0 1\n</code></pre>"},{"location":"self/commands/private-ubuntu-commands/#network","title":"Network","text":"<p><code>echo \"1\" &gt; /proc/sys/net/ipv4/ip__forward</code></p> <p><code>iptables -t nat -A PREROUTING -p tcp --dport 22 -j REDIRECT --to-port 2222</code></p> <p><code>netsh interface portproxy add v4tov4 listenport=35999 listenaddress=0.0.0.0 connectport=80 connectaddress=0.0.0.0</code></p> <p><code>netsh http delete urlacl url=http://*:35999/ user=Everyone</code></p>"},{"location":"self/english/en-about/","title":"English","text":"<p>Hello first name is Arman and Last name is Riazi</p> <p>I hope you have a good time</p> <p>Let me explain about my self to introduce to you</p> <p>I have been working on the Blockchain ecosystem as a CryptoTrader and Blockchain developer.</p> <p>I work with companies to realize the benefits and business outcomes of Blockchain and ITIL.</p> <p>Over 10 years of experience in developing, deploying, analyzing, and implementing [[Cloud]]-native, web, and software engineers.</p> <p>I graduated M.Sc [[master]] In the Field Of Information Technology.</p> <p>It took me ages to learn. I learned the hard way over the years and I try to make it really simplistic on my personal website.</p> <p>I've always influence by dr.Ravenwood. Her works are so creative. I am sure he will impressive much more in the future</p> <p>so I would like to give you a menu of solutions for investment and development based on the Blockchain.</p> <p>it will be nice to meet you</p> <p>Good luck</p>"},{"location":"self/english/en-bbc/","title":"English","text":"<p>[1]</p> <p>I can't work it out.</p> <p>I can't get my head round this.</p> <p>I'm having difficulty getting to grips with this.</p> <p>This isn't sinking in.</p> <p>[2]</p> <p>It's time to knock off.</p> <p>You've done enough.</p> <p>I think that's enough for now.</p> <p>Let's leave it there.</p> <p>Let's call it a day.</p> <p>Let's wrap it up there.</p> <p>[3]</p> <p>Let's look at the backstory\u2026</p> <p>The reason we're in this situation in the first place is\u2026</p> <p>Let me just fill you in with the background\u2026.</p> <p>Let's just remind ourselves how we got here in the first place\u2026</p> <p>[4]</p> <p>I'm really sorry to let you down.</p> <p>Sorry to disappoint you but\u2026</p> <p>It's not how we planned it but...</p> <p>[5]</p> <p>It would be great if you could...</p> <p>I'd really appreciate it if you would...</p> <p>Would you mind...?</p> <p>I'd really appreciate it if...</p> <p>[6]</p> <p>We're operating in tough economic conditions.</p> <p>We need to meet our sales targets.</p> <p>Pull your socks up!</p> <p>You shouldn't mix business with pleasure.</p> <p>[7]</p> <p>I'll be advertising for a replacement for Tom today.</p> <p>I want to make some changes in the office.</p> <p>I need to turn this business round.</p> <p>I'm keen to hear your ideas.</p> <p>[8]</p> <p>I have had some head space and a chance to chew things over.</p> <p>I've come to a final decision.</p> <p>I'll give it a go.</p> <p>You won't regret your decision.</p> <p>[9]</p> <p>Don't be too hasty.</p> <p>Don't rush into making a decision.</p> <p>We can work this out.</p> <p>[10]</p> <p>This promotion recognises your achievements at the company.</p> <p>It's an opportunity of a lifetime.</p> <p>You would be my right-hand man/woman.</p> <p>[11]</p> <p>I've been doing a strategic review of the company.</p> <p>I need to downsize.</p> <p>I need you to step aside.</p> <p>The company needs new direction and more dynamic leadership.</p> <p>You are surplus to requirement.</p> <p>[12]</p> <p>Could I check availability for your venue please?</p> <p>What business facilities do you have?</p> <p>How many people can the room or venue hold?</p> <p>Can you provide hospitality?</p> <p>How much does it cost?</p> <p>[13]</p> <p>I've got to prioritise. This task is the most important so I'm going to concentrate on this first.</p> <p>It would be a great help if you could do this for me please.</p> <p>I'm going to have to put that off until tomorrow, I'm afraid.</p> <p>[14]</p> <p>Let me show you the ropes.</p> <p>Watch what I do for a while.</p> <p>Why don't you make a start on this?</p> <p>I'm here to help, so please ask me if you need to know what to do.</p> <p>[15]</p> <p>You're the boss and I think the news is better coming from you.</p> <p>It was your decision in the first place so you need to explain that the situation has changed.</p> <p>This is your responsibility.</p> <p>And here are some phrases your boss might use to apologise:</p> <p>[16]</p> <p>I've been rethinking our staffing situation in the office.</p> <p>Sorry, I made a mistake. I miscalculated my staffing numbers.</p> <p>I would love to have you back in the office.</p> <p>[17]</p> <p>We're a bit busy at the moment; could I take your name and we'll call you back?</p> <p>When would be a convenient time to call you?</p> <p>Could I take a message please and I'll make sure he/she calls you back?</p> <p>[18]</p> <p>You need to think positively.</p> <p>Try looking in the job section in the newspaper.</p> <p>There are loads of job-finding websites you could sign up for.</p> <p>What about ringing some of the people you know?</p> <p>You could register with a recruitment agency.</p> <p>[19]</p> <p>I have a specific idea in mind.</p> <p>I'm interested in hearing your thoughts on how to improve my idea.</p> <p>I'd like to use your design skills to produce a fantastic product.</p> <p>I need to sign off your designs before they go into production.</p> <p>[20]</p> <p>We've got to move the furniture around.</p> <p>I'm afraid I've got to let you go.</p> <p>I'm giving you seven days' notice.</p> <p>[21]</p> <p>Ladies and gentlemen, on behalf of everyone at Tip Top Trading, thank you for our award.</p> <p>Our company is at the forefront of plastic innovation.</p> <p>This award is a real boost for everyone working at the company.</p> <p>This award really means a lot to us.</p> <p>[22]</p> <p>Excuse me, hello, I'm Anna. I work as a Sales Executive at Tip Top Trading.</p> <p>Can you tell me about your company?</p> <p>Can I briefly tell you about what our company does?</p> <p>I think we might be able to help you.</p> <p>Here's my business card should you want to call.</p>"},{"location":"self/english/en-forgraph/","title":"En forgraph","text":"<p>[[adage]] adage</p> <p>[[question]] question</p> <p>[[influence]] influence</p> <p>[[rather]] rather</p> <p>[[thanks]] thanks</p> <p>[[conflict]] conflict</p> <p>[[approach]] approach</p> <p>[[situation]] situation</p> <p>[[history]] history</p> <p>[[as]] as</p> <p>[[abilities]] abilities</p> <p>[[dueto]] dueto</p> <p>[[continue]] continue</p> <p>[[conjunctions]] conjunctions</p> <p>[[before]] before</p> <p>[[organize]] organize</p> <p>[[if]] if</p> <p>[[mean]] mean</p> <p>[[understand]] understand</p> <p>[[advice]] advice</p> <p>[[got]] got</p> <p>[[getting]] getting</p> <p>[[going]] going</p> <p>[[call]]  call</p> <p>[[know]] know</p> <p>[[try]]  try</p> <p>[[think]] think</p> <p>[[relevent]] relevent</p> <p>[[time]]  time</p> <p>[[whichis]] whichis</p> <p>[[way]] way</p> <p>[[practise]] practise</p> <p>[[hand]] hand</p> <p>[[interupt]] interupt</p> <p>[[let]] let</p> <p>[[decision]] decision</p> <p>[[ask]] ask</p> <p>[[re]] re</p> <p>[[talk]] talk</p> <p>[[like]] like</p> <p>[[interest]] interest</p> <p>[[take]] take</p> <p>[[look-see]] look-see</p> <p>[[recommend]] recommend</p> <p>[[feel]] feel</p> <p>[[insist]] insist</p> <p>[[issue]] issue</p> <p>[[wonder]] wonder</p> <p>[[meet]] meet</p> <p>[[permission]] permission</p> <p>[[be]] be</p> <p>[[right]] right</p> <p>[[work]] work</p> <p>[[make]] make</p> <p>[[decision]] decision</p> <p>[[sorry]] sorry</p> <p>[[define_name]] define_name</p> <p>[[do]] do</p> <p>[[goal]] goal</p> <p>[[point]] point</p>"},{"location":"self/english/en-hakathon/","title":"En hakathon","text":"<p>I am looking for the opportunity for working on my priority that I hope my choices are close to the team. Rust, Substrate, Kusama, Polkadot ecosystem,Crust, WASM, Evm compatible parachains like MoonBeam, ParaState So every team would like to use follow tech I will be ready to join I'd welcome the opportunity to continue discussing this role with you.</p> <p>armanriyazi.github.io</p>"},{"location":"self/english/english/","title":"English","text":"<p>ForGraph</p> <p>Interview</p> <p>Subtitle-words</p> <p>Valuable-Sentences</p> <p>Hakathon</p> <p>Seminar</p> <p>BBC</p> <p>English Grammar Here</p>"},{"location":"self/english/category/abilities/","title":"English","text":"<p>[[I can't face myself]]</p> <p>[[I don't think of myself as a hero person]]</p> <p>[[I tend to work at office it gives me etc]]</p> <p>[[I never gained any information except self study]]</p>"},{"location":"self/english/category/adage/","title":"English","text":"<p>[[What goes around comes around]]</p> <p>[[Hold your horses]]</p>"},{"location":"self/english/category/advice/","title":"English","text":"<p>[[You need to exercise more often]]</p> <p>[[Without doubt, it's the must-see clip of this toturial. The whole clip blends together well]]</p> <p>[[On this side here you can move onto the next lesson]]</p> <p>[[You have the option of clicking here]]</p> <p>[[Whatever works best for you]]</p> <p>[[It's a different way to teach it]]</p> <p>[[This is crucial for]]</p> <p>[[It'll be a competition advantage for you]]</p> <p>[[You gotta keep an eye on some of these factors]]</p> <p>[[Always look at the source and then the source of the source If you want to drill down]]</p>"},{"location":"self/english/category/agree/","title":"English","text":"<p>[[I agree whole heartly]]</p> <p>[[You're probably right]]</p> <p>[[Me too]]</p> <p>[[So do I]]</p> <p>[[Front End doesn't agree with me]]</p>"},{"location":"self/english/category/approach/","title":"English","text":"<p>[[It's another way of looking at things and it's a lot more positive]] </p>"},{"location":"self/english/category/as/","title":"English","text":"<p>[[Most programmers see themselves as an intelligence]] </p> <p>[[As you know from your own experience]]</p> <p>[[When demand is rising for products in a country and the supply of these products dosen't increase as much as the demand does, the prices rise]]</p> <p>[[aslongas]] aslongas</p>"},{"location":"self/english/category/ask/","title":"English","text":"<p>[[It couldn't hurt to ask someone]]</p> <p>[[I was wondering if you could etc]]</p> <p>[[May I ask you for your attention]]</p> <p>[[Actually I was asking you to say etc]]</p>"},{"location":"self/english/category/aslongas/","title":"English","text":"<p>[[We will do anything as long as it is legal]]</p>"},{"location":"self/english/category/be/","title":"English","text":"<p>[[canbe]] canbe</p> <p>[[willbe]] willbe</p> <p>[[couldbe]] couldbe</p>"},{"location":"self/english/category/before/","title":"English","text":"<p>[[We should do that before we continue]]</p>"},{"location":"self/english/category/call/","title":"English","text":"<p>[[I was going to call you]]</p> <p>[[I missed your call]]</p> <p>[[The reason I am asking]]</p> <p>[[Can you put your boss on the phone-Q]]</p>"},{"location":"self/english/category/canbe/","title":"English","text":"<p>[[It can be realistic]]</p> <p>[[You can click on each one of these buttons here]]</p> <p>[[we don't know how to ..., so you just need to be aware of the fact that given a Cert]]</p>"},{"location":"self/english/category/conflict/","title":"English","text":"<p>[[On the one hand, I would want to tell the truth. On the other hand, I wouldn't want to get in trouble]] </p> <p>[[Actually, I don't think either of us did. We only got it because we couldn't agree on a selected type of smart contract]]</p> <p>[[But complications arise when it etc]]</p> <p>[[It's mind-boggling to me]]</p>"},{"location":"self/english/category/conjunctions/","title":"English","text":"<p>[[More over]]</p> <p>[[Further more]]</p> <p>[[In terms of why why are we starting]]</p> <p>[[on the contrary]]</p>"},{"location":"self/english/category/continue/","title":"English","text":"<p>[[As previously discussed]]</p> <p>[[As mention earlier in the course]]</p> <p>[[We'll get into that in more details]]</p> <p>[[We'll get there soon later]]</p> <p>[[We'll talk about how to do that]]</p> <p>[[Before we go on I want to put some finance concepts on your radar screen that we're going to go into much more details]]</p> <p>[[During our session before the your eyes opened would often start the session with relaxing]]</p> <p>[[Remember that revenue for a company is the same thing kind of as GFP for a country ]]</p> <p>[[After this section we're going to jump right into investment banking as such]]</p> <p>[[This page assume you're investing in banks]]</p> <p>[[This course is base on my real life practical exp]]</p> <p>[[I'll explain in the next lecture]]</p> <p>[[I want to show you these things in a second here]]</p> <p>[[I forgot to sth so I would dclick, and I would go here]]</p> <p>[[I'll go over some background details]]</p>"},{"location":"self/english/category/couldbe/","title":"English","text":"<p>[[Could you be precise-Q]]</p> <p>[[Could you anticipate any difficulty-Q]]</p>"},{"location":"self/english/category/decision/","title":"English","text":"<p>[[I think you should consider decision]]</p>"},{"location":"self/english/category/define_name/","title":"English","text":"<p>[[Which is called revenue]]</p> <p>[[When price increase it's called revenue]]</p> <p>[[When the economy are not doing well we refer to this as a bear market]]</p> <p>[[A ... is actually defined by at least two params]]</p> <p>[[Satosh was quoted as saying etc]]</p> <p>[[Which stand for noun]]</p> <p>[[One of the most powerfull tools that you can have]]</p> <p>[[The smart contracts written in Solidity need to be compiled and deployed to the blockchain This can be achieved by using a development environment for Ethereum called Truffle]]</p>"},{"location":"self/english/category/do/","title":"English","text":"<p>[[question_do]] question_do</p>"},{"location":"self/english/category/dueto/","title":"English","text":"<p>[[Are these changes due to etc]]</p> <p>[[It's primarily due to high prices]]</p>"},{"location":"self/english/category/expire/","title":"English","text":"<p>[[My passport has two years left on its expired date]]</p>"},{"location":"self/english/category/feel-bad/","title":"English","text":"<p>[[We are degrising]]</p> <p>[[Snap in the face]]</p> <p>[[We get fooled by]]</p> <p>[[I am passing out]]</p>"},{"location":"self/english/category/feel/","title":"English","text":"<p>[[This will all make much more sense to you]]</p> <p>[[feel-bad]]</p>"},{"location":"self/english/category/getting/","title":"English","text":"<p>[[The migration is getting harder]]  [[What I'm getting at is etc]]</p>"},{"location":"self/english/category/goal/","title":"English","text":"<p>[[The goal of the ... is actually to make sure that... while...]]</p> <p>[[The purpose of this presentation is to etc]]</p>"},{"location":"self/english/category/going/","title":"English","text":"<p>[[I'm gonna cover any boring theory]]</p> <p>[[I'm going to be hired]]</p> <p>[[You're actually going to be able to etc]]</p>"},{"location":"self/english/category/got/","title":"English","text":"<p>[[I've got some good news to deliver]]</p> <p>[[Have you got that-Q]]</p>"},{"location":"self/english/category/hand/","title":"English","text":"<p>[[To hand something around]]</p> <p>[[To hand something out]]</p> <p>[[To hand something in]]</p> <p>[[To hand something back]]</p>"},{"location":"self/english/category/happen/","title":"English","text":"<p>[[High prices can occur for many reasons]]</p> <p>[[So what is going to happen]]</p> <p>[[The market tries to anticipate what will happen]]</p> <p>[[It can help me predict what might happen from a perspective in the future]]</p>"},{"location":"self/english/category/history/","title":"History","text":"<p>type:  English keywords:  English feature:  English title: \"English\" author: \"ArmanRiazi\"</p> <p>[[You're standing on the exact site where Dr.gavin founded 2018]]</p>"},{"location":"self/english/category/if/","title":"English","text":"<p>[[If you don't understand ..., then it can be catastrophic,right]]</p> <p>[[If I understand you correctly, you think our investment has been mistake]]</p> <p>[[If you want I could change it]]</p> <p>[[The point here is that if you got the course wrong, then course is meaning less, okey-Q]]</p> <p>[[If the price of gold goes up a lot it can be seen as a flight to quality investments or a feer investment indicators]]</p> <p>[[If we select ... and then ... we can ...]]</p> <p>[[If there were other ... here, we'd use other ones]]</p> <p>[[If you or me were to get a loan from a bank we would pay interest on that loan until we pay it all back to the bank]]</p> <p>[[If I told you I was going to give you a dollar in a year and the interest rate then was ten percent you can do math and figure out]]</p> <p>[[If a country make more money than it spends that it has a deficities]]</p> <p>[[question_if]]</p>"},{"location":"self/english/category/influence/","title":"English","text":"<p>[[Believe it or not I've always influence by dr.gavinwood . Her works are so creative]] </p> <p>[[We work on are significantly influence by etc]]</p> <p>[[They rely on what other people tell them and they influenced by other people's opinions]]</p> <p>[[Price of commedites affect almost all companies in the world regardless of what industry they're in]]</p>"},{"location":"self/english/category/insist/","title":"English","text":"<p>[[you have to do sth]]</p> <p>[[You can't except me to work]]</p> <p>[[I really must insist that you etc]]</p> <p>[[When buildling a model of the company you are analyzing uses a lot of debt, you have to analyze interest rate]]</p>"},{"location":"self/english/category/interest/","title":"English","text":"<p>[[I'm interested in knowing what kind of etc]]</p>"},{"location":"self/english/category/interupt/","title":"English","text":"<p>[[I'd rather to let me finish it that is all right]] [[Feel free to interupt me if you have any questions ]]  [[wait]] wait</p>"},{"location":"self/english/category/issue/","title":"English","text":"<p>[[I maybe wrong, but etc]]</p> <p>[[We are on the wrong track]]</p> <p>[[Sometimes that takes care of it]]</p> <p>[[To see if that does the trick]]</p> <p>[[Fixes the problem]]</p> <p>[[I've got a bit of a problem in the project. the noun not working]]</p> <p>[[After a while I realized it wasn't working]]</p> <p>[[It takes a little while to work]]</p> <p>[[She is lack of opinion]]</p> <p>[[So I had a look at the ...thinking It might be that]]</p> <p>[[I was wondering if you could etc]]</p> <p>[[But that seems to be ok]]</p> <p>[[If you want I could change it]]</p> <p>[[It's been working fine]]</p> <p>[[It would be good if I could get it fix]]</p> <p>[[I don't know if it works but we try it]]</p> <p>[[It can get you into trouble if you don't use unit test]]</p> <p>[[The situation is getting out of control]]</p> <p>[[I'm looking forward to this trip]]</p> <p>[[It is cause by etc]]</p> <p>[[I think it must be a fault with your OS]]</p> <p>[[I've got problem with etc]]</p> <p>[[The problem should go in a minute]]</p> <p>[[depending on what sector you cover]]</p> <p>[[Sometimes those .. impacts on a ... don't worry at all]]</p> <p>[[That's one of the reason why there was a bit of commedity]]</p> <p>[[question_issue]]</p>"},{"location":"self/english/category/know/","title":"English","text":"<p>[[question_know]]</p>"},{"location":"self/english/category/let/","title":"English","text":"<p>[[Let's talk about the what, why, and how of the...]]</p> <p>[[let me kick it off with the what]]</p> <p>[[Let's work on with together]]</p> <p>[[Let me continue]]</p> <p>[[Let\u2019s go back to our original example]]</p> <p>[[Let me explain one more time]]</p> <p>[[Let's called a Day]]</p> <p>[[Let's get to the point]]</p> <p>[[Let me have everone for attention please]]</p> <p>[[Let me try to answer your question like this]]</p> <p>[[Let me get a closer look at this first]]</p> <p>[[Let's head over to -.org and take a look etc]]</p> <p>[[Let's take a look at the following exp]]</p> <p>[[Let's focus your attention on]]</p> <p>[[Let's take a few  minutes to discuss the difference between these two type of setups]]</p> <p>[[I hope you enjoy. If you have any question please let me know]]</p> <p>[[question_let]]</p>"},{"location":"self/english/category/like/","title":"English","text":"<p>[[I'd like to ask when you should talk etc]]</p>"},{"location":"self/english/category/look-see/","title":"English","text":"<p>[[So take a look here]]</p> <p>[[So back to noun]]</p> <p>[[We look at it the same way]]</p> <p>[[We look at it howmuch money they make]]</p>"},{"location":"self/english/category/make/","title":"English","text":"<p>[[The I'm making is that etc]]</p>"},{"location":"self/english/category/mean/","title":"English","text":"<p>[[It's saying, it means to make etc]]</p> <p>[[I've been meaning to speak to you all evening]]</p> <p>[[I know what you mean , but etc]]</p> <p>[[If I understand you correctly, you think our investment has been mistake]]</p> <p>[[That's not really what I want to asking. I meant etc]]</p> <p>[[So that is basically what I want to say about this for now etc]]</p>"},{"location":"self/english/category/meet/","title":"English","text":"<p>[[We need to move on]]</p> <p>[[I think we are drifting off the point a bit]]</p> <p>[[Etc for the same reason that peter has just given]]</p> <p>[[I'm afraid we've run out of time]]</p> <p>[[We'll have to cut this meeting short]]</p> <p>[[Who am I meeting-Q]]</p>"},{"location":"self/english/category/need/","title":"English","text":"<p>[[You need to determine the price of GAS]]</p> <p>[[You need to familiar with the etc]]</p>"},{"location":"self/english/category/opinion/","title":"English","text":"<p>[[To each his own. Everyone has a different opinion]]</p> <p>[[In my opinion...or I find it]]</p> <p>[[It's basically common sense]]</p> <p>[[I don't think one is better than another etc]]</p> <p>[[agree]]</p>"},{"location":"self/english/category/organize/","title":"English","text":"<p>[[I just need to sort it out with you]]</p>"},{"location":"self/english/category/permission/","title":"English","text":"<p>[[Am I allowed to use my mobile phone-Q]]</p>"},{"location":"self/english/category/point/","title":"English","text":"<p>[[Good point]]</p> <p>[[Keeping to the point]]</p> <p>[[From my point of view]]</p> <p>[[I'm not at the point yet but it's not far away]]</p>"},{"location":"self/english/category/practise/","title":"English","text":"<p>[[You'll have to do better than that- I'm afraid]]</p> <p>[[I'm not gonna cover any boring theory this will be practical staff you can use]]</p> <p>[[This will all make much more Sense to you after we're done with whole of this course]]</p> <p>[[Read the answer after you've tried to complete the exercise]]</p>"},{"location":"self/english/category/question/","title":"English","text":"<p>[[question_think]] question_think</p> <p>[[question_try]] question_try</p> <p>[[question_know]] question_know</p> <p>[[question_much]] question_much</p> <p>[[question_could]] question_could</p> <p>[[question_do]] question_do</p> <p>[[question_can]] question_can</p> <p>[[question_time]] question_time</p> <p>[[question_details]] question_details</p> <p>[[question_would]] question_would</p> <p>[[question_let]] question_let</p> <p>[[question_issue]] question_issue</p> <p>[[Pardon-Q]]</p> <p>[[One more question]]</p> <p>[[I think you've answered a slightly different question etc]]</p> <p>[[Which is the best way encoding-Q]]</p> <p>[[did you catch the process photos I posted-Q]]</p> <p>[[Please clarifying what you mean-Q]]</p> <p>[[Which task do you associate with current plan-Q]]</p> <p>[[Is there anyway to get a cheaper fare]]</p> <p>[[What is this module made of-Q]]</p> <p>[[Where were these products made-Q]]</p> <p>[[How were those modules manufactured-Q]]</p> <p>[[How are they taken-Q]]</p> <p>[[What are they used for-Q]]</p> <p>[[Will there be an opportunity to do some getting advice-Q]]</p> <p>[[I was just wondering how many people there are-Q]]</p> <p>[[May I ask you for your attention-Q]]</p> <p>[[What else we have to do now-Q]]</p> <p>[[Which will walk you through the answers]]</p> <p>[[Isn't is cool?]]</p> <p>[[What's that about-Q]]</p> <p>[[What is expected for GDP-Q]]</p> <p>[[What a company worth today]]</p> <p>[[How they change interest rates]]</p> <p>[[How are we gonna learn these concepts]]</p>"},{"location":"self/english/category/question_can/","title":"English","text":"<p>[[Can you just make sure you send it to him asap-Q]]</p> <p>[[Can you question wait until finish-Q]]</p> <p>[[Can we take a break]]</p> <p>[[Can we reach conclusion here-Q]]</p>"},{"location":"self/english/category/question_could/","title":"English","text":"<p>[[couldbe]]</p> <p>[[Could you take a look at this-Q]]</p> <p>[[Could you please send message on Whatsapp-Q]]</p> <p>[[Could you please rephrase your question-Q]]</p>"},{"location":"self/english/category/question_details/","title":"English","text":"<p>[[Why is this the case-Q]]</p> <p>[[Could you be more precise-Q]]</p> <p>[[Do you anticipate any deficulty-Q]]</p> <p>[[How many people are attending the meating]]</p> <p>[[I'd be interested to hear more about etc]]</p> <p>[[Can you say a bit more about-Q]]</p> <p>[[Is insurance Included-Q]]</p> <p>[[How should we deal with...-Q]]</p> <p>[[How much notice must I give if I want to leave early-Q]]</p> <p>[[Who do I contact if there is a question-Q]]</p> <p>[[Do you think that's going to do any good-Q]]</p> <p>[[What is one problem caused by compiler.]]</p> <p>[[What seems to the trouble-Q]]</p> <p>[[What's the difference in type of frameworks-Q]]</p> <p>[[How all the difference sectors work together in different roles work together and we'll have a case study later]]</p>"},{"location":"self/english/category/question_do/","title":"English","text":"<p>[[What would you do first-Q]]</p> <p>[[Which of the following would you do-Q]]</p> <p>[[Is your team doing well-Q]]</p>"},{"location":"self/english/category/question_if/","title":"English","text":"<p>[[If we can not trust the participants in the sys, how do we address the data-Q]]</p>"},{"location":"self/english/category/question_issue/","title":"English","text":"<p>[[Can we have focus on the matter please-Q]]</p> <p>[[What's causing all this-Q]]</p>"},{"location":"self/english/category/question_know/","title":"English","text":"<p>[[Do you feel comfortable telling me what you know-Q]]</p> <p>[[What I was to know is etc]]</p> <p>[[You know what-Q]]</p>"},{"location":"self/english/category/question_let/","title":"English","text":"<p>[[Let me try to answer your question like this]]</p> <p>[[Let's bring this to a close, shall we-Q]]</p> <p>[[Let's get down to business shall we-Q]]</p> <p>[[Let's move on shall we-Q]]</p> <p>[[Let's get started shall we-Q]]</p>"},{"location":"self/english/category/question_much/","title":"English","text":"<p>[[How much are we talking about-Q]]</p> <p>[[The first point is about how much you spend for your Blockchain positions-Q Is there any range for specifying it-Q]]</p> <p>[[Was there much bug-Q]]</p>"},{"location":"self/english/category/question_think/","title":"English","text":"<p>[[Would you mind give me more time think about it-Q]]</p> <p>[[What do you think of it-Q]]</p>"},{"location":"self/english/category/question_time/","title":"English","text":"<p>[[What about a meeting sometime later last week-Q]]</p> <p>[[Why don't we take a short break-Q]]</p> <p>[[When is due-Q]]</p> <p>[[How long will it take-Q ]]</p> <p>[[When was this app released-Q]]</p> <p>[[Have you got a minute-Q]]</p> <p>[[How long is the career contact-Q]]</p> <p>[[Do you mind waiting-Q]]</p> <p>[[Shall we say 10 o'clock-Q]]</p> <p>[[Don't you have anything a bit earlier-Q]]</p> <p>[[What time in the afternoon would be most convenient for you-Q]]</p> <p>[[What Anytime in the afternoon would suit you best for you-Q]]</p> <p>[[What Anytime in the afternoon is good for you-Q]]</p> <p>[[What time in the afternoon would be fine for you-Q]]</p>"},{"location":"self/english/category/question_try/","title":"English","text":"<p>[[Why don't you give that a try first-Q]]</p> <p>[[Why don't you try restarting-Q]]</p>"},{"location":"self/english/category/question_wonder/","title":"English","text":"<p>[[Would it be possible to get someone come at the airport-Q]]</p>"},{"location":"self/english/category/question_would/","title":"English","text":"<p>[[Would you like to put this on your wallet-Q]]</p> <p>[[Would you kindly-Q]]</p>"},{"location":"self/english/category/rather/","title":"English","text":"<p>[[There should be learning rather than coding]]</p> <p>[[Compared to etc]]</p> <p>[[This is opposite of noun]]</p> <p>[[The 'move' closure is often used alongside 'thread:: spawn']]</p> <p>[[I haven't seen a framework as good as substrate]]</p> <p>[[We can compare every ... to each other]]</p>"},{"location":"self/english/category/re/","title":"English","text":"<p>[[May I ask you for your attention]]</p> <p>[[I think you should reconsider that]]</p> <p>[[You should revise while standing up etc]]</p>"},{"location":"self/english/category/recommend/","title":"English","text":"<p>[[We're gonna be recommending hopefully to website]]</p> <p>[[Please, do your own research always and don't take the media's world for it]]</p> <p>[[Best investors on the planet always do their own research]]</p> <p>[[Best way to learn finance is to just play around and change params]]</p> <p>[[I'll recommend signing up for this video]]</p>"},{"location":"self/english/category/relevent/","title":"English","text":"<p>[[I'm not sure that's relevant]]</p> <p>[[I am not sure this module would go with it]]</p> <p>[[All major economics are connected to one another]]</p>"},{"location":"self/english/category/right/","title":"English","text":"<p>[[[You may be right, but etc]]</p> <p>[[you're right]]</p>"},{"location":"self/english/category/situation/","title":"English","text":"<p>[[It's the only chance I get to find out what's been going on in the Tech world and catch up with the current affairs]] </p> <p>[[Thank you for giving me the opportunity]]</p>"},{"location":"self/english/category/sorry/","title":"English","text":"<p>[[Sorry I'm still not very clear about etc]]</p>"},{"location":"self/english/category/take/","title":"English","text":"<p>[[The bills take seven working days to go through, is that all right-Q]]</p> <p>[[You are through to the my experiences]]</p>"},{"location":"self/english/category/talk/","title":"English","text":"<p>[[You talked about etc]]</p>"},{"location":"self/english/category/thanks/","title":"English","text":"<p>[[I proud of you for that]]  </p>"},{"location":"self/english/category/think/","title":"English","text":"<p>[[Do you think it's etc-Q]]</p> <p>[[I think I will pass]]</p> <p>[[I noticed that etc]]</p> <p>[[It seems to me that]]</p> <p>[[I have no Idea]]</p> <p>[[So keep in mind that etc]]</p> <p>[[It's sth to keep in mind in the long term]]</p> <p>[[I'm afraid that not how I see it]]</p> <p>[[I need some time to think this over]]</p> <p>[[I think btc is gonna be the defacto currency for many countries. It's more stable way to get paid. It won't be as volatile as other currencies in the long run]]</p> <p>[[It's simply not acceptable to etc]]</p> <p>[[That's not good at all]]</p> <p>[[I dunno]]</p> <p>[[point]]</p> <p>[[right]]</p> <p>[[opinion]]</p>"},{"location":"self/english/category/time/","title":"English","text":"<p>[[You've notice .... Is falling as a result of the time lost]]</p> <p>[[To me, it's just total waste of time]]</p> <p>[[I will just be a minute]]</p> <p>[[It took me ages to learn to develop substrate]]</p> <p>[[All the services are out at the moment]]</p> <p>[[I need some time to think this over]]</p> <p>[[Anytime/Sometime after three would be fine]]</p> <p>[[It's time for you to rotate in to the etc]]</p> <p>[[expire]]</p> <p>[[question_time]]</p>"},{"location":"self/english/category/try/","title":"English","text":"<p>[[I am just tried of the same old grind]]</p> <p>[[I try to study English between the other activities of the day]]</p> <p>[[Ok.I'll give that a try]]</p> <p>[[The more you try, the easier it will get]]</p> <p>[[Do it and then as soon as you finish try another solution one after the other]]</p> <p>[[Try to understand why economic statistics are going up or down]]</p> <p>[[question_try]]</p>"},{"location":"self/english/category/understand/","title":"English","text":"<p>[[Does that make sense-Q]]</p> <p>[[You'll notice that when interest rates are unusually high you might say , Arman..How because etc]]</p>"},{"location":"self/english/category/wait/","title":"English","text":"<p>[[Just a second please I almost done]]</p> <p>[[Sorry to interrupt ,but etc]]</p> <p>[[Could I interrupt for a moment-Q]]</p> <p>[[Not just yet]]</p>"},{"location":"self/english/category/way/","title":"English","text":"<p>[[There is many diff ways to do]]</p>"},{"location":"self/english/category/whichis/","title":"English","text":"<p>[[Which is what we will focuse on actually for the etc]]</p> <p>[[Which is why we're covering in the course first is etc]]</p>"},{"location":"self/english/category/willbe/","title":"English","text":"<p>[[Due to my interest and my experience to Blockchain these things will still be worth something when I have finished paying off the debt because I used to trade cryptocurrency]]</p> <p>[[You'll be amazed how a few of etc]]</p> <p>[[This will be practical stuff you can use]]</p>"},{"location":"self/english/category/wonder/","title":"English","text":"<p>[[I wonder what challenges next month will bring for the team]]</p> <p>[[I just wonder to let you know]]</p> <p>[[At this point you're probably wondering, what is ...-Q]]</p>"},{"location":"self/english/category/work/","title":"English","text":"<p>[[I'm just fooling around online]]</p> <p>[[I've been working at the computer all day]]</p> <p>[[I work on substrate in the last few months]]</p> <p>[[It's fascinating how it's works]]</p> <p>[[They work for you as you elected them]]</p>"},{"location":"self/english/category/details/","title":"private","text":""},{"location":"self/english/category/details/%20Do%20you%20mind%20waiting-Q/","title":"Waiting [[mind]] [[interupt]]","text":""},{"location":"self/english/category/details/%20Have%20you%20got%20a%20minute-Q/","title":"Have you got a minute Q","text":"<p>[[time]]</p>"},{"location":"self/english/category/details/%20How%20long%20is%20the%20career%20contact-Q/","title":"How long is the career contact Q","text":"<p>[[long]]</p>"},{"location":"self/english/category/details/A%20...%20is%20actually%20defined%20by%20at%20least%20two%20params/","title":"A ... is actually defined by at least two params","text":"<p>[[define]]</p>"},{"location":"self/english/category/details/Actually%20I%20was%20asking%20you%20to%20say%20etc/","title":"Actually I was asking you to say etc","text":"<p>[[say]]</p>"},{"location":"self/english/category/details/Actually%2C%20I%20don%27t%20think%20either%20of%20us%20did.%20We%20only%20got%20it%20because%20we%20couldn%27t%20agree%20on%20a%20selected%20type%20of%20smart%20contract/","title":"either [[opinion]] [[think]]","text":""},{"location":"self/english/category/details/After%20a%20while%20I%20realized%20it%20wasn%27t%20working/","title":"Working [[while]]","text":""},{"location":"self/english/category/details/After%20this%20section%20we%27re%20going%20to%20jump%20right%20into%20investment%20banking%20as%20such/","title":"Jump [[as]] [[after]] [[right]] [[going]]","text":""},{"location":"self/english/category/details/All%20major%20economics%20are%20connected%20to%20one%20another/","title":"Connect","text":""},{"location":"self/english/category/details/All%20the%20services%20are%20out%20at%20the%20moment/","title":"Moment #OutOf","text":""},{"location":"self/english/category/details/Always%20look%20at%20the%20source%20and%20then%20the%20source%20of%20the%20source%20If%20you%20want%20to%20drill%20down/","title":"DrillDown","text":""},{"location":"self/english/category/details/Am%20I%20allowed%20to%20use%20my%20mobile%20phone-Q/","title":"Am I allowed to use my mobile phone Q","text":"<p>[[allow]]</p>"},{"location":"self/english/category/details/As%20mention%20earlier%20in%20the%20course/","title":"Earlier [[as]]","text":""},{"location":"self/english/category/details/As%20previously%20discussed/","title":"Previouse [[as]]","text":""},{"location":"self/english/category/details/As%20you%20know%20from%20your%20own%20experience/","title":"As you know from your own experience","text":"<p>[[know]] [[experiance]]</p>"},{"location":"self/english/category/details/At%20this%20point%20you%27re%20probably%20wondering%2C%20what%20is%20...-Q/","title":"At this point you're probably wondering, what is ... Q","text":"<p>[[point]]</p>"},{"location":"self/english/category/details/Before%20we%20go%20on%20I%20want%20to%20put%20some%20finance%20concepts%20on%20your%20radar%20screen%20that%20we%27re%20going%20to%20go%20into%20much%20more%20details/","title":"Radar #Screen [[Before]] [[concept]] [[going]]","text":""},{"location":"self/english/category/details/Believe%20it%20or%20not%20I%27ve%20always%20influence%20by%20dr.gavinwood%20.%20Her%20works%20are%20so%20creative/","title":"Believe","text":""},{"location":"self/english/category/details/Best%20investors%20on%20the%20planet%20always%20do%20their%20own%20research/","title":"Research","text":""},{"location":"self/english/category/details/Best%20way%20to%20learn%20finance%20is%20to%20just%20play%20around%20and%20change%20params/","title":"Way","text":""},{"location":"self/english/category/details/But%20complications%20arise%20when%20it%20etc/","title":"But complications arise when it etc","text":"<p>[[complication]]</p>"},{"location":"self/english/category/details/But%20that%20seems%20to%20be%20ok/","title":"But that seems to be ok","text":"<p>[[seem]]</p>"},{"location":"self/english/category/details/Can%20I%20find%20a%20something%20in%20the%20meantime-Q/","title":"Meantime [[find]]","text":""},{"location":"self/english/category/details/Can%20we%20reach%20conclusion%20here-Q/","title":"Can we reach conclusion here Q","text":"<p>[[conclusion]]</p>"},{"location":"self/english/category/details/Can%20we%20take%20a%20break/","title":"Can we take a break","text":"<p>[[break]] [[take]]</p>"},{"location":"self/english/category/details/Can%20you%20just%20make%20sure%20you%20send%20it%20to%20him%20asap-Q/","title":"Can you just make sure you send it to him asap Q","text":"<p>[[make sure]]</p>"},{"location":"self/english/category/details/Can%20you%20question%20wait%20until%20finish-Q/","title":"Until [[interupt]] [[wait]]","text":""},{"location":"self/english/category/details/Can%20you%20say%20a%20bit%20more%20about-Q/","title":"Can you say a bit more about Q","text":"<p>[[about]]</p>"},{"location":"self/english/category/details/Could%20I%20interrupt%20for%20a%20moment-Q/","title":"Could I interrupt for a moment Q","text":"<p>[[interupt]] #Moment</p>"},{"location":"self/english/category/details/Could%20you%20be%20more%20precise-Q/","title":"Precise","text":""},{"location":"self/english/category/details/Could%20you%20please%20send%20message%20on%20Whatsapp-Q/","title":"Could you please send message on Whatsapp Q","text":"<p>[[send]]</p>"},{"location":"self/english/category/details/Could%20you%20take%20a%20look%20at%20this-Q/","title":"Could you take a look at this Q","text":"<p>[[take]] [ook]]</p>"},{"location":"self/english/category/details/Do%20you%20anticipate%20any%20deficulty-Q/","title":"Anticipate","text":""},{"location":"self/english/category/details/Do%20you%20feel%20comfortable%20telling%20me%20what%20you%20know-Q/","title":"Do you feel comfortable telling me what you know Q","text":"<p>[[tell]] [[comfortable]]</p>"},{"location":"self/english/category/details/Do%20you%20think%20that%27s%20going%20to%20do%20any%20good-Q/","title":"Do you think that's going to do any good Q","text":"<p>[[think]] [[do]] [[going]]</p>"},{"location":"self/english/category/details/Don%27t%20be%20afraid%20to%20pause%20for%20a%20short%20while%20if%20you%20need%20time%20to%20think/","title":"Don't be afraid to pause for a short while if you need time to think","text":"<p>[[pause]] [[afraid]] [[while]] [[time]] [[think]]</p>"},{"location":"self/english/category/details/Don%27t%20you%20have%20anything%20a%20bit%20earlier-Q/","title":"Earlier","text":""},{"location":"self/english/category/details/Due%20to%20my%20interest%20and%20my%20experience%20to%20Blockchain%20these%20things%20will%20still%20be%20worth%20something%20when%20I%20have%20finished%20paying%20off%20the%20debt%20because%20I%20used%20to%20trade%20cryptocurrency/","title":"Worth #Debt #Still [[dueto]]  [[experiance]]","text":""},{"location":"self/english/category/details/During%20our%20session%20before%20the%20your%20eyes%20opened%20would%20often%20start%20the%20session%20with%20relaxing/","title":"session","text":""},{"location":"self/english/category/details/Etc%20for%20the%20same%20reason%20that%20peter%20has%20just%20given/","title":"Etc for the same reason that peter has just given","text":"<p>[[reason]]</p>"},{"location":"self/english/category/details/High%20prices%20can%20occur%20for%20many%20reasons/","title":"Occur #Resean","text":""},{"location":"self/english/category/details/How%20are%20they%20taken-Q/","title":"Taken","text":""},{"location":"self/english/category/details/How%20many%20people%20are%20attending%20the%20meating/","title":"How many people are attending the meating","text":"<p>[[attending]] [[meating]]</p>"},{"location":"self/english/category/details/How%20much%20are%20we%20talking%20about-Q/","title":"How much are we talking about Q","text":"<p>[[talk]]</p>"},{"location":"self/english/category/details/How%20much%20notice%20must%20I%20give%20if%20I%20want%20to%20leave%20early-Q/","title":"Notice #Early [[leave]]","text":""},{"location":"self/english/category/details/How%20should%20we%20deal%20with...-Q/","title":"How should we deal with... Q","text":"<p>[[deal]]</p>"},{"location":"self/english/category/details/How%20they%20change%20interest%20rates/","title":"Change","text":""},{"location":"self/english/category/details/How%20were%20those%20modules%20manufactured-Q/","title":"Manufactured","text":""},{"location":"self/english/category/details/I%20agree%20whole%20heartly/","title":"Heartly","text":""},{"location":"self/english/category/details/I%20am%20just%20tried%20of%20the%20same%20old%20grind/","title":"Grind","text":""},{"location":"self/english/category/details/I%20am%20not%20sure%20this%20module%20would%20go%20with%20it/","title":"Sure","text":""},{"location":"self/english/category/details/I%20can%27t%20face%20myself/","title":"Face","text":""},{"location":"self/english/category/details/I%20don%27t%20know%20if%20it%20works%20but%20we%20try%20it/","title":"I don't know if it works but we try it","text":"<p>[[know]] [[try]] [[if]]</p>"},{"location":"self/english/category/details/I%20don%27t%20think%20of%20myself%20as%20a%20hero%20person/","title":"I don't think of myself as a hero person","text":"<p>[[think]]</p>"},{"location":"self/english/category/details/I%20don%27t%20think%20one%20is%20better%20than%20another%20etc/","title":"I don't think one is better than another etc","text":"<p>[[think]]</p>"},{"location":"self/english/category/details/I%20forgot%20to%20sth%20so%20I%20would%20dclick%2C%20and%20I%20would%20go%20here/","title":"Forget [[would]]","text":""},{"location":"self/english/category/details/I%20haven%27t%20seen%20a%20framework%20as%20good%20as%20substrate/","title":"I haven't seen a framework as good as substrate","text":"<p>[[as]]</p>"},{"location":"self/english/category/details/I%20hope%20you%20enjoy.%20If%20you%20have%20any%20question%20please%20let%20me%20know/","title":"Enjoy [[let]] [[know]]","text":""},{"location":"self/english/category/details/I%20just%20need%20to%20sort%20it%20out%20with%20you/","title":"I just need to sort it out with you","text":"<p>[[need]]</p>"},{"location":"self/english/category/details/I%20just%20wonder%20to%20let%20you%20know/","title":"I just wonder to let you know","text":"<p>[[let]]</p>"},{"location":"self/english/category/details/I%20know%20what%20you%20mean%20%2C%20but%20etc/","title":"I know what you mean , but etc","text":"<p>[[know]]</p>"},{"location":"self/english/category/details/I%20maybe%20wrong%2C%20but%20etc/","title":"Wrong","text":""},{"location":"self/english/category/details/I%20missed%20your%20call/","title":"Missed","text":""},{"location":"self/english/category/details/I%20need%20some%20time%20to%20think%20this%20over/","title":"Over [[think]] [[need]]","text":""},{"location":"self/english/category/details/I%20never%20gained%20any%20information%20except%20self%20study/","title":"Gaine","text":""},{"location":"self/english/category/details/I%20tend%20to%20work%20at%20office%20it%20gives%20me%20etc/","title":"I tend to work at office it gives me etc","text":"<p>[[tend]]</p>"},{"location":"self/english/category/details/I%20think%20btc%20is%20gonna%20be%20the%20defacto%20currency%20for%20many%20countries.%20It%27s%20more%20stable%20way%20to%20get%20paid.%20It%20won%27t%20be%20as%20volatile%20as%20other%20currencies%20in%20the%20long%20run/","title":"BTC [[gonna]] [[get]] [[paid]] [[as]]","text":""},{"location":"self/english/category/details/I%20think%20it%20must%20be%20a%20fault%20with%20your%20OS/","title":"I think it must be a fault with your OS","text":"<p>[[mustbe]] [[think]]</p>"},{"location":"self/english/category/details/I%20think%20we%20are%20drifting%20off%20the%20point%20a%20bit/","title":"Drifting [[think]] [[point]]","text":""},{"location":"self/english/category/details/I%20think%20you%20should%20consider%20decision/","title":"I think you should consider decision","text":"<p>[[consider]]</p>"},{"location":"self/english/category/details/I%20think%20you%27ve%20answered%20a%20slightly%20different%20question%20etc/","title":"Slightly [[answer]]","text":""},{"location":"self/english/category/details/I%20try%20to%20study%20English%20between%20the%20other%20activities%20of%20the%20day/","title":"Between [[activity]]","text":""},{"location":"self/english/category/details/I%20was%20going%20to%20call%20you/","title":"I was going to call you","text":"<p>[[goingto]]</p>"},{"location":"self/english/category/details/I%20was%20just%20wondering%20how%20many%20people%20there%20are-Q/","title":"I was just wondering how many people there are Q","text":"<p>[[wonder]] </p>"},{"location":"self/english/category/details/I%20wonder%20what%20challenges%20next%20month%20will%20bring%20for%20the%20team/","title":"Challenge","text":""},{"location":"self/english/category/details/I%27d%20be%20interested%20to%20hear%20more%20about%20etc/","title":"Interested [[about]] [[]]","text":""},{"location":"self/english/category/details/I%27d%20like%20to%20ask%20when%20you%20should%20talk%20etc/","title":"I'd like to ask when you should talk etc","text":"<p>[[talk]] [[ask]]</p>"},{"location":"self/english/category/details/I%27d%20rather%20to%20let%20me%20finish%20it%20that%20is%20all%20right/","title":"I'd rather to let me finish it that is all right","text":"<p>[[rather]] [[let]]</p>"},{"location":"self/english/category/details/I%27ll%20explain%20in%20the%20next%20lecture/","title":"I'll explain in the next lecture","text":"<p>[[explain]]</p>"},{"location":"self/english/category/details/I%27m%20a%20person%20who%20etc/","title":"I'm a person who etc","text":"<p>[[who]]</p>"},{"location":"self/english/category/details/I%27m%20a%20type%20of%20person%20that%20etc/","title":"I'm a type of person that etc","text":"<p>[[type]]</p>"},{"location":"self/english/category/details/I%27m%20afraid%20we%27ve%20run%20out%20of%20time/","title":"I'm afraid we've run out of time","text":"<p>[[afraid]] [[time]]</p>"},{"location":"self/english/category/details/I%27m%20gonna%20cover%20any%20boring%20theory/","title":"Cover","text":""},{"location":"self/english/category/details/I%27m%20interested%20in%20knowing%20what%20kind%20of%20etc/","title":"I'm interested in knowing what kind of etc","text":"<p>[[interested]] [[know]] [[kind of]]</p>"},{"location":"self/english/category/details/I%27m%20just%20fooling%20around%20online/","title":"Fooling #Around","text":""},{"location":"self/english/category/details/I%27m%20looking%20forward%20to%20this%20trip/","title":"Trip [[look]]","text":""},{"location":"self/english/category/details/I%27m%20not%20gonna%20cover%20any%20boring%20theory%20this%20will%20be%20practical%20staff%20you%20can%20use/","title":"Theory [[gonna]] [[cover]]","text":""},{"location":"self/english/category/details/I%27m%20not%20sure%20that%27s%20relevant/","title":"Sure","text":""},{"location":"self/english/category/details/I%27m%20very%20technical%20oriented/","title":"I'm very technical oriented","text":"<p>[[oriented]]</p>"},{"location":"self/english/category/details/I%27ve%20been%20meaning%20to%20speak%20to%20you%20all%20evening/","title":"I've been meaning to speak to you all evening","text":"<p>[[speek]]</p>"},{"location":"self/english/category/details/I%27ve%20got%20a%20bit%20of%20a%20problem%20in%20the%20project.%20the%20noun%20not%20working/","title":"Problem [[got]]","text":""},{"location":"self/english/category/details/I%27ve%20got%20problem%20with%20etc/","title":"Problem [[got]]","text":""},{"location":"self/english/category/details/If%20I%20understand%20you%20correctly%2C%20you%20think%20our%20investment%20has%20been%20mistake/","title":"Correctly [[think]]","text":""},{"location":"self/english/category/details/If%20you%20don%27t%20understand%20...%2C%20then%20it%20can%20be%20catastrophic%2Cright/","title":"Catastrophic [[understand]]","text":""},{"location":"self/english/category/details/If%20you%20want%20I%20could%20change%20it/","title":"If you want I could change it","text":"<p>[[want]]</p>"},{"location":"self/english/category/details/In%20any%20work%20environment/","title":"In any work environment","text":"<p>[[work]]</p>"},{"location":"self/english/category/details/In%20my%20spare%20time/","title":"Spare [[time]]","text":""},{"location":"self/english/category/details/Is%20insurance%20Included-Q/","title":"Included","text":""},{"location":"self/english/category/details/Is%20there%20anyway%20to%20get%20a%20cheaper%20fare/","title":"Anyway #Cheaper #Fare","text":""},{"location":"self/english/category/details/Is%20your%20team%20doing%20well-Q/","title":"Doing","text":""},{"location":"self/english/category/details/It%20can%20get%20you%20into%20trouble%20if%20you%20don%27t%20use%20unit%20test/","title":"Trouble [[if]]","text":""},{"location":"self/english/category/details/It%20can%20help%20me%20predict%20what%20might%20happen%20from%20a%20perspective%20in%20the%20future/","title":"Perspective #Predict","text":""},{"location":"self/english/category/details/It%20couldn%27t%20hurt%20to%20ask%20someone/","title":"Hurt [[ask]]","text":""},{"location":"self/english/category/details/It%20has%20two%20years%20left%20on%20my%20passport/","title":"It has two years left on my passport","text":"<p>[[left]]</p>"},{"location":"self/english/category/details/It%20is%20cause%20by%20etc/","title":"It is cause by etc","text":"<p>[[cause]]</p>"},{"location":"self/english/category/details/It%20takes%20a%20little%20while%20to%20work/","title":"It takes a little while to work","text":"<p>[[while]] [[work]]</p>"},{"location":"self/english/category/details/It%20would%20be%20good%20if%20I%20could%20get%20it%20fix/","title":"Fix [[Wouldbe]]","text":""},{"location":"self/english/category/details/It%27ll%20be%20a%20competition%20advantage%20for%20you/","title":"Competition [[willbe]]","text":""},{"location":"self/english/category/details/It%27s%20another%20way%20of%20looking%20at%20things%20and%20it%27s%20a%20lot%20more%20positive/","title":"It's another way of looking at things and it's a lot more positive","text":"<p>[[way]] [[look]]</p>"},{"location":"self/english/category/details/It%27s%20been%20working%20fine/","title":"It's been working fine","text":"<p>[[work]]</p>"},{"location":"self/english/category/details/It%27s%20fascinating%20how%20it%27s%20works/","title":"Fascinate","text":""},{"location":"self/english/category/details/It%27s%20my%20pleasure.%20Thanks%20for%20inviting%20me/","title":"It's my pleasure. Thanks for inviting me","text":"<p>[[pleasure]] [[invite]] [[thanks]]</p>"},{"location":"self/english/category/details/It%27s%20primarily%20due%20to%20high%20prices/","title":"Primarily","text":""},{"location":"self/english/category/details/It%27s%20saying%2C%20it%20means%20to%20make%20etc/","title":"It's saying, it means to make etc","text":"<p>[[say]] [[make]]</p>"},{"location":"self/english/category/details/It%27s%20time%20for%20you%20to%20rotate%20in%20to%20the%20etc/","title":"Rotate","text":""},{"location":"self/english/category/details/Just%20a%20second%20please%20I%20almost%20done/","title":"Second [[done]]","text":""},{"location":"self/english/category/details/Let%20me%20continue/","title":"Let me continue","text":"<p>[[continue]]</p>"},{"location":"self/english/category/details/Let%20me%20explain%20one%20more%20time/","title":"Let me explain one more time","text":"<p>[[explain]] [[time]]</p>"},{"location":"self/english/category/details/Let%20me%20get%20a%20closer%20look%20at%20this%20first/","title":"Closer [[look]]","text":""},{"location":"self/english/category/details/Let%20me%20have%20everone%20for%20attention%20please/","title":"Everyone [[attention]]","text":""},{"location":"self/english/category/details/Let%20me%20try%20to%20%20answer%20your%20question%20like%20this/","title":"Answer","text":""},{"location":"self/english/category/details/Let%27s%20called%20a%20Day/","title":"Let's called a Day","text":"<p>[[call]]</p>"},{"location":"self/english/category/details/Let%27s%20get%20to%20the%20point/","title":"Let's get to the point","text":"<p>[[get]]</p>"},{"location":"self/english/category/details/Let%27s%20head%20over%20to%20-.org%20and%20take%20a%20look%20etc/","title":"Head","text":""},{"location":"self/english/category/details/Let%27s%20take%20a%20few%20%20minutes%20to%20discuss%20the%20difference%20between%20these%20two%20type%20of%20setups/","title":"Let's take a few  minutes to discuss the difference between these two type of setups","text":"<p>[[rather]]</p>"},{"location":"self/english/category/details/Let%27s%20take%20a%20look%20at%20the%20following%20exp/","title":"Following [[take]]","text":""},{"location":"self/english/category/details/Let%27s%20work%20on%20with%20together/","title":"Let's work on with together","text":"<p>[[workon]]</p>"},{"location":"self/english/category/details/May%20I%20ask%20you%20for%20your%20attention/","title":"May I ask you for your attention","text":"<p>[[attention]] [[ask]]</p>"},{"location":"self/english/category/details/My%20passport%20has%20two%20years%20left%20on%20its%20expired%20date/","title":"Passport #Left","text":""},{"location":"self/english/category/details/On%20the%20one%20hand%2C%20I%20would%20want%20to%20tell%20the%20truth.%20On%20the%20other%20hand%2C%20I%20wouldn%27t%20want%20to%20get%20in%20trouble/","title":"Trouble #Hand","text":""},{"location":"self/english/category/details/One%20of%20the%20most%20powerfull%20tools%20that%20you%20can%20have/","title":"Tools","text":""},{"location":"self/english/category/details/Please%2C%20do%20your%20own%20research%20always%20and%20don%27t%20take%20the%20media%27s%20world%20for%20it/","title":"Research","text":""},{"location":"self/english/category/details/Price%20of%20commedites%20affect%20almost%20all%20companies%20in%20the%20world%20regardless%20of%20what%20industry%20they%27re%20in/","title":"Price of commedites affect almost all companies in the world regardless of what industry they're in","text":"<p>[[affect]] [[regardless]]</p>"},{"location":"self/english/category/details/Read%20the%20answer%20after%20you%27ve%20tried%20to%20complete%20the%20exercise/","title":"Read the answer after you've tried to complete the exercise","text":"<p>[[exercise]]</p>"},{"location":"self/english/category/details/Remember%20that%20revenue%20for%20a%20company%20is%20the%20same%20thing%20kind%20of%20as%20GFP%20for%20a%20country%20/","title":"Remember that revenue for a company is the same thing kind of as GFP for a country","text":"<p>[[kind]] [[same]] [[as]] [[remember]]</p>"},{"location":"self/english/category/details/She%20is%20lack%20of%20opinion/","title":"LackOf [[opinion]]","text":""},{"location":"self/english/category/details/Snap%20in%20the%20face/","title":"Snap [[face]]","text":""},{"location":"self/english/category/details/So%20I%20had%20a%20look%20at%20the%20...thinking%20It%20might%20be%20that/","title":"So I had a look at the ...thinking It might be that","text":"<p>[[mightbe]] [[think]]</p>"},{"location":"self/english/category/details/So%20take%20a%20look%20here/","title":"So take a look here","text":"<p>[[take]]</p>"},{"location":"self/english/category/details/So%20that%20is%20basically%20what%20I%20want%20%20to%20say%20about%20this%20for%20now%20etc/","title":"So that is basically what I want  to say about this for now etc","text":"<p>[[basically]] [[say]] </p>"},{"location":"self/english/category/details/So%20that%20is%20basically%20what%20I%20want%20to%20say%20about%20this%20for%20now%20etc/","title":"Basically [[say]] [[about]] [[want]]","text":""},{"location":"self/english/category/details/Sometimes%20it%27s%20important%20to%20see%20potential/","title":"Potential","text":""},{"location":"self/english/category/details/Sometimes%20that%20takes%20care%20of%20it/","title":"Sometimes that takes care of it","text":"<p>[[fixes the problem]]</p>"},{"location":"self/english/category/details/Sorry%20I%20don%27t%20quite%20get%20your%20drift/","title":"Drift [[quite]]","text":""},{"location":"self/english/category/details/Sorry%20I%27m%20still%20not%20very%20clear%20about%20etc/","title":"Sorry I'm still not very clear about etc","text":"<p>[[clear]]</p>"},{"location":"self/english/category/details/Sorry%20to%20interrupt%20%2Cbut%20etc/","title":"interupt [[sorry]]","text":""},{"location":"self/english/category/details/Thank%20you%20for%20giving%20me%20the%20opportunity/","title":"Thank you for giving me the opportunity","text":"<p>[[opportunity]] [[giving]]</p>"},{"location":"self/english/category/details/That%27s%20not%20really%20what%20I%20want%20to%20asking.%20I%20meant%20etc/","title":"That's not really what I want to asking. I meant etc","text":"<p>[[meant]] [[ask]]</p>"},{"location":"self/english/category/details/That%27s%20not%20really%20what%20I%20want%20to%20asking.I%20meant%20etc/","title":"That's not really what I want to asking.I meant etc","text":"<p>[[meant]] [[want]]</p>"},{"location":"self/english/category/details/That%27s%20one%20of%20the%20reason%20why%20there%20was%20a%20bit%20of%20commedity/","title":"Reason","text":""},{"location":"self/english/category/details/The%20first%20point%20is%20about%20how%20much%20you%20spend%20for%20your%20Blockchain%20positions-Q%20Is%20there%20any%20range%20for%20specifying%20it-Q/","title":"The first point is about how much you spend for your Blockchain positions Q Is there any range for specifying it Q","text":"<p>[[point]] [[about]]</p>"},{"location":"self/english/category/details/The%20market%20tries%20to%20anticipate%20what%20will%20happen/","title":"Anticipate [[try]]","text":""},{"location":"self/english/category/details/The%20purpose%20of%20this%20presentation%20is%20to%20etc/","title":"The purpose of this presentation is to etc","text":"<p>[[purpose]]</p>"},{"location":"self/english/category/details/The%20reason%20I%20am%20asking/","title":"Reason [[ask]]","text":""},{"location":"self/english/category/details/The%20situation%20is%20getting%20out%20of%20control/","title":"The situation is getting out of control","text":"<p>[[situation]] [[out of control]]</p>"},{"location":"self/english/category/details/The%20smart%20contracts%20written%20in%20Solidity%20need%20to%20be%20compiled%20and%20deployed%20to%20the%20blockchain%20This%20can%20be%20achieved%20by%20using%20a%20development%20environment%20for%20Ethereum%20called%20Truffle/","title":"The smart contracts written in Solidity need to be compiled and deployed to the blockchain This can be achieved by using a development environment for Ethereum called Truffle","text":"<p>[[achive]]</p>"},{"location":"self/english/category/details/There%20should%20be%20learning%20rather%20than%20coding/","title":"There should be learning rather than coding","text":"<p>[[shouldbe]]</p>"},{"location":"self/english/category/details/They%20rely%20on%20what%20other%20people%20tell%20them%20and%20they%20influenced%20by%20other%20people%27s%20opinions/","title":"They rely on what other people tell them and they influenced by other people's opinions","text":"<p>[[opinion]] [[rely]]</p>"},{"location":"self/english/category/details/They%20work%20for%20you%20as%20you%20elected%20them/","title":"They work for you as you elected them","text":"<p>[[as]]</p>"},{"location":"self/english/category/details/This%20is%20crucial%20for/","title":"Crucial","text":""},{"location":"self/english/category/details/This%20page%20assume%20you%27re%20investing%20in%20banks/","title":"This page assume you're investing in banks","text":"<p>[[assume]]</p>"},{"location":"self/english/category/details/This%20will%20all%20make%20much%20more%20sense%20to%20you/","title":"Sense [[make]]","text":""},{"location":"self/english/category/details/This%20will%20be%20practical%20stuff%20you%20can%20use/","title":"Practical","text":""},{"location":"self/english/category/details/To%20hand%20sth%20in/","title":"delivery","text":""},{"location":"self/english/category/details/To%20me%2C%20it%27s%20just%20total%20waste%20of%20time/","title":"Waste","text":""},{"location":"self/english/category/details/Try%20to%20understand%20why%20economic%20statistics%20are%20going%20up%20or%20down/","title":"Try to understand why economic statistics are going up or down","text":"<p>[[understand]]</p>"},{"location":"self/english/category/details/We%20are%20degrising/","title":"Degris","text":""},{"location":"self/english/category/details/We%20are%20on%20the%20wrong%20track/","title":"Wrong #Track","text":""},{"location":"self/english/category/details/We%20get%20fooled%20by/","title":"Fool","text":""},{"location":"self/english/category/details/We%20need%20to%20move%20on/","title":"We need to move on","text":"<p>[[moveon]]</p>"},{"location":"self/english/category/details/We%20should%20do%20that%20before%20we%20continue/","title":"We should do that before we continue","text":"<p>[[continue]]</p>"},{"location":"self/english/category/details/We%20will%20do%20anything%20as%20long%20as%20it%20is%20legal/","title":"Legal #Anything","text":""},{"location":"self/english/category/details/We%20work%20on%20are%20significantly%20influence%20by%20etc/","title":"Significantly","text":""},{"location":"self/english/category/details/We%27ll%20get%20into%20that%20in%20more%20details/","title":"Detail","text":""},{"location":"self/english/category/details/We%27ll%20get%20there%20soon%20later/","title":"We'll get there soon later","text":"<p>[[get]] [[later]]</p>"},{"location":"self/english/category/details/We%27ll%20have%20to%20cut%20this%20meeting%20short/","title":"We'll have to cut this meeting short","text":"<p>[[cut]]</p>"},{"location":"self/english/category/details/We%27ll%20talk%20about%20how%20to%20do%20that/","title":"We'll talk about how to do that","text":"<p>[[talk]]</p>"},{"location":"self/english/category/details/We%27re%20gonna%20be%20recommending%20hopefully%20to%20website/","title":"We're gonna be recommending hopefully to website","text":"<p>[[gonnabe]]</p>"},{"location":"self/english/category/details/What%20a%20company%20worth%20today/","title":"Worth","text":""},{"location":"self/english/category/details/What%20about%20a%20meeting%20sometime%20later%20last%20week-Q/","title":"Sometime [[about]]","text":""},{"location":"self/english/category/details/What%20am%20I%20doing-Q/","title":"What am I doing Q","text":"<p>[[do]]</p>"},{"location":"self/english/category/details/What%20are%20they%20used%20for-Q/","title":"Used","text":""},{"location":"self/english/category/details/What%20is%20expected%20for%20GDP-Q/","title":"Expect","text":""},{"location":"self/english/category/details/What%20is%20one%20problem%20caused%20by%20compiler/","title":"Problem [[cause]] [[issue]]","text":""},{"location":"self/english/category/details/What%20is%20this%20module%20made%20of-Q/","title":"What is this module made of Q","text":"<p>[[made]]</p>"},{"location":"self/english/category/details/What%20seems%20to%20the%20trouble-Q/","title":"Trouble [[issue]]","text":""},{"location":"self/english/category/details/What%20time%20in%20the%20afternoon%20would%20be%20most%20convenient%20for%20you-Q/","title":"What time in the afternoon would be most convenient for you Q","text":"<p>[[convenient]]</p>"},{"location":"self/english/category/details/What%20would%20you%20do%20first-Q/","title":"What would you do first Q","text":"<p>[[do]] [[first]]</p>"},{"location":"self/english/category/details/What%27s%20that%20about-Q/","title":"What's that about Q","text":"<p>[[about]]</p>"},{"location":"self/english/category/details/What%27s%20the%20difference%20in%20type%20of%20frameworks-Q/","title":"What's the difference in type of frameworks Q","text":"<p>[[rather]] [[type]]</p>"},{"location":"self/english/category/details/When%20buildling%20a%20model%20of%20the%20company%20you%20are%20analyzing%20uses%20a%20lot%20of%20debt%2C%20you%20have%20to%20analyze%20interest%20rate/","title":"Model #Building","text":""},{"location":"self/english/category/details/When%20is%20due-Q/","title":"When is due Q","text":"<p>[[due]]</p>"},{"location":"self/english/category/details/When%20the%20economy%20are%20not%20doing%20well%20we%20refer%20to%20this%20as%20a%20bear%20market/","title":"When the economy are not doing well we refer to this as a bear market","text":"<p>[[as]]</p>"},{"location":"self/english/category/details/Where%20were%20these%20products%20made-Q/","title":"Where were these products made Q","text":"<p>[[made]]</p>"},{"location":"self/english/category/details/Which%20is%20the%20best%20way%20encoding-Q/","title":"Which is the best way encoding Q","text":"<p>[[way]]</p>"},{"location":"self/english/category/details/Which%20is%20what%20we%20will%20focuse%20on%20actually%20for%20the%20etc/","title":"Focuse","text":""},{"location":"self/english/category/details/Which%20is%20why%20we%27re%20covering%20in%20the%20course%20first%20is%20etc/","title":"Which is why we're covering in the course first is etc","text":"<p>[[cover]]</p>"},{"location":"self/english/category/details/Which%20of%20the%20following%20would%20you%20do-Q/","title":"Following [[do]]","text":""},{"location":"self/english/category/details/Which%20task%20do%20you%20associate%20with%20current%20plan-Q/","title":"Task #Associate","text":""},{"location":"self/english/category/details/Who%20am%20I%20meeting-Q/","title":"Who am I meeting Q","text":"<p>[[meet]]</p>"},{"location":"self/english/category/details/Who%20do%20I%20contact%20if%20there%20is%20a%20question-Q/","title":"Who do I contact if there is a question Q","text":"<p>[[contact]]</p>"},{"location":"self/english/category/details/Why%20don%27t%20we%20take%20a%20short%20break-Q/","title":"Why don't we take a short break Q","text":"<p>[[break]] [[take]]</p>"},{"location":"self/english/category/details/Why%20don%27t%20you%20mind%20creating%20a%20new%20start%20up-Q/","title":"Why don't you mind creating a new start up Q","text":"<p>[[mind]]</p>"},{"location":"self/english/category/details/Why%20is%20this%20the%20case-Q/","title":"Case","text":""},{"location":"self/english/category/details/Will%20there%20be%20an%20opportunity%20to%20do%20some%20getting%20advice-Q/","title":"Will there be an opportunity to do some getting advice Q","text":"<p>[[opportunity]] [[advice]]</p>"},{"location":"self/english/category/details/Without%20doubt%2C%20it%27s%20the%20must-see%20clip%20of%20this%20toturial.%20The%20whole%20clip%20blends%20together%20well/","title":"Without doubt, it's the must see clip of this toturial. The whole clip blends together well","text":"<p>[[doubt]]</p>"},{"location":"self/english/category/details/Would%20it%20be%20possible%20to%20get%20someone%20come%20at%20the%20airport-Q/","title":"Would it be possible to get someone come at the airport Q","text":"<p>[[possible]] [[come]]</p>"},{"location":"self/english/category/details/Would%20you%20mind%20give%20me%20more%20time%20think%20about%20it-Q/","title":"Would you mind give me more time think about it Q","text":"<p>[[about]]</p>"},{"location":"self/english/category/details/You%20are%20through%20to%20the%20my%20experiences/","title":"You are through to the my experiences","text":"<p>[[experience]]</p>"},{"location":"self/english/category/details/You%20can%20click%20on%20each%20one%20of%20these%20buttons%20here/","title":"Button #Click","text":""},{"location":"self/english/category/details/You%20can%20fool%20other%20people%20but%20you%20can%27t%20fool%20yourself%20that%27s%20what%20I%20believe/","title":"Fool [[believe]]","text":""},{"location":"self/english/category/details/You%20can%27t%20except%20me%20to%20work/","title":"You can't except me to work","text":"<p>[[except]] [[work]]</p>"},{"location":"self/english/category/details/You%20gotta%20keep%20an%20eye%20on%20some%20of%20these%20factors/","title":"Eye [[gotta]]","text":""},{"location":"self/english/category/details/You%20know%20what-Q/","title":"You know what Q","text":"<p>[[know]]</p>"},{"location":"self/english/category/details/You%20may%20be%20right%2C%20but%20etc/","title":"You may be right, but etc","text":"<p>[[maybe]]</p>"},{"location":"self/english/category/details/You%20need%20to%20determine%20the%20price%20of%20GAS/","title":"Determine","text":""},{"location":"self/english/category/details/You%20need%20to%20exercise%20more%20often/","title":"You need to exercise more often","text":"<p>[[need]]</p>"},{"location":"self/english/category/details/You%20need%20to%20familiar%20with%20the%20etc/","title":"Familiar","text":""},{"location":"self/english/category/details/You%20talked%20about%20etc/","title":"You talked about etc","text":"<p>[[about]]</p>"},{"location":"self/english/category/details/You%27ll%20have%20to%20do%20better%20than%20that-%20I%27m%20afraid/","title":"You'll have to do better than that  I'm afraid","text":"<p>[[afraid]]</p>"},{"location":"self/english/category/details/You%27ll%20notice%20that%20when%20interest%20rates%20are%20unusually%20high%20you%20might%20say%20%2C%20Arman..How%20because%20etc/","title":"You'll notice that when interest rates are unusually high you might say , Arman..How because etc","text":"<p>[[notice]]</p>"},{"location":"self/english/category/details/You%27re%20actually%20going%20to%20be%20able%20to%20etc/","title":"Actually","text":""},{"location":"self/english/category/details/You%27re%20probably%20right/","title":"You're probably right","text":"<p>[[right]]</p>"},{"location":"self/english/category/details/You%27re%20standing%20on%20the%20exact%20site%20where%20Dr.gavin%20founded%202018/","title":"You're standing on the exact site where Dr.gavin founded 2018","text":"<p>#Stand</p>"},{"location":"self/english/category/details/You%27ve%20notice%20....%20Is%20falling%20as%20a%20result%20of%20the%20time%20lost/","title":"Notice #Lost","text":""},{"location":"self/english/category/details/depending%20on%20what%20sector%20you%20cover/","title":"Cover","text":""},{"location":"self/english/category/details/let%20me%20kick%20it%20off%20with%20the%20what/","title":"Let me kick it off with the what","text":"<p>[[kickoff]]</p>"},{"location":"self/english/category/details/re/","title":"Re","text":"<p>[[I think you should reconsider that]]</p> <p>[[Could you please rephrase your question-Q]]</p>"},{"location":"self/english/category/details/to%20see%20if%20that%20does%20the%20trick/","title":"Trick [[fixes the problem]]","text":""},{"location":"self/english/category/details/we%20don%27t%20know%20how%20to%20...%2C%20so%20you%20just%20need%20to%20be%20aware%20of%20the%20fact%20that%20given%20a%20Cert/","title":"Aware #Fact","text":""},{"location":"self/english/category/interview/en-interview/","title":"English","text":""},{"location":"self/english/category/interview/en-interview/#sentences","title":"Sentences","text":"<p>[[I'm a person who etc]]</p> <p>[[I'm a type of person that etc]]</p> <p>[[In any work environment]]</p> <p>[[In my spare time]]</p> <p>[[I'm very technical oriented]]</p> <p>[[Thank you for giving me the opportunity]]</p> <p>[[It's my pleasure. Thanks for inviting me]]</p> <p>[[That's not really what I want to asking. I meant etc]]</p> <p>[[Sorry I'm still not very clear about etc]]</p> <p>[[Sorry I don't quite get your drift]]</p> <p>[[Don't be afraid to pause for a short while if you need time to think]]</p> <p>[[So that is basically what I want to say about this for now etc]]</p> <p>[[Sometimes it's important to see potential]]</p> <p>[[You can fool other people but you can't fool yourself that's what I believe]]</p> <p>[[I didn't take enough time to introduce it and nobody knew how it worked]]</p> <p>[[I learned that all those something seems clear to me]].[[It doesn't mean that everyone else understands]]</p> <p>[[I'll take more time and do more trials before I try anything like that again]]</p> <p>[[I think it's too. Well. I enjoy the job I'm doing]]</p> <p>[[I guess I'm well with everyone but I really want to move on and try something new]]</p> <p>[[I've had this job for 2 years now and I think I've outgrown it]]</p> <p>[[I'm ready for a new challenge something that stretches me]]</p> <p>[[I tend to worry too much whether the CTO is satisfied or not]]</p> <p>[[And that means sometimes I spend too much time on details and not enough time on other aspects of the job]]</p> <p>[[If anything changes, I can reach back out to you.]]</p>"},{"location":"self/english/category/interview/en-interview/#questions","title":"Questions","text":""},{"location":"self/english/category/interview/en-interview/#1-what-can-you-do-for-this-company-what-can-you-contribute","title":"1. What can you do for this company? What Can You Contribute?","text":"<p>What I want to do depends on some factors for example:</p> <p>I'm usually good at resolving a problem so I believe  when I handle the best practices and related them to work  it will be profitable for the company!</p> <p>In other example: at my previous work experience I brought Mvc, RestAPI, and DevOps engineering to a company when they didn't work except Monolithic  Application by ASP.Net WebForms.</p> <p>I'm ready for a new challenge something that stretches me</p> <p>As an engineer, I strive to approach problems in new and creative ways, which is why I think I would be an asset to this team.\"</p> <p>So, for contribute to the company I will improve your work, services like ... </p> <p>I'm used to taking a personal approach to the development  and it will be like a map for my tasks  because I've got qualification.</p> <p>I very much like to put together components as an engineering work  I've always had particularly good feedback for my work in this area.</p>"},{"location":"self/english/category/interview/en-interview/#2-why-should-we-hire-you-why-are-you-the-best-person-for-the-job-what-can-you-do-for-us-that-other-applicants-cant","title":"2. Why should we hire you? Why are you the best person for the job? What can you do for us that other applicants can\u2019t?","text":"<p>This is a critical question in the process, thank you for asking. </p> <p>I bring many ideas with me that can be replicated on a larger scale. I will bring that innovative and war spirit to your company, In addition, I bring three things to the table that most candidates can\u2019t offer:</p> <p>At the first is problem-solving ability that I\u2019ve used to improve team performance,</p> <p>In-depth knowledge of information technology, </p> <p>And previous experience in variety programming languages. </p> <p>and your success will be my top priority,</p> <p>because I am confident and perfect fit for this position </p> <p>and I have experience and traits that you are looking for.</p> <p>Finally, I think feel fully aligned with your image and values.</p> <p>Based on research I've done, your company is looking for a Blockchain enthusiastic and experienced developer or maybe Blockchain specialist and architecture to grow its business so I am sure my education and my strengths show that I can do this job. I very much think that my skills and experience are a good fit for what you're looking for. And I believe I excel in that field.</p> <p>I'm also a big follower of your company.</p>"},{"location":"self/english/category/interview/en-interview/#3-what-do-you-know-about-our-company","title":"3. What do you know about our company?","text":"<p>I really respect your company's commitment to be constantly evolving. </p> <p>I really proud of your roadmap since the company will be working on ...</p> <p>I really think that growth and innovation are key in any industry  but especially in the field of technology, and this organization  is constantly pushing past the preconceived limitations. </p>"},{"location":"self/english/category/interview/en-interview/#4-what-attracted-you-to-this-company","title":"4. What attracted you to this company?","text":"<p>You know, are driven by profit is important.  That's important I want to work for the best.</p> <p>You lead the ... in technology and you have the best reputation of any company in the business.</p> <p>I know the company using Blockchain for a variety of the existing business models.</p> <p>So not only does the innovativeness of the company attract me, but also the way they treat their employees.</p> <p>I like the corporate culture here. </p> <p>I need to relocate but it is not far. You are an ethical company, </p>"},{"location":"self/english/category/interview/en-interview/#5-tell-us-about-yourself","title":"5. Tell us about yourself?","text":"<p>I always have worked= in software engineering for my entire 12-years career, and my commitment to critical thinking and attention to deep problems ==have gotten me to where I am today.</p> <p>I always have a strong willingness to learn. I took my own time to study and mastered it quickly. </p> <p>I graduated with a master's degree in information technology from the University of ..., in 2021.</p> <p>During my work on DevOps and web development until 2020  as you can see my works on the archive section of my personal website  I attend to the cryptocurrency and Blockchain development.</p> <p>I've got a lot of experience and knowledge in different sectors.</p> <p>I've got my decision for more concentrate on polka ecosystem and rust. </p> <p>Although my past knowledge helped me for understanding Blockchain and the capability of learning new technologies. </p> <p>I'd really like the opportunity to use all these experiences in the services of a company for getting more profit.</p> <p>I think my strongest trait is my attention to detail.  this trait has helped me tremendously in this field of work. </p> <p>That resulted in taking too much time on a particular task  and it shows down my work,but, after that, I found my work and efficacy increased dramatically. </p> <p>I enjoy being around different types of people. I am quite easy going I suppose I work well with anyone and my attitude is \"anything goes\".</p> <p>I always like to challenge myself to improve at everything I do.</p> <p>Finally, I take charge and head work up when from the front matters. I will be more diligent if I take a good suggestion.</p> <p>As a developer, it is important to understand many areas of the project.  </p> <p>Which is one of the top 200 the universities in the world.</p>"},{"location":"self/english/category/interview/en-interview/#6-list-5-words-describing-yourself-what-are-your-strengths","title":"6. List 5 words describing yourself? What are your strengths?","text":"<p>Enthusias. Reliable. Flexible. Motivative. Creative. Fitting a good choice to the problems.  In additon I've got system features like High availability :)</p>"},{"location":"self/english/category/interview/en-interview/#7-what-are-your-weaknesses","title":"7. What are your weaknesses?","text":"<p>I feel my English ability is my weakness trait. I am not very good at speaking English. I know this is only a temporary issue.  I'm definitely studying hard to communicate more effectively.</p> <p>The weakest trait I struggled with was not asking for help.  I'm definitely working on knowing== when it would be beneficial to ask for help.</p> <p>The next case is I hardly ever attention to formal things.</p>"},{"location":"self/english/category/interview/en-interview/#8-what-responsibilities-did-you-have-in-pastcurrent-jobs","title":"8. What responsibilities did you have in past/current jobs?","text":"<p>I previously I was a full-stack web developer within some companies.</p> <p>In my role, I was responsible for developing a project. </p> <p>After that, I was big on DevOps engineering and cloud computing </p> <p>by the way we can find it as cloud-native.</p>"},{"location":"self/english/category/interview/en-interview/#9-what-motivates-you-what-are-you-passionate-about-what-are-your-hobbies","title":"9. What motivates you? What are you passionate about? What are your hobbies?","text":"<p>Cosmology books Creating relationships and participation on behalf of others Travel and sports Change strategy and upgrade information</p>"},{"location":"self/english/category/interview/en-interview/#10-what-are-your-pet-peeves","title":"10. What are your pet peeves?","text":"<p>Eagle and dog</p>"},{"location":"self/english/category/interview/en-interview/#11-do-you-prefer-to-work-independently-or-in-a-team","title":"11. Do you prefer to work independently or in a team?","text":"<p>Absolutely with team</p>"},{"location":"self/english/category/interview/en-interview/#12-how-would-others-describe-you","title":"12. How would others describe you?","text":"<p>Self-organized Multidimensional</p>"},{"location":"self/english/category/interview/en-interview/#13-if-you-were-a-food-what-food-would-you-be","title":"13. If you were a food, what food would you be?","text":"<p>Chicken grilled</p>"},{"location":"self/english/category/interview/en-interview/#14-explain-a-time-when-you-had-to-take-the-initiative","title":"14. Explain a time when you had to Take the initiative?","text":"<p>It is not precisely might be when I will be happy or maybe anything goes :)</p>"},{"location":"self/english/category/interview/en-interview/#15-what-is-your-biggest-achievement-what-are-you-most-proud-of","title":"15. What is your biggest achievement? What are you most proud of?","text":"<p>My greatest accomplishment is getting master's degree after 5 years  and I am getting acquainted with the Blockchain subject.</p>"},{"location":"self/english/category/interview/en-interview/#16-where-do-you-want-to-be-5-years-from-now","title":"16. Where do you want to be 5 years from now?","text":"<p>In five years, I want to be an expert at my position and start training to be a Blockchain developer at higher scale. I want to continue gaining experience and immigrate to a few countries for working. I want my expertise to directly impact the company in a positive way.</p> <p>I\u2019d like to be seen as someone with high expertise in the Blockchain sector.</p> <p>I believe opportunities come to great engineers and I am going to try to be one of them.</p>"},{"location":"self/english/category/interview/en-interview/#17-do-you-have-any-questions-for-me","title":"17. Do you have any questions for me?","text":"<p>What are the requirements and guarantees for immigration and employment?</p> <p>Um, I think we've covered many of the areas I had wanted to address.</p> <p>I have two quick questions though:</p> <p>What does success look like? </p> <p>Who would I mostly work with on a daily basis?</p>"},{"location":"self/english/category/interview/en-interview/#18-are-you-willing-to-relocate","title":"18. Are you willing to relocate?","text":"<p>I very much enjoy this area and would love to continue my career here, </p> <p>but this position is a great opportunity for my career</p> <p>And if relocating is a part of that, I would definitely consider it.</p>"},{"location":"self/english/category/interview/en-interview/#19-what-salary-are-you-seeking","title":"19. What salary are you seeking?","text":"<p>My salary would be flexible.  I look forward to discussing in more detail what my responsibilities at this company would be. </p> <p>After that, we can determine a fair salary for the role.</p> <p>1 years ago I set up my startup in the field of investment in cryptocurrency and \"Trading\"</p> <p>I have not worked on games but I hope to help the team for the Blockchain sector</p>"},{"location":"self/english/category/interview/en-interview/#20-do-you-manage-your-time","title":"20. Do you manage your time?","text":"<p>Organized</p> <p>I naturally organize things. Iike time, assignment,  and work.</p> <p>I like to organize my work by priority and deadlines.</p> <p>I consider myself-organized .</p> <p>Well, I think. I'm a very organized person. </p> <p>I have a huge filing system and I always know where everything is. </p> <p>Time Mangement</p> <p>I'm good at managing my time. </p> <p>I prioritize my tasks and this allows me to stay ahead of schedule.</p> <p>I schedule my day carefully and try to make an appointment so I can keep.</p> <p>Delay-Deliver</p> <p>I remember one time in the middle of the project...</p> <p>I estimated that it will take 3 additional days....</p> <p>I knew the additional work was too long to finish on time.</p> <p>I should have more firm telling them that we will need a few more days</p> <p>So I can achieve more than I set out to do</p> <p>The area I need to improve is probably browser bookmarks.I think they needs to be more Organized</p> <p>If I know I'm having guest or customer, then I would definitely make things more tidy.</p>"},{"location":"self/english/category/interview/en-interview/#21-whats-the-biggest-difficulty-you-have-ever-faced-at-work-last-year","title":"21. What's the biggest difficulty you have ever faced at work last year?","text":"<p>I had a problem with the ACO algorithm in my graduation project.  I've done many solution but it wasn't working properly.</p> <p>It was down to me to fix it. </p> <p>And I were losing a lot of time because of it.  So I worked round the clock. I finally found a way around it, </p> <p>but it was really hard work and the pressure was unbelievable.</p>"},{"location":"self/english/category/interview/en-interview/#22-have-you-ever-had-to-work-on-a-topic-you-knew-nothing-about","title":"22. Have you ever had to work on a topic? You knew nothing about?","text":"<p>Sometimes I'm given something that I don't know much about  so I do some investigation and ask around, </p> <p>you know to get up to speed.</p>"},{"location":"self/english/category/interview/en-interview/#23-are-you-comfortable-making-decisions-and-taking-the-lead","title":"23. Are you comfortable making decisions and taking the lead ?","text":"<p>Yes but not always! I think some decisions are better left to people more senior. </p> <p>For example, I don't like fighting anyone.</p>"},{"location":"self/english/category/interview/en-interview/#24-how-you-dealing-with-problems","title":"24. how you dealing with problems?","text":"<p>I'm good at dealing with problems.</p> <p>It's important to anticipate a problem and fix it before it becomes a real problem .</p> <p>It is important to view problems from different perspectives.</p> <p>Basically I want to find a potential problem and put measures in place to correct it before it happens.</p>"},{"location":"self/english/category/interview/en-interview/#25-are-you-remember-failed-to-complete-an-assignment-on-time","title":"25. Are you remember failed to complete an assignment on time?","text":"<p>Yah, External factors caused me to missed a deadline.</p>"},{"location":"self/english/category/interview/en-interview/#26-are-you-remember-a-good-decision-for-a-solution-of-problem","title":"26. Are you remember a good decision for a solution of problem?","text":"<p>Actually, I prefer to review process and research more for problem. </p> <p>This approach tremendously help me in almost of time.</p> <p>if you are missing an important details it's easy to make a bad decision.  </p> <p>I make important decisions by examining all the details and then weighing the pro's and con's for each decision.</p> <p>I make important decisions by having all of the information.</p> <p>Important decisions are made by knowledge through Information and wisdom through experience.</p> <p>I'll gather all the information I can find and then apply my experience while analyzing the information with this combination </p> <p>I'm confident I'll make the correct important decisions.</p> <p>I believe all decisions should be made by having all the information</p>"},{"location":"self/english/category/interview/en-interview/#27-are-you-remember-a-poor-decision-for-a-solution-of-problem","title":"27. Are you remember a poor decision for a solution of problem?","text":"<p>Yah it is due to making a bad assumption. But I always try to learn about it.</p>"},{"location":"self/english/category/interview/en-interview/#28-what-is-meaning-of-success-and-failure-to-you","title":"28. What is meaning of Success and failure to you?","text":"<p>Success</p> <p>To achieve a goal I have set for myself.</p> <p>Success to me is knowing that my contributions positively Impacted on my company and complete assignments on time in a excellent manner.</p> <p>Failure &amp; Mistake</p> <p>To fail at something is making a mistake and not learning anything form it. </p> <p>learning from mistake is a valuable lesson.</p> <p>Learning from a mistake is the key point.</p> <p>Maybe one section misinterpreted by me  so in this situation I always ask more clarification.</p> <p>I think failure is not reaching your potential.</p>"},{"location":"self/english/category/interview/en-interview/#29-are-you-a-risk-taker","title":"29. Are you a risk taker?","text":"<p>I consider myself to be in the middle .</p> <p>Before taking a risk, I always evaluate all of other options, the pro's and con's success and failure.</p>"},{"location":"self/english/category/interview/en-interview/#30-do-you-have-any-aiming","title":"30. Do you have any Aiming?","text":"<p>Aiming keeps me focused and forces me to growth by trying to reach high goals I have set for myself.</p> <p>So I don't miss wonderful opportunity because I aim is too high.</p> <p>Executing a plan has always come easy for me as well.</p> <p>I decided to put more emphasis on priority and planning.</p> <p>My short term goal is to find a position where I can use the knowledge and strengths that I have.</p> <p>My long term goal is to become skilled in all aspects of developing to get more experience.</p> <p>Contributing to a company where I'll become a valuable asset.</p> <p>I am willing to work hard</p>"},{"location":"self/english/category/interview/en-interview/#31-change-one-thing-about-your-personality","title":"31. Change one thing about your personality?","text":"<p>I wish I was more patient with people and I would  like to be more understanding.  Because when happened misunderstanding that will makes bad consequences  although I believe to forgive people as long as possible.</p> <p>I am good at dealing with changes because I'm flexible with my work. I analyze the situation and I always try to find ways I can contribute to the change in positive way.</p> <p>I handle some changes as smoothly.</p>"},{"location":"self/english/category/interview/en-interview/#32-do-you-work-under-pressure","title":"32. Do you work under pressure?","text":"<p>Yes because I don't panic.</p> <p>I maintain self-control as work as efficiently as possible. </p> <p>If the situation involved pressure due to lack of time,  then the only difference in my work would be the extra time</p> <p>I would need to put in to meet the deadline on time.  I use the feelings of pressure as a tool to motivate me to work harder and more efficiency.</p>"},{"location":"self/english/category/interview/en-interview/#33-why-did-you-leave-your-company","title":"33. Why did you leave your company?","text":"<p>I was looking for a little more stability and also to be part of a better organisation.</p>"},{"location":"self/english/category/interview/en-interview/#34-what-do-you-think-will-be-the-main-challenges-of-coming-to-a-much-larger-company","title":"34. What do you think will be the main challenges of coming to a much larger company?","text":"<p>I can see that it might be perceived as a weakness to not have experience in an organisation of this size Though I see that it could also be a benefit Because I won't be bringing too many preconceived and possibly inflexible ideas with me to the company.</p>"},{"location":"self/english/category/interview/en-interview/#35-can-you-remember-a-time-when-you-helped-resolve-the-conflicts-among-your-colleagues-or-classmates-a-couple-of-months-ago","title":"35. Can you remember a time when you helped resolve the conflicts among your colleagues or classmates a couple of months ago?","text":"<p>There was a problem in my department a new system meant that you had to sign in and out all the time.</p> <p>Many people didn't like this because there was only one place you could sign in which was a long way from where most people work</p> <p>I suggested we put signing in stations at several locations and that seemed to solve the problem.</p>"},{"location":"self/english/category/interview/en-interview/#36-tell-me-more-about-the-projects-you-mentioned-on-your-cv","title":"36. Tell me more about the projects you mentioned on your CV?","text":"<p>Let me see I guess the purpose is to look at ways of increasing the company's income without adding additional cost.</p>"},{"location":"self/english/category/interview/en-interview/#37-can-you-tell-me-about-your-responsibilities-and-you-will-jump-at-the-moment","title":"37. Can you tell me about your responsibilities and you will jump at the moment?","text":"<p>Sure. I'm a developer. </p> <p>Actually I have good strategies to improve my performance.  That seems to be very effective.</p> <p>I have good knowledge to expand and growth areas where skills need to be more used or improved. </p> <p>It is included Grepper extension, Mind-Mapping materials.</p>"},{"location":"self/english/category/interview/en-interview/#end-sentence","title":"End-Sentence","text":"<p>I think you've answered a slightly different question.</p> <p>Thank you for your time. I'd welcome the opportunity to continue discussing this role with you.</p>"},{"location":"self/english/category/subtitle-words/subtitle-words/","title":"Subtitle words","text":"<p>Relaychain-Podcasts</p>"},{"location":"self/english/category/valuable-sentences/dr-gavin-wood/","title":"Dr gavin wood","text":"<p>Less trust more truth.</p> <p>Creating  borders when the borders don't need to be there.</p> <p>You heard the phrase: pen is mightier than sword and keywords will be mightier than pen coming soon.</p> <p>How many cigarette sales are in the in-world? (when there is a lot of quantity of web 2 if it is the reason of health and security for users?)</p> <p>The vision is the vision </p> <p>I think principles are important.</p>"},{"location":"self/english/category/valuable-sentences/valuable-sentences/","title":"Valuable sentences","text":"<p>Dr-Gavin-Wood</p>"},{"location":"self/issues/issues/","title":"Issues","text":"<p>Rust</p> <p>Substrate</p>"},{"location":"self/issues/nodejs/Issues-Nodejs/","title":"Issues Nodejs","text":"<p>Failure: NodeJs AssertionError [ERR_ASSERTION]</p>"},{"location":"self/issues/rust/issue-rust/","title":"Issue rust","text":"<p>issue-rust-libc-rust</p> <p>issue-rust-clippy-dereferenced</p>"},{"location":"self/issues/rust/build/libc-rust/","title":"Libc rust","text":"<p>could not compile 'libc' due to previous error</p> <p><code>sudo apt install -y cmake pkg-config libssl-dev git gcc build-essential clang libclang-dev</code></p> <p>[[issue-rust]]</p>","tags":["libc","compile"]},{"location":"self/issues/rust/clippy/derefrence/","title":"Derefrence","text":"<p>*Clippy failed to automatically apply fix: type bool cannot be dereferenced</p> <p>Try to use .as_mut() it would be fix it</p> <p>Github</p> <pre><code>fn main() {\n    let input = [\"once  upon a time\", \"there  was an example\"];\n    let mut input_iter = input.iter();\n    let mut words = vec![];\n    for _ in 0..input.len() {\n        words.push(\n            input_iter\n                .next()\n                .as_mut()\n                .unwrap()\n                .split(' ')\n                .filter(|x| *x != \"\")\n                .collect::&lt;Vec&lt;_&gt;&gt;(),\n        );\n    }\n    println!(\"{:?}\", words);\n}\n</code></pre> <p>[[issue-rust]]</p>","tags":["clippy","dereference"]},{"location":"self/issues/substrate/issue-substrate/","title":"Issue substrate","text":"<p>issue-substrate-ocw-runtime</p> <p>unsafe-external</p> <p>memory_teardown in module sandbox</p>"},{"location":"self/issues/substrate/build/pallet-runtime/","title":"Pallet runtime","text":"<p>cannot find function <code>memory_teardown</code> in module <code>sandbox</code></p> Info <p>If you forget to update the features section, you might see errors similar to the following when you build the native binaries.  Make sure added your pallet to toml and runtime rust file and implemet pallets to runtime rust file or construct_decl if there is subtype</p> <p><code>cargo check -p node-template-runtime</code></p> <p>[[issue-substrate]]</p>","tags":["E0425","pallet","cargo","toml","runtime","build"]},{"location":"self/issues/substrate/recipes/runtime/ocw-runtime/","title":"Ocw runtime","text":"<p>failed to run custom build command for `ocw-runtime v3.0.0</p> Info <p>First of all search nightly in explorer project and then find version used in that.</p> <p><code>rustup uninstall nightly</code> <code>rustup install nightly-2020-10-06</code> <code>rustup target add wasm32-unknown-unknown --toolchain nightly-2020-10-06</code> <code>export WASM_BUILD_TOOLCHAIN=nightly-2020-10-06</code></p> <p>[[issue-substrate]]</p>","tags":["ocw","runtime","build"]},{"location":"self/issues/substrate/template/unsafe-external/","title":"Unsafe external","text":"<p>Error: Input(\" --ws-external options shouldn't be used if the node is running as a validator. Use <code>--unsafe-rpc-external</code> or <code>--rpc-methods=unsafe</code> if you understand the risks. See the options description for more information.\")</p> Info <p>Remove this line --telemetry-url 'wss://telemetry.polkadot.io/submit/ 0'  Add: --unsafe-rpc-external \\ --rpc-methods=unsafe    --ws-external \\</p> <p>[[issue-substrate]]</p>","tags":["ws","rpc","build","external","unsafe"]},{"location":"self/magazine/private-magazine-manga_job_searching_advice/","title":"Private magazine manga job searching advice","text":""},{"location":"self/magazine/private-magazine-milo-manara-gullivera-2016/","title":"Private magazine milo manara gullivera 2016","text":""},{"location":"self/magazine/private-magazine-persepolisvolume1/","title":"Private magazine persepolisvolume1","text":""},{"location":"self/magazine/private-magazine-persepolisvolume2/","title":"Private magazine persepolisvolume2","text":""},{"location":"self/magazine/private-magazine/","title":"Private magazine","text":"<p>Manga-job-searching-advice</p> <p>Milo-manara-gullivera-2016</p> <p>Persepolis-volume1</p> <p>Persepolis-volume2</p>"},{"location":"self/mindmap/mindmap/","title":"Mindmap","text":"<p>Substrate</p>"},{"location":"self/mindmap/substrate-mindmap/","title":"Substrate mindmap","text":""},{"location":"self/polkadot/Relaychain-Podcasts/","title":"Relaychain Podcasts","text":"","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#relay-chain-podcast-1drgavin-wood","title":"Relay Chain PodCast 1(Dr.gavin wood)","text":"","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#substrate","title":"Substrate","text":"<p>Substrate have a strong engineering core</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#policysecurity","title":"Policy&amp;Security","text":"<p>Dr{</p> <p>Nation state vs Decentralized(dao,dac,protocol).  </p> <p>The virtue of technology is essential when we have trusted platforms. </p> <p>Facebook does not guarantee the privacy of users. </p> <p>It's difficult to trust governments and companies.</p> <p>It is almost impossible to agree on any kind of global firewall .Potential Malicious actor or attack.</p> <p>}</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#smartcontract","title":"SmartContract","text":"<p>Dr{</p> <p>Unexpected State transition because of some bug, in a contract.</p> <p>Eth 2: The kind of smart contract model, although it does allow for that but to be used, but also for more fixed function pipeline, fixed function, transaction processing to be done. That can give much greater performance gains.</p> <p>}</p> <p>[[Governance]]</p> <p>Dr{</p> <p>That's the point of governance. It's basically to work out this really soft notion of how many people expected it to do, X versus how many people expected it due to Y and the strength of those expectations.</p> <p>Lock-voting system So they are refreshed in a sort of round-robin files fashion so that none of them. }</p> <p>[[Security]]</p> <p>Dr{</p> <p>Principle versus Pragmatism is needed for the detection of balance lies.</p> <p>}</p> <p>[[Skill]]</p> <p>Dr{</p> <p>What do you think are the most important skills to have? And, what areas are lacking in the industry? </p> <p>Deep thought is a really important skill. I'm not sure if it's a skill or talent. The ability to consume and internalize a problem and understand it. </p> <p>}</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#economic","title":"Economic","text":"<p>Dr{</p> <p>The rules that you can introduce would allow the emergent effects to become what it is that you want. That's an incredibly difficult thing to learn, but it's something that is very important in the world of sort of, you know, this trust-free digital crypto-economic world.  }</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#problem","title":"Problem","text":"<p>Dr{</p> <p>I think understanding better, which problems are better solved in a decentralized fashion and which problems are perfectly fine</p> <p>}</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#transaction","title":"Transaction","text":"<p>Dr{</p> <p>High Transaction Outputs = Parallel Computing Blocks </p> <p>}</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#summery-polkadotecosystem","title":"Summery-PolkadotEcosystem","text":"<p>Dr{</p> <p>Domain-Specific Chain(it is not scratch)</p> <p>Chain candidate is launching a Genesis block. It is Launch of a new chain but the chain that has been launched is a proof of authority chain. It's a staging area for us to move further and what it does is it allows us to start the chain without having to have a sort of A set of validators already assembled and without us having to trust in our potentially unfilled governance structure.</p> <p>Although there's a Genesis block for it. It's not necessarily the Genesis block for the final polkadot chain.</p> <p>Initial chain restricted runtime will have its limitations be lifted through a series of governance decisions.</p> <p>During the first phase polka dot will operate as a purely proof of authority chain, to proof of authority. </p> <p>Simply means that we have a number of authorities on behalf of the web three Foundation, fix the validator nodes and these validator nodes that will never change. They will always be operated by the 3 foundation and they will be the ones producing you. </p> <p>==The first is the pseudo module(&amp; POA)= so this will allow the web 3 foundation to upgrade the chain as it desires the second pieces are pieces of functionality that can be used by the polka-dot community the first is allowing claims so that dot tokens or at least dot tokens sort of indicators can be claimed </p> <p>The second piece(NPOS) of functionality allows those who hold dot token allocations to signal their intention to state and become validators or nominators for that matter this in this phase the only validators will be the web three foundations validator nodes but others can signal their intent and when we have enough people signaling their intent then we move to </p> <p>Phase two the web 3 foundation will issue a sort of special command using its pseudo functionality using its pseudo permissions and we will switch from proof of authority to proof of stake and all of those stakes with their dot allocations that had signaled their intention to become validators they will be well at least some of them will be selected to become validators and we will see the chain move from being operated merely by the web 3 foundation to being operated by an international selection of validators so while the chain is running under proof of authority it's really just trust in the web 3 foundation we have to expect this chain candidate to continue once it moves to proof of stake or nominated proof of stake our our variant of it then it will be quite different and we'll be trusting in the economics of our crypto economic logic now once the chain has been running well with a large validator set then the pseudo key will be used a second time and we will be able to move to phase</p> <p>Three phase three is where the pseudo key has enabled various pieces of governance to to function the governance a parachain of polkadot is fairly sophisticated now it's evolved alongside kusama I'm broadly speaking there are sort of four modules One is the </p> <p>3.1 Referendums module allowing a coin weighted voting system that means that token holders are able to basically alter the fate of the polkadot network and the second is the </p> <p>3.2 Council module allowing token holders to elect a number of members to the polkadot council both council doesn't actually have very much hard power but it is able to steer the legislative agenda and potentially remove dangerous upgrades that might be voted on by the the token holders the</p> <p>3.3 Third element is the Technical Committe this is a non voted body and it's selected simply by those teams that have properly implemented polka-dot it doesn't have any real substantial power but it is able to fast-track certain upgrades certain changes to the chain that they that it believes are important usually these will be bug fixes then the</p> <p>3.4 Fourth piece of the governance a parachain is the Treasury the Treasury allows the the council as well as various as well as the assembled token holders to to place funds that have been there have been a masked through the staking system through the block reward system and put them to use on things typically external to polka-dot whatever they may be again these are all elements of the kusama governance system and if you would like sort of to learn more about them you only need to look as far as kusama now what is the council and the various governance other governance modules are in place the public the dot token holders have the avenues to affect changes in the system basically the fate of polkadot is now in the hands of the token holders a </p> <p>Final runtime upgrade initiated by the web 3 foundation will remove the pseudo module and in doing so remove its omnipotent position as being able to cancel the chain as being able to create a new chain candidate at that point polka dot is a live decentralized and permissionless network the final stages of polka-dots rollout will be delivering the these extra pieces of functionality one of those extra pieces of functionality will be the balance transfers this will allow dot tokens to be transferable and not just an indicator and this will likely happen very soon after the pseudo module is released but of course we don't know what point because it will be in the hands of the dot token holders two more post pseudo upgrades will necessarily include the rollout of the first pair of chains and eventually para chain and para thread purchasing or leasing modules and </p> <p>Finally the XCMP cross power chain message passing system these will be rolled out as they become available as they are their code is finalized and as the audits are completed and will be done in concert between the various technical implementation teams the research teams and the dot holding community and that's.</p> <p>basically it launch a polka dot in five or six phases</p> <p>Kusuma have 1000 tips without any ZK snarks or lighting networks.</p> <p>we have seamless upgrades that are controlled by the underlying logic of the consensus</p> <p>Web 3 allows people come together and coordinate more</p> <p>Dot is a amorphous protocol.</p> <p>}</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#nops","title":"NOPS","text":"<p>Georgio{</p> <p>We have these algorithms that work together, they're called babe and grandpa babies. </p> <p>...producing blocks and proposing. What the next stage change should be? And grandpa is for finalizing it...</p> <p>That's in this very polka dot specific in that validators are responsible for passing messages between parachains</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#nops-consensus","title":"NOPS-Consensus","text":"<p>we're not really voting on blocks. But we're voting on chains.( WIKI-GRANDPA{</p> <p>A pure Nakamoto consensus blockchain that runs PoW is only able to achieve the notion of probabilistic finality and reach eventual consensus. Probabilistic finality means that under some assumptions about the network and participants, if we see a few blocks building on a given block, we can estimate the probability that it is final. Eventual consensus means that at some point in the future, all nodes will agree on the truthfulness of one set of data. This eventual consensus may take a long time and will not be able to be determined how long it will take ahead of time. </p> <p>However, finality gadgets such as GRANDPA (GHOST-based Recursive ANcestor Deriving Prefix Agreement) or Ethereum's Casper FFG (the Friendly Finality Gadget) are designed to give stronger and quicker guarantees on the finality of blocks - specifically, that they can never be reverted after some process of Byzantine agreements has taken place. The notion of irreversible consensus is known as provable finality.</p> <p>GRANDPA stands apart from other Byzantine fault-tolerant (BFT).The protocol applies votes transitively and the GRANDPA algorithm finds the highest block number with a sufficient number of votes to be considered final. This process allows several blocks to be finalized in one round. }</p> <p>WIKI-BABE{</p> <p>BABE (Blind Assignment for Blockchain Extension) is the block production mechanism that runs between the validator nodes and determines the authors of new blocks. BABE is comparable as an algorithm to Ouroboros Praos, with some key differences in chain selection rule and slot time adjustments. BABE assigns block production slots to validators according to stake and using the Polkadot randomness cycle.</p> <p>Validators in Polkadot will participate in a lottery in every slot that will tell them whether or not they are the block producer candidate for that slot. Slots are discrete units of time, nominally 6 seconds in length. Because of this randomness mechanism, multiple validators could be candidates for the same slot. Other times, a slot could be empty, resulting in inconsistent block time. } )</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#nops-accounts","title":"NOPS-Accounts","text":"<p>Polka dots has two general types of accounts. Stash &amp; controller.</p> <p>The stash account is something that should generally be capped offline.</p> <p>This would be like, where you keep your life savings or large amounts of money that you don't intend to move. But if you're participating in governance or nominating, you want to be able to nominate with the stake. But you don't want to sign a lot of messages with this key because that kind of inherently makes it vulnerable to being captured by somebody else. </p> <p>So you really only have to sign one message with your stash account and that is a certificate. And so you take the public key of another account which we call the controller and you just sign a message from your stash account that says, you know what, here's a public key of another address. I want this to be my controller, and, and this controller account, you can put a very small amount of funds, like, just enough to cover transfer fees. </p> <p>I want to nominate this validator. I want to validate myself, or I want to vote on this governance proposal. </p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#nops-session-keys","title":"NOPS-Session Keys","text":"<p>Now we go let's go into a little bit of about the session keys because that's something really interesting. </p> <p>we have four and so these Keys you can just declare and say I want them. Associated with some sort of message that validators perform, and it should be noted that these keys are not meant to be accounts. So they don't have to be the same cryptography that an account uses, and I can be completely different. Although at the moment, they're not, these are just for signing messages. So these are not associated with funds at all. So in polkadot we have four, </p> <pre><code>GRANDPA: ed25519\nBABE: sr25519\nI'm Online: sr25519\nParachain: sr25519\n</code></pre> <p>We have one for babe for the block. Reduction, </p> <p>We have one for Grandpa, which is finalization, </p> <p>We have one for, I'm online, which is sort of like a helper message. It just you tell the chain every couple hours like, hey, I'm here as I'm supposed to be and then </p> <p>We have one called para chain ID, So this helps the power chains and validators find each other</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#nops-signing-signatures","title":"NOPS-Signing Signatures","text":"<p>Boneh-Lynn-Shacham (BLS) signatures have slow signing, very slow verification, require slow and much less secure pairing friendly curves, and tend towards dangerous malleability. Yet, BLS permits a diverse array of signature aggregation options far beyond any other known signature scheme, which makes BLS a preferred scheme for voting in consensus algorithms and for threshold signatures.</p> <p>(It seems polkadot do not use BLS)</p> <p>I do not have to really manage or maintain any of these Keys, it will be done for me by the node and all I have to do it. It's basically calling our RPC which will generate those keys for me and then return. </p> <p>Run the public half of all, four of them and then, I mean, just to put it in an even simpler words, I have to just pass those poor for public Keys as parameters to extrinsic call. And then it will associate those with my controller because message will be signed with my controller key and from there on, and I'm all set.</p> <p>We have four session keys and there aren't any hsms( WIKI-HSMS{ Signing Outside the Client</p> <p>In the future, Polkadot will support signing payloads outside the client so that keys can be stored on another device, e.g. a hardware security module (HSM) or secure enclave. For the time being, however, Session key signatures are performed within the client.</p> <p>HSMS ARE NOT A PANACEA</p> <p>They do not incorporate any logic and will just sign and return whatever payload they receive. Therefore, an attacker who gains access to your validator node could still commit slashable behavior. } )</p> <p>We let people nominate more than one validator and we have an algorithm called fragment that will automatically distribute the nomination stake and Way that optimizes the valid or sets. So, Really to optimizations that are taking place, what's the best combination of validators and nominative? </p> <p>That results in the most amount of dots at stake. Okay. And then, second optimization is, what is that allocation of those nominators that results in the most even distribution of that</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#nops-reward","title":"NOPS-Reward","text":"<p>They're proportional to how much total is at stake and then within that all of the validators, get equal rewards regardless of who has the most steak. And so we want to have about == 50% of the network at stake behind the validators==. That's our goal, so that the other 50% of the network, is for a parachain auctions. So we expect a change to have dots bonded for their parachains and slots and then a small amount of liquid tokens to be traded transferred, whatever. </p> <p>Are they the inflation ramps up as the amount of steak ramps up?  And that's why there's always more rewards as more goes at stake and then once you pass 50%, they drop off quite dramatically. So there's not much incentive to be a validator.</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/polkadot/Relaychain-Podcasts/#nops-punishment","title":"NOPS-Punishment","text":"<p>You set up two nodes with the same keys and they accidentally signed different things. You really shouldn't do that so you get punished heavily.</p> <p>if you import and vote on a block that conflicts with this chain, you're clearly not running the standard software and so it's not just like a screw up, its your actually trying to attack the network.</p> <p>}</p>","tags":["podcast","dr.gavinwood"]},{"location":"self/postgresql/postgresql/","title":"PostgreSQL","text":"<ul> <li> <p>Configuration</p> </li> <li> <p>CLI</p> </li> <li> <p>Error_login_password</p> </li> <li> <p>Backup</p> </li> <li> <p>Replication</p> </li> <li> <p>Performance-Tuning</p> </li> <li> <p>Transactions</p> </li> <li> <p>Trigger</p> </li> <li> <p>Stored Procedures</p> </li> <li> <p>View</p> <ul> <li>Create_drop</li> <li>Materialized</li> <li>Recursive</li> <li>Replace</li> <li>Temp</li> </ul> </li> </ul>"},{"location":"self/postgresql/postgresql_config/","title":"Commands","text":"<pre><code>dpkg -l | grep postgres\n</code></pre> <pre><code>cd ~\nnano .profile\nPATH=$PATH:/usr/lib/postgresql/16/bin\nexport PATH\n. ~/.profile\n</code></pre> <pre><code>sudo -i -u postgres \nSHOW config_file;\nSHOW shared_buffers;\nSHOW work_mem;\nSHOW max_connections;\nSHOW log_destination;\nSHOW hba_file; # authentication\nSHOW ALL;\n</code></pre> <pre><code>--\\x on \nSELECT *\nFROM pg_settings WHERE name = 'shared_buffers';\n</code></pre> <pre><code>ALTER SYSTEM SET max_connections = 120;\n</code></pre> <pre><code>SELECT version();\n</code></pre> <pre><code>psql -h localhost -U postgres -d mydatabase\n</code></pre> <pre><code>ps ax | grep postgres:\n\nnetstat -nlp | grep 5432\n</code></pre> <p>To start the PostgreSQL server, use the following command:</p> <p><code>data_directory \"/var/lib/postgresql/16/main\"</code></p> <pre><code>pg_ctl start -D &lt;/path/to/data/directory&gt;\n</code></pre> <p>Performing a vacuum on a database. Vacuuming removes these marked, deleted rows from our database, freeing up memory space and improving the overall performance. (VACUUM command won\u2019t show any output) :</p> <pre><code>VACUUM Product;\nVACUUM FULL;\n</code></pre> <p>The REINDEX command:</p> <pre><code>REINDEX TABLE &lt;table_name&gt;;\n</code></pre>"},{"location":"self/postgresql/postgresql_config/#executable-files","title":"Executable files","text":"<ul> <li> <code>The clusterdb executable:</code> Available in the bin directory, this is used to configure, start, stop, and monitor the database.</li> <li> <code>The initdb executable:</code> This is used to initialize new databases. We can use this tool to create a brand new PostgreSQL database or restore an existing one.</li> <li> <code>The pg_dump command:</code> This allows us to export data from our PostgreSQL database into a text file for backup purposes or to transfer to other systems.</li> <li> <code>The pg_dumpall executable:</code> This allows us to back up a PostgreSQL cluster and its databases.</li> <li> <code>The pg_restore and pg_basebackup executables:</code> These are used for backing up and restoring our PostgreSQL database and moving it to another server.</li> </ul> <p>The createdb and dropdb commands: These are used to create and delete databases, respectively.</p> <ul> <li> <code>The psql executable:</code> This is used for executing SQL statements in a terminal or inside the psql client application, allowing us to interactively query data stored in our PostgreSQL database.</li> <li> <code>The reindexdb executable:</code> This is used for rebuilding indices,</li> <li> <code>The pg_upgrade executable:</code> This allows us to migrate an existing database installation to a newer version of PostgreSQL.</li> <li> <code>The pg_config executable:</code> This provides information about our current PostgreSQL.</li> </ul>"},{"location":"self/postgresql/postgresql_config/#host-based-authentication-formatpg_hba","title":"Host-based authentication format(pg_hba)","text":"<p>In PostgreSQL, host-based authentication is a mechanism that allows us to control access to our database based on the IP address of the connecting client host. The host-based authentication format in PostgreSQL is based on a set of rules that specify which hosts are allowed to connect to the database, and which users are allowed to connect from those hosts. These rules are defined in the pg_hba.conf file, which is typically located in the PostgreSQL data directory. The pg_hba.conf file contains a series of lines that define the authentication rules for each host. It has the following fields:</p>"},{"location":"self/postgresql/postgresql_config/#type","title":"TYPE","text":"<p>This refers to the host type of connection. The details about what they mean are given below:</p> <ul> <li> local: This refers to the connection from the local machine usually using a Unix socket.</li> <li> host: This refers to the connection from a remote machine over TCP/IP.</li> <li> hostssl: This refers to the connection from a remote machine using SSL protocol. In this case, we must provide a valid SSL certificate for SSL encryption. This adds an additional layer of encryption to the connection for security.</li> <li> hostnossl: This refers to the connection from a remote machine without SSL encryption.</li> <li> hostgssenc: This refers to the connection from a remote machine over GSSAPI encryption, such as MIT Kerberos.</li> <li> hostnogssenc: This refers to a connection from a remote machine without GSSAPI encryption. </li> </ul>"},{"location":"self/postgresql/postgresql_config/#database","title":"DATABASE","text":"<p>This specifies which database the connection can be used for. Here, \u201call\u201d specifies that the connection is allowed for all databases, while \u201creplication\u201d specifies that the connection is allowed for replication connections.</p> <ul> <li> <code>USER:</code> This specifies which PostgreSQL username can access this particular connection. For example, \u201cpostgres\u201d will allow connections from users with the postgres username.</li> <li> <code>ADDRESS:</code> This column defines a list of IP addresses or hostnames that are allowed to connect to the database server.</li> <li> <code>OPTIONS:</code> This column allows for additional settings to be defined for this connection. For example, we can specify that connections from a particular IP address should not have access to any databases except for the ones specifically whitelisted in the dbname field. We can also define password policies to require strong passwords and limit logins to certain times of day or days of the week. Overall, this column provides a lot of flexibility for customizing our database access settings.</li> <li> <p> <code>METHOD:</code> This refers to the authentication method that will be used for this connection. The list of valid values is as follows:</p> </li> <li> <p> trust: This specifies that connections from users with matching IP addresses or hostnames will not require additional authentication.</p> </li> <li> reject: This specifies that connections from users with matching IP addresses or hostnames will be rejected.</li> <li> password: This specifies that a password will be required each time the user connects. It sends the passwords in plaintext, which isn\u2019t secure and should be avoided if possible.</li> <li> md5: This uses an MD5 hashing algorithm to encrypt and secure the passwords, which is better than the plaintext password authentication method.</li> <li> scram-sha-256: This uses a SCRAM-SHA-256 hashing algorithm to encrypt and secure the passwords.</li> <li> cert: This allows us to specify a valid SSL certificate so that all connections are encrypted.</li> <li> ident: This uses the ident authentication method, which is generally not recommended as it transmits user passwords in plaintext.</li> <li> ldap: This enables LDAP authentication.</li> <li> peer: This allows us to specify a hostname or IP address that can connect without authentication. This is an insecure setting, which should be avoided as far as possible.</li> <li> radius: This enables RADIUS authentication.</li> <li> sspi: This specifies connections from users using the SSPI authentication method.</li> <li> gss: This uses GSSAPI encryption to encrypt and secure the connections.</li> </ul>"},{"location":"self/postgresql/sql_commands/","title":"Sql commands","text":"<pre><code>\\l -- list\n</code></pre> <pre><code>\\c -- Connect DB\n</code></pre> <pre><code>\\dt -- list tables\n</code></pre> <pre><code>\\d+ [TableName] --details of the table defination\n</code></pre> <pre><code>\\du view all the existing users.\n</code></pre> <pre><code>\\d command is used to print the list of stored procedures \n</code></pre> <pre><code>\\sf &lt;procedure_name&gt; command displays the source code of a procedure named &lt;procedure_name&gt;.\n</code></pre> <pre><code>\\! pg_dump -U postgres -t &lt;DB_Name&gt; -- Run in psql\n</code></pre>"},{"location":"self/postgresql/Backup/backup/","title":"Importance of backup and recovery","text":"<ul> <li> Data protection: Backups serve as a safety net against data loss. Accidental deletion, hardware failures, software bugs, and natural disasters can all lead to data corruption or loss. Regular backups help protect our valuable data by providing a means to restore it to a previous state.</li> <li> Business continuity: Databases play a crucial role in the operation of many businesses. In case of database failures, having reliable backups enables us to recover the system and minimize downtime quickly. This ensures business continuity and reduces the impact on productivity, customer satisfaction, and revenue.</li> <li> Disaster recovery: Natural disasters, system failures, or cybersecurity incidents can cause significant disruptions to our database infrastructure. Having well-planned backup and recovery strategies allows us to recover our databases and resume operations efficiently in such situations.</li> <li> Compliance and regulations: Many industries have specific compliance and legal requirements regarding data retention and protection. By implementing regular backups, we can meet these obligations and ensure the integrity and availability of the data.</li> <li> Development and testing: Backups provide a way to create copies of the production database for testing new software versions, performing data analysis, or simulating scenarios without affecting the live environment.</li> <li> Database upgrades and migrations: Backups play a crucial role when moving to a new version of a database system or changing to a different platform. They enable us to revert to a previous state in case of any issues during the upgrade or migration process.</li> <li> Data integrity: Backups help maintain data integrity by providing restore points that allow us to revert to a known good state in case of data corruption or erroneous changes.</li> </ul>"},{"location":"self/postgresql/Backup/backup/#types-based-on-data-capture","title":"Types based on data capture","text":"<ul> <li> Full backup: A full backup is a complete copy of the database, including all the data and metadata. Full backups are typically the largest and take a long time to complete. However, they\u2019re the most comprehensive form of backup and provide the most straightforward method for restoring data.</li> <li> Incremental backup: An incremental backup includes only the changes made to the database since the last backup. Incremental backups are smaller and take less time to complete than full backups. However, restoring an incremental backup requires the restoration of the full backup and all subsequent incremental backups.</li> <li> Differential backup: A differential backup includes only the changes made to the database since the last full backup. Differential backups are smaller than full backups but larger than incremental backups. Restoring a differential backup requires the restoration of the full backup and the differential backup.</li> <li> Log backup: A log backup captures the transaction logs of the database, which contain information about the changes made to the database since the last log backup. Log backups, typically performed frequently, such as every few minutes or hours, are used for disaster recovery and supporting point-in-time recovery.</li> <li> Snapshot backup: A snapshot backup is a copy of the database at a specific time, created by capturing the state of the database and the storage system. Snapshot backups are typically performed quickly and with minimal impact on the performance of the database and are used for disaster recovery and for supporting point-in-time recovery.</li> </ul>"},{"location":"self/postgresql/Backup/backup/#types-based-on-frequency","title":"Types based on frequency","text":"<p>Regular backup: We perform regular backups on a regular schedule, such as daily or weekly. Ad hoc backup: We conduct an ad hoc backup on a need basis.</p>"},{"location":"self/postgresql/Backup/backup/#create-a-physical-backup","title":"Create a physical backup","text":"<p>sudo cp -R /path/to/postgresql/data /path/to/backup</p>"},{"location":"self/postgresql/Backup/backup/#creating-backupsres-with-pg_dump","title":"Creating backups/Res with pg_dump","text":"<p>The pg_dump utility is a command-line utility that creates a logical backup of a PostgreSQL database. </p> <pre><code>sudo -i -u postgres\n</code></pre> <pre><code>pg_dump database_name &gt; backup_file.sql -- Run out of psql\n\n--pg_dump &lt;database_name&gt; &lt; &lt;backup_file.sql&gt; --Restore by pg_dump you can use also pg_restore\n\npg_dump -U postgres -F t -f backupfile.tar database_name -- Run out of psql \n\npg_restore -U postgres -F t -C -d newdatabase backupfile.backup\n\n\\! pg_dump -U postgres -t Employee -- Run in psql\n</code></pre>"},{"location":"self/postgresql/Backup/backup/#creating-backups-with-pg_dumpall","title":"Creating backups with pg_dumpall","text":"<p>creates a backup of all PostgreSQL databases.</p> <pre><code>pg_dumpall &gt; backup_file.sql\n</code></pre> <pre><code>-- Execute the pg_dump command\n\\! pg_dumpall -U postgres\n</code></pre>"},{"location":"self/postgresql/Backup/backup/#sample","title":"Sample","text":"<pre><code>\\! pg_dump -U postgres -Fc mydb &gt; db.dump\n</code></pre> <p>Create database newdb;</p> <pre><code>\\! pg_restore -U postgres -l db.dump &gt; db.list\n\\! pg_restore -U postgres -L db.list db.dump\n</code></pre> <ul> <li> <p>Line 1: This creates a backup of a database, redirecting the output of the pg_dump command to a file named db.dump. This file contains the backup of the mydb database. The -U postgres statement specifies the username as postgres, the default user in PostgreSQL. The -Fc statement specifies the format of the backup file as a custom format. This format is more flexible and allows for selective restores. The name of the database that we want to back up is mydb and &gt; db.dump redirects the output of the pg_dump command to a file named db.dump, which will contain the backup of the mydb database.</p> </li> <li> <p>Line 3: This creates a new PostgreSQL database named newdb.</p> </li> <li> <p>Line 5: The -U postgres statement specifies the username as postgres while -l db.dump lists the contents of the backup file db.dump without actually performing the restore operation. It also redirects the output of the pg_restore command to a file named db.list. This file contains the list of objects (tables, indexes, etc.) included in the backup.</p> </li> <li> <p>Line 6: The -L db.list statement instructs pg_restore to use the db.list file as a reference to determine which objects to restore. The backup file is db.dump, from which the restore operation will be performed.</p> </li> </ul>"},{"location":"self/postgresql/Backup/backup/#resetting-the-wal-log","title":"Resetting the WAL log","text":"<p>In some cases, we might need to reset the WAL log, for example:</p> <p>When we want to perform a point-in-time recovery of the database to a specific time in the past</p> <p>When we want to remove WAL files that are no longer needed\u2014to free up disk space</p> <p>When we want to reduce the size of the WAL archive and control the amount of disk space used by WAL logs.</p> <p><code>pg_resetwal</code> to reflect the purpose of logging better. This command is typically used as part of a PITR process, where we restore a database to a specific point in time.</p> <pre><code>cd ~\n# Then we initialize a new PostgreSQL database cluster, as shown below\n# The -D option specifies the location of the data directory for the cluster.\ninitdb -D data\npg_ctl -D data -l logfile start\npg_ctl stop -D data\npg_resetwal -D data\n# This command starts the server again after the WAL has been reset.\npg_ctl -D data -l logfile start\n</code></pre>"},{"location":"self/postgresql/Backup/backup/#point-in-time-recovery-pitr","title":"Point-in-time recovery (PITR)","text":"<p>Is a method of data recovery that allows us to restore a database to a specific point in time. In PostgreSQL, PITR is accomplished using WAL files and archive logs.To perform PITR in PostgreSQL, we\u2019ll need to configure our database to use WAL and archive logs and then use the pg_resetxlog and pg_restore commands to restore our database to a specific point in time.</p>"},{"location":"self/postgresql/Clause/distinct/","title":"Distinct","text":"<pre><code>SELECT\n  DISTINCT department\nFROM\n  Employee;\n</code></pre>"},{"location":"self/postgresql/Clause/groupby_distinct/","title":"Groupby distinct","text":"<pre><code>SELECT\n  department,\n  COUNT(DISTINCT salary)\nFROM\n  Employee\nGROUP BY\n  department;\n</code></pre>"},{"location":"self/postgresql/Clause/having/","title":"Having","text":"<pre><code>SELECT\n  department,\n  COUNT(*) as \"Number of Employees\"\nFROM\n  Employee\nGROUP BY\n  department\nHAVING\n  COUNT(*) &gt; 1;\n</code></pre>"},{"location":"self/postgresql/Clause/limit_offset/","title":"Limit offset","text":"<pre><code>SELECT\n  *\nFROM\n  Employee\nLIMIT 2 OFFSET 5;\n--The OFFSET is optional and defaults to 0 if not supplied. \n</code></pre>"},{"location":"self/postgresql/Clause/orderby/","title":"Orderby","text":"<pre><code>SELECT\n  *\nFROM\n  Employee\nORDER BY\n  salary DESC;\n</code></pre>"},{"location":"self/postgresql/DB/db_alter/","title":"Db alter","text":"<pre><code>SELECT '\\n' AS \" \"; -- Adding new line\nALTER DATABASE customer_db RENAME TO client_db; \n</code></pre>"},{"location":"self/postgresql/DB/db_create/","title":"Db create","text":"<pre><code>CREATE DATABASE customer_db \n  WITH OWNER = postgres \n  LC_COLLATE = 'C.UTF-8' \n  LC_CTYPE = 'C.UTF-8' \n  TABLESPACE = pg_default \n  CONNECTION LIMIT = -1;\n</code></pre>"},{"location":"self/postgresql/DB/db_drop/","title":"Db drop","text":"<pre><code>SELECT '\\n' AS \" \"; -- Adding new line;\nDROP DATABASE IF EXISTS customer_db;\nDROP DATABASE customer_db; -- DROP DATABASE command\n</code></pre>"},{"location":"self/postgresql/ERRORs/er_inside_transaction_block%20/","title":"Er inside transaction block","text":"<pre><code>DROP DATABASE IF EXISTS customer_db;\nSELECT '\\n' AS \" \"; -- Adding new line;\n</code></pre>"},{"location":"self/postgresql/ERRORs/er_login_password/","title":"Become the postgres user","text":"<pre><code>sudo -i -u postgres\n</code></pre>"},{"location":"self/postgresql/ERRORs/er_login_password/#open-the-postgres-shell","title":"Open the postgres shell","text":"<pre><code>psql\n</code></pre>"},{"location":"self/postgresql/ERRORs/er_login_password/#create-a-void-database-with-the-name-i-want","title":"Create a void database with the name I want","text":"<pre><code>create database \"postgres-local\";\n</code></pre>"},{"location":"self/postgresql/ERRORs/er_login_password/#give-privileges-to-the-already-existing-user-postgres-to-access-that-database","title":"Give privileges to the already-existing user postgres to access that database","text":"<pre><code>grant all privileges on database \"postgres-local\" to postgres;\n</code></pre>"},{"location":"self/postgresql/ERRORs/er_login_password/#set-the-password-postgres-to-user-postgres","title":"Set the password 'postgres' to user  'postgres'","text":"<pre><code>ALTER USER postgres WITH PASSWORD 'postgres';\n</code></pre>"},{"location":"self/postgresql/Indexing/brin_indexing/","title":"Brin indexing","text":"<p><code>NOTE:</code> where a specific condition is frequently used in queries. BRIN indexes can also improve query performance on very large tables. </p> <pre><code>CREATE INDEX idx_customer_brin ON Customer (id) WHERE id &gt; 10; \n--\\d+ idx_customer_brin\n</code></pre>"},{"location":"self/postgresql/Indexing/btree/","title":"Btree","text":"<p><code>NOTE:</code> where a specific condition is frequently used in queries. BRIN indexes can also improve query performance on very large tables. </p> <pre><code>CREATE INDEX idx_customer_brin ON Customer (id) WHERE id &gt; 10; \n--\\d+ idx_customer_brin\n</code></pre>"},{"location":"self/postgresql/Indexing/create_drop/","title":"Create drop","text":"<pre><code>DROP INDEX idx_customer_name;\n--\\d+ idx_customer_name\n</code></pre> <pre><code>CREATE INDEX idx_customer_fname_lname ON Customer (last_name, first_name);\n</code></pre>"},{"location":"self/postgresql/Indexing/exp_indexing/","title":"Exp indexing","text":"<pre><code>CREATE INDEX idx_customer_name ON Customer ((first_name || ' ' || last_name));\n--\\d+ idx_customer_name\n</code></pre>"},{"location":"self/postgresql/Indexing/vacuum_reindex/","title":"Vacuum reindex","text":"<pre><code>CREATE INDEX name_idx ON Product(name);\n--\\d+ Product\n</code></pre> <pre><code>INSERT INTO Product (name, quantity, price, in_stock, description, expiry_date) \nVALUES \n    ('Widget', 10, 50.00, true, 'This is a widget', current_date), \n    ('Doodad', 20, 75.00, true, 'This is a doodad', null),  \n    ('NerdDangle', 10, 150.00, true, 'This is a nerd dangle', null), \n    ('Thingamabob', 5, 85.00, false, 'This is a thingamabob', null),  \n    ('Whatsit', 25, 90.00, true, 'This is a whatsit', null);\n\nDELETE FROM Product WHERE expiry_date = NULL;\nREINDEX TABLE Product;\nREINDEX INDEX name_idx;\nVACUUM INDEX\n</code></pre> <p><code>Note:</code>  Rebuilding an index can take a while, and will temporarily lock the table it\u2019s associated with. So it should be done during off-peak times or when there won\u2019t be heavy usage of the table. Additionally, if we\u2019re rebuilding, it might be worth considering dropping and recreating the index, as this can sometimes be more efficient. This can be done with the DROP INDEX and CREATE INDEX commands. </p>"},{"location":"self/postgresql/Join/join/","title":"Join","text":"<pre><code>SELECT\n  Product.product_id AS pid,\n  Product.product_name AS name,\n  Product.price,\n  Sales.sales_id as sid,\n  Sales.quantity AS qty,\n  Sales.date\nFROM\n  Product CROSS JOIN Sales;\n</code></pre> <pre><code>SELECT\n  Product.product_id AS pid,\n  Product.product_name AS name,\n  Product.price,\n  Sales.sales_id as sid,\n  Sales.quantity AS qty,\n  Sales.date\nFROM\n  Product\n  JOIN Sales ON Product.product_id = Sales.product_id;\n</code></pre> <pre><code>  SELECT\n  Product.product_id AS pid,\n  Product.product_name AS name,\n  Product.price,\n  Sales.sales_id as sid,\n  Sales.quantity AS qty,\n  Sales.date\nFROM\n  Product FULL JOIN Sales \n  ON Product.product_id = Sales.product_id;\n</code></pre> <pre><code>  SELECT\n  Product.product_id AS pid,\n  Product.product_name AS name,\n  Product.price,\n  Sales.sales_id as sid,\n  Sales.quantity AS qty,\n  Sales.date\nFROM\n  Product LEFT JOIN Sales \n  ON Product.product_id = Sales.product_id;\n</code></pre> <pre><code>  SELECT\n  Product.product_id AS pid,\n  Product.product_name AS name,\n  Product.price,\n  Sales.sales_id as sid,\n  Sales.quantity AS qty,\n  Sales.date\nFROM\n  Product RIGHT JOIN Sales \n  ON Product.product_id = Sales.product_id;\n</code></pre>"},{"location":"self/postgresql/Operators/operators/","title":"Operators","text":"<p><code>NOTE:</code> The ALL operator returns TRUE if all the values in the subquery meet the condition.</p> <pre><code>SELECT\n  3 + 4 as Sum,\n  5 - 2 as Diff,\n  6 * 8 as Mul,\n  10 / 2 as Div,\n  8 % 3 as Mod;\n</code></pre> <pre><code>SELECT\n  *\nFROM\n  Customer\nWHERE\n  gender = 'M'\n  AND age &gt; ALL ('{22, 23}'); -- ALL operator\n</code></pre> <pre><code> /*\n SELECT\n  *\nFROM\n  Customer\nWHERE\n  age &gt;= ALL -- ALL Operator\n  (\n    SELECT\n      AVG (age)\n    FROM\n      Customer\n  );\n */\n</code></pre> <pre><code> SELECT\n  *\nFROM\n  Customer\nWHERE\n gender = 'M'\nAND age &gt; ANY ('{22}'); -- ANY operator\n</code></pre> <pre><code>/*\nSELECT\n  *\nFROM\n  Customer\nWHERE\n  age &gt; ANY -- ANY Operator\n  ( \n    SELECT\n      AVG (age)\n    FROM\n      Customer\n  );\n*/\n</code></pre> <pre><code>SELECT\n  *\nFROM\n  Customer\nWHERE\n  city IN ('New York', 'Boston', 'Los Angeles'); -- IN\n</code></pre> <pre><code>SELECT\n  *\nFROM\n  Customer\nWHERE\n  age BETWEEN 22 AND 24; -- BETWEEN\n</code></pre> <pre><code>SELECT\n  *\nFROM\n  Customer\nWHERE\n  city LIKE '%ton'; -- LIKE\n</code></pre> <pre><code>Select EmployeeName,\n CASE\nWHEN Salary &gt;=80000 AND Salary &lt;=100000 THEN 'Director'\nWHEN Salary &gt;=50000 AND Salary &lt;80000 THEN 'Senior Consultant'\nElse 'Director'\nEND AS Designation\nfrom Employee\n</code></pre>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/","title":"Query planning","text":"<p>We can use the EXPLAIN command to see the execution plan for a query, which can help us identify any bottlenecks or areas for improvement.</p>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#execution","title":"Execution","text":"<p>tools like the pg_stat_activity view to monitor the performance of queries and identify any slow-running queries that need to be optimize</p>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#indexing","title":"Indexing","text":"<p>including B-tree, Hash, GiST, and GIN, each with different strengths and weaknesses.</p>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#sql-techniques","title":"SQL techniques","text":"<p>using the right data types, avoiding subqueries and complex joins, and using appropriate aggregate functions can make a big difference in the performance of our queries.</p>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#change-configuration","title":"Change Configuration","text":"<p>Here\u2019s a sample postgresql.conf configuration file for a PostgreSQL database:  For example, setting the maintenance_work_mem parameter allows PostgreSQL to use more memory for sorting operations which can improve performance significantly.</p>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#identifying-bottlenecks","title":"Identifying bottlenecks","text":"<p>In a PostgreSQL database is an important step in improving performance and ensuring efficient and reliable operation. There are several areas where bottlenecks can occur, including disk I/O, CPU utilization, memory usage, and network activity.</p>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#disk-io","title":"Disk I/O","text":"<p>When we execute the query below, it will return a list of user tables in the current database along with the corresponding number of disk blocks read from each table. Here, we first fetch all the rows of the Orders table with 100,000 records using the SELECT query. </p> <pre><code>-- Set pg_stat_statements.track to 'all'\nSET pg_stat_statements.track = 'all';\n\nCREATE EXTENSION IF NOT EXISTS pg_stat_statements;\n\nSELECT relname AS table, heap_blks_read\nFROM pg_statio_user_tables;\n</code></pre>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#cpu","title":"CPU","text":"<p>The following query provides information about the activity of current sessions on the database server, including details about running queries and their related attributes.  The query_start represents the timestamp when the current query was started and backend_start represents the timestamp when the back-end process for the session was started. We subtract backend_start from query_start to get the duration of the query execution.</p> <pre><code>SELECT \n    pid,\n    datname,\n    usename,\n    backend_start,\n    query_start,\n    (query_start - backend_start) AS duration\nFROM \n    pg_stat_activity\nORDER BY \n    duration DESC;\n</code></pre>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#memory-usage","title":"Memory usage","text":"<p>The pg_stat_bgwriter view provides information about the background writer process, which is responsible for flushing dirty buffers to disk. It includes statistics related to the buffers and can give us an idea of how memory is utilized for caching data. The buffers_alloc column from the pg_stat_bgwriter system view represents the total number of buffers allocated in the shared buffer cache to PostgreSQL back-end processes. This value provides insight into current memory usage for caching data.</p> <pre><code>SELECT buffers_alloc FROM pg_stat_bgwriter;\nSELECT '\\n' AS \" \";\n</code></pre>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#network-activity","title":"Network activity","text":"<p>We can use tools like tcpdump or Wireshark to monitor network activity and identify any issues causing performance problems.</p>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#tunning-db","title":"Tunning DB","text":"<p>there are two main categories of parameters: those that affect the entire cluster and those that affect only individual sessions or transactions.</p>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#cluster-level-configuration-parameters","title":"Cluster-level configuration parameters","text":"<p>Let\u2018s start with a few of the most important parameters that affect the entire cluster:</p> <ul> <li> <code>shared_buffers:</code> This parameter specifies the amount of memory used for shared buffer cache. Increasing the value of this parameter can result in a faster database, as more data can be cached in memory. However, it\u2019s important to remember that setting this value too high can cause the system to swap, slowing down the database.</li> <li> <code>effective_cache_size:</code> This parameter specifies the amount of memory the system expects to be available for disk caching. The query planner uses it to estimate the cost of using an index. Setting this parameter too low can result in the query planner making suboptimal choices, while setting it too high can result in the system using more memory than is available.</li> <li> <code>max_connections:</code> This parameter specifies the maximum number of concurrent connections to the database. Setting this value too high can result in the system running out of memory or becoming unresponsive, while setting it too low can limit the number of users who can access the database simultaneously.</li> <li> <code>work_mem:</code> This parameter specifies the amount of memory to be used by internal sort operations and hash tables before writing to temporary disk files. Setting this value too low can result in slow query performance, while setting it too high can result in the system running out of memory.</li> </ul>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#sessiontransaction-level-configuration-parameters","title":"Session/transaction-level configuration parameters","text":"<ul> <li> <p> <code>random_page_cost:</code> This parameter affects the cost calculation for accessing a randomly chosen page, as opposed to a sequentially fetched page. Setting this value higher can cause the query planner to choose a sequential scan instead of an index scan, while setting it lower can cause the query planner to choose an index scan even if a sequential scan would be faster.</p> </li> <li> <p> <code>maintenance_work_mem:</code> This parameter specifies the memory used for maintenance operations, such as vacuum and analysis. Setting this value too high can result in the system running out of memory, while setting it too low can result in slower performance for maintenance operations.</p> </li> </ul>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#query-tuning","title":"Query Tuning","text":"<p>We can use several techniques to tune queries in PostgreSQL:</p> <ul> <li> Use of indexes: Indexes can significantly improve the performance of queries by reducing the data the database needs to scan. Using indexes can substantially speed up queries, especially when dealing with large datasets.</li> <li> Use of EXPLAIN ANALYZE: We can use the EXPLAIN ANALYZE command to analyze the performance of a query. This command provides detailed information on the query execution plan, including the time to execute each step and the number of rows processed. We can use this information to identify areas to optimize the query.</li> <li> Use of EXPLAIN plans: We can use the EXPLAIN (ANALYZE, VERBOSE, COSTS, BUFFERS, TIMING) command to provide detailed information on the query execution plan, including the amount of memory used by the query and the number of disk I/O operations required. This information can be used to identify areas where the query can be optimized.</li> <li> Use of partitioning: We can use partitioning to improve the performance of queries by reducing the amount of data the database needs to scan. We can also use partitioning to improve the scalability of the database by distributing the data across multiple disk drives.</li> <li> Use of materialized views: We can use materialized views to improve the performance of queries by pre-computing and storing the results of frequently used queries. Materialized views can also speed up the execution of complex queries and reduce the load on the database server.</li> </ul> <p><code>For example,</code> the code below explains the execution plan for a query that retrieves data from a table named Customer:</p> <pre><code>EXPLAIN (ANALYZE, VERBOSE, COSTS, BUFFERS, TIMING)\nSELECT\n  first_name,\n  last_name\nFROM\n  Customer\nWHERE\n  state = 'TX';\n</code></pre> <pre><code>output 3.03s\nQUERY PLAN\nSeq Scan on customer (cost=0.00..13.12 rows=1 width=86)\n Filter: ((state)::text = 'TX'::text)\n</code></pre> <p>The output of the EXPLAIN command in PostgreSQL provides detailed information about the query execution plan, including the following information:</p> <ul> <li> <code>Query plan:</code> This tree-like structure shows the steps involved in executing the query from start to finish. Each node in the tree represents a different step in the query, such as a table scan or an index lookup.</li> <li> <code>Seq scan:</code> This indicates that the query is scanning the entire table, row by row, to find the desired data.</li> <li> <code>Index scan:</code> This indicates that the query uses an index to quickly find the desired data without scanning the entire table.</li> <li> <code>Bitmap heap scan:</code> This indicates that the query uses a bitmap index scan to find the desired data quickly.</li> <li> <code>Hash join:</code> This indicates that the query uses a hash join to combine data from two or more tables.</li> <li> <code>Nested loop:</code> This indicates that the query uses a nested loop join to combine data from two or more tables.</li> <li> <code>Filter:</code> This shows the expression used to filter the data and provides information about how many rows are expected to be returned after the filter has been applied.</li> <li> <code>Rows:</code> This indicates the number of rows processed by each step in the query.</li> <li> <code>Planning time:</code> This refers to the amount of time spent by the database engine in preparing the execution plan for a query. This includes the time spent analyzing the query, generating the execution plan, and optimizing the plan for efficient execution.</li> <li> <code>Execution time:</code> This indicates the amount of time taken to execute each step in the query.</li> <li> <code>Buffers:</code> This indicates the number of disk I/O operations required to execute each step in the query.</li> <li> <code>Cost:</code> This refers to an estimate of the processing time required to execute a query based on various factors, such as the complexity of the query, the size of the data being processed, and the available resources on the database server. It\u2019s expressed in arbitrary units and is used by the database engine to determine the most efficient execution plan for a query. The cost is not a measure of actual processing time but rather a rough estimate of the processing effort required. It\u2019s displayed as a range, with the minimum cost first and the maximum cost second, separated by .... For example, the cost is 0.15..8.17, which means that the minimum estimated cost of executing this query is 0.15 and the maximum estimated cost is 8.17. The cost can help us understand how the database engine is processing our query and can be useful for identifying performance bottlenecks and fine-tuning our database configuration for optimal performance.</li> </ul> <p>\"EXPLAIN\" to analyze the query execution plan id the best way to tune the performance of a query in PostgreSQL.</p> <pre><code>CREATE INDEX customer_idx_state_dob ON Customer (state, date_of_birth);-- At the first exec remove this line\nEXPLAIN ANALYZE\nSELECT\n  *\nFROM\n  Customer\nWHERE\n  state = 'TX'\n  AND date_of_birth BETWEEN '1980-01-01'\n  AND '1990-01-01';\n</code></pre> <pre><code>output 2.81s\nQUERY PLAN\nSeq Scan on customer (cost=0.00..14.38 rows=1 width=291) (actual time=0.007..0.013 rows=5 loops=1)\n Filter: ((date_of_birth &gt;= '1980-01-01'::date) AND (date_of_birth &lt;= '1990-01-01'::date) AND ((state)::text = 'TX'::text))\n Rows Removed by Filter: 39\nPlanning time: 0.110 ms\nExecution time: 0.023 ms\n</code></pre> <p>In a production environment, it\u2019s usually better to use the EXPLAIN command without the ANALYZE option, which provides similar information without actually executing the query.</p>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#performance-monitoring","title":"Performance Monitoring","text":"<p>PostgreSQL provides several built-in tools for monitoring performance, including:</p> <ul> <li> <code>The pgAdmin interface:</code> This is a popular graphical user interface for managing PostgreSQL databases. It provides a wealth of information about the performance of the database, including real-time monitoring of queries, resource utilization, and more.</li> <li> <code>pg_stat_activity:</code> This view provides real-time information about the current activities of database sessions, including the performance of individual SQL statements, such as the number of times the database has executed the statement, the average time it takes to complete it, and the total time it has been running.</li> <li> <code>pg_stat_statements:</code> This extension provides detailed statistics about the performance of individual SQL statements, including the number of times a statement has been executed, the average time it takes to complete, and the total time it has been running.</li> <li> <code>PostgreSQL logs:</code> This provides detailed information about the events within the database, including query execution times, resource utilization, and error messages. </li> </ul>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#pg_stat_activity","title":"pg_stat_activity","text":"<p>To use <code>pg_stat_activity</code>, we can simply run a SELECT statement against the view, as shown below:</p> <pre><code> SELECT\n  pid, \n  current_user as username,\n  state,\n  waiting,\n  query_start\nFROM\n  pg_stat_activity;\n</code></pre> <p>To monitor the blocked queries in the database, we can use the following query:</p> <pre><code>  SELECT\n  pid, \n  current_user as user,\n  state,\n  waiting,\n  query_start\nFROM pg_stat_activity\nWHERE waiting = 'true';\n</code></pre>"},{"location":"self/postgresql/PerformanceTuning/performance-tuning/#pg_stat_statements-extension","title":"pg_stat_statements extension","text":"<p>We can use this information to identify the slowest queries, understand the impact of different queries on the database. To use pg_stat_statements, we must first install the extension. We can do this by running the following SQL command as a superuser:</p> <pre><code>CREATE EXTENSION pg_stat_statements;\n</code></pre> <p>we can enable the statement statistics by setting the shared_preload_libraries parameter in the postgresql.conf file shared_preload_libraries = 'pg_stat_statements'</p> <p><code>Analyze data</code> We can run a query against the pg_stat_statements view to analyze the collected data. For example, the following query returns the top 5 slowest queries in the database:</p> <pre><code>SELECT\n  query,\n  calls,\n  total_time\nFROM\n  pg_stat_statements\nORDER BY\n  total_time DESC\nLIMIT\n  5;\n</code></pre> <p>It returns a list of the top 5 slowest queries, along with the number of times the database executes each query and the total time it took to run.</p>"},{"location":"self/postgresql/Projects/Project_Expense/prj_expenses/","title":"Prj expenses","text":"<pre><code>CREATE DATABASE expense_db\n  WITH OWNER = postgres \n  LC_COLLATE = 'C.UTF-8' \n  LC_CTYPE = 'C.UTF-8' \n  TABLESPACE = pg_default \n  CONNECTION LIMIT = -1;\n\n  CREATE TABLE Expense (\n  expense_id SERIAL PRIMARY KEY,\n  expense_date DATE, \n  amount MONEY, \n  category_id INTEGER, \n  description TEXT);\n\n  CREATE TABLE Category (\n  category_id SERIAL PRIMARY KEY,\n  category_name VARCHAR(20), \n  budget MONEY\n);\n</code></pre> <pre><code>ALTER TABLE Expense \nADD CONSTRAINT fk_expense_category \nFOREIGN KEY (category_id) REFERENCES Category (category_id);\n</code></pre> <pre><code>INSERT INTO Category (category_name, budget) VALUES \n('groceries', 200), \n('restaurants', 150), \n('gas', 100), \n('entertainment', 50);\n\nINSERT INTO Expense (expense_date, amount, category_id, description) \nVALUES \n    ('2022-11-01', 50.25, 1, 'monthly grocery refill'), \n    ('2022-11-05', 20.75, 2, 'birthday party'), \n    ('2022-11-15', 50, 3, 'gas for car');\n\n\nSELECT '\\n' AS \" \";\nSELECT * FROM Category ;\nSELECT '\\n' AS \" \";\nSELECT * FROM Expense;\n</code></pre> <pre><code>CREATE INDEX idx_expense_amount ON Expense (amount);\n</code></pre> <pre><code>SELECT\n  SUM(amount)\nFROM\n  Expense\nWHERE\n  category_id = (\n    SELECT\n      category_id\n    FROM\n      Category\n    WHERE\n      category_name = 'restaurants'\n  )\n  AND expense_date BETWEEN '2022-11-01' AND '2022-11-30';\n</code></pre> <pre><code>SELECT\n  SUM(amount)\nFROM\n  Expense e\n  JOIN Category c ON e.category_id = c.category_id\nWHERE\n  expense_date BETWEEN '2022-11-01'\n  AND '2022-11-30'\nGROUP BY\n  category_name\nHAVING\n  category_name = 'restaurants';\n</code></pre>"},{"location":"self/postgresql/Projects/Project_Expense/Retail_Store/retail_store/","title":"Retail store","text":"<p>CREATE DATABASE retail_store   WITH OWNER = myuser        ENCODING = 'SQL_ASCII'        TABLESPACE = pg_default        CONNECTION LIMIT = -1;</p> <p>--\\d</p> <p>CREATE SCHEMA catalog; CREATE SCHEMA customer_management; CREATE SCHEMA order_management;</p> <p>--\\dn</p> <p>CREATE TABLE customer_management.Customer (     customer_id SERIAL PRIMARY KEY,     first_name VARCHAR(50) NOT NULL,     last_name VARCHAR(50) NOT NULL,     email VARCHAR(100) NOT NULL UNIQUE,     phone VARCHAR(20) );</p> <p>CREATE TABLE catalog.Product(     product_id SERIAL PRIMARY KEY,     name VARCHAR(100) NOT NULL,     description TEXT,     price NUMERIC(10, 2) NOT NULL,     stock_quantity INTEGER NOT NULL CHECK (stock_quantity &gt;= 0),     category VARCHAR(50) );</p> <p>CREATE TABLE order_management.Orders (     order_id SERIAL PRIMARY KEY,     customer_id INTEGER REFERENCES customer_management.Customer(customer_id),     order_date TIMESTAMP DEFAULT NOW(),     status VARCHAR(20) NOT NULL DEFAULT 'pending',     total_price NUMERIC(10, 2) NOT NULL,     payment_method VARCHAR(50),     shipping_address VARCHAR(100) );</p> <p>CREATE TABLE order_management.Item (     order_id INTEGER REFERENCES order_management.Orders(order_id),     product_id INTEGER REFERENCES catalog.Product(product_id),     quantity INTEGER NOT NULL CHECK (quantity &gt; 0),     item_price NUMERIC(10,2) NOT NULL,     PRIMARY KEY (order_id, product_id) );</p> <p>-- Print table structure of Customer table --\\d+ customer_management.Customer SELECT '\\n' AS \" \"; -- new line</p> <p>-- Print table structure of Product table --\\d+ order_management.Product SELECT '\\n' AS \" \"; -- new line</p> <p>-- Print table structure of Item table --\\d+ catalog.Item SELECT '\\n' AS \" \"; -- new line</p> <p>-- Print table structure of Orders table --\\d+ order_management.Orders SELECT '\\n' AS \" \"; -- new line</p> <p>INSERT INTO customer_management.Customer (first_name, last_name, email, phone) VALUES ('John', 'Doe', 'johndoe@example.com', '555-1234'),        ('Jane', 'Doe', 'janedoe@example.com', '555-6789'),        ('Bob', 'Smith', 'bobsmith@example.com', '555-9012');</p> <p>INSERT INTO catalog.Product (name, description, price, stock_quantity, category) VALUES ('T-Shirt', 'cotton T-shirt', 19.99, 100, 'Clothing'),        ('Sneakers', 'blue sneakers', 59.99, 50, 'Footwear'),        ('Backpack', 'school backpack', 39.99, 25, 'Accessories');     </p> <p>INSERT INTO order_management.Orders (customer_id, total_price, payment_method, shipping_address) VALUES (1, 59.99, 'Credit Card', '123 Main St, Anytown USA'),        (2, 19.99, 'PayPal', '456 Oak Ave, Anytown USA'),        (3, 79.99, 'Credit Card', '789 Elm St, Anytown USA');         </p> <p>INSERT INTO   order_management.Item (order_id, product_id, quantity, item_price) VALUES   (1, 1, 2, 19.99),   (1, 2, 1, 59.99),   (2, 1, 1, 19.99),   (3, 1, 3, 19.99),   (3, 2, 1, 59.99);</p> <p>-- Retrieve all rows from the Customer table SELECT * FROM customer_management.Customer; SELECT '\\n' AS \" \"; -- new line</p> <p>-- Retrieve all rows from the Product table SELECT * FROM catalog.Product; SELECT '\\n' AS \" \"; -- new line</p> <p>-- Retrieve all rows from the Orders table SELECT * FROM order_management.Orders; SELECT '\\n' AS \" \"; -- new line</p> <p>-- Retrieve all rows from the Item table SELECT * FROM order_management.Item; SELECT '\\n' AS \" \"; -- new line       </p> <p>CREATE TABLE order_management.Shopping_cart (     id SERIAL PRIMARY KEY,     customer_id INTEGER REFERENCES customer_management.Customer(customer_id),     product_id INTEGER REFERENCES catalog.Product(product_id),     quantity INTEGER CHECK (quantity &gt;= 0),     price DECIMAL(10, 2),     created_at TIMESTAMP DEFAULT NOW() );</p> <p>ALTER TABLE  order_management.Shopping_cart ADD CONSTRAINT  unique_user_item UNIQUE (customer_id, product_id);</p> <p>ALTER TABLE  order_management.Shopping_cart ADD CONSTRAINT  positive_quantity CHECK (quantity &gt; 0);</p> <p>ALTER TABLE  order_management.Shopping_cart ADD CONSTRAINT  non_negative_price CHECK (price &gt;= 0);</p> <p>--\\d+ order_management.Shopping_cart </p> <p>-- Defining a function CREATE OR REPLACE FUNCTION add_to_cart(     p_customer_id INTEGER,     p_product_id INTEGER,     p_quantity INTEGER ) RETURNS VOID AS $$ DECLARE     cart_id INTEGER; BEGIN     -- Check if the customer has an existing shopping cart     SELECT id INTO cart_id     FROM order_management.shopping_cart     WHERE customer_id = p_customer_id;</p> <pre><code>IF NOT FOUND THEN\n    -- Create a new shopping cart for the customer if they don't have one\n    INSERT INTO order_management.shopping_cart (customer_id, product_id, quantity)\n    VALUES (p_customer_id, p_product_id, p_quantity)\n    RETURNING cart_id INTO cart_id;\nEND IF;\n</code></pre> <p>END; $$ LANGUAGE plpgsql;</p> <p>-- Executing the function SELECT add_to_cart(1, 1, 1);</p> <p>SELECT * FROM order_management.shopping_cart;</p>"},{"location":"self/postgresql/Queries/insert_select/","title":"Insert select","text":"<pre><code>INSERT INTO\n  Alumni\nSELECT\n  *\nFROM\n  Employee\nWHERE\n  salary &gt; 50000 :: money;\n</code></pre>"},{"location":"self/postgresql/Queries/update/","title":"Update","text":"<pre><code>UPDATE\n  Employee\nSET\n  salary = salary * 1.1\nWHERE\n  department = 'IT';\n</code></pre>"},{"location":"self/postgresql/Regular_Expressions/regx_operator/","title":"Regx operator","text":"<pre><code>SELECT\n  *\nFROM\n  Customer\nWHERE\n  email ~ '.com$';\n</code></pre> <pre><code>SELECT * FROM Customer;\n\nDELETE FROM\n  Customer\nWHERE\n  fname ~ '^J.*';\n\nSELECT '\\n' AS \" \";\n\nSELECT * FROM Customer;\nSELECT '\\n' AS \" \";\n</code></pre> <pre><code>SELECT\n  *\nFROM\n  Customer\nWHERE\n  phone_number ~ '[0-9]{3}-[0-9]{3}-[0-9]{4}';\n</code></pre> <pre><code>--The ~* operator is similar to ~ but performs a case-insensitive match. \nSELECT\n  *\nFROM\n  Customer\nWHERE\n  fname ~* 'john';\n</code></pre>"},{"location":"self/postgresql/Regular_Expressions/Functions/regx_replace/","title":"Regx replace","text":"<pre><code>SELECT * FROM Customer;\n\nUPDATE\n  Customer\nSET\n  email = REGEXP_REPLACE(email, '.com$', '.biz');\n\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT * FROM Customer;\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre>"},{"location":"self/postgresql/Regular_Expressions/Functions/regx_similar/","title":"Regx similar","text":"<pre><code>SELECT\n  email\nFROM\n  Customer\nWHERE\n  email SIMILAR TO '%.com';\n</code></pre>"},{"location":"self/postgresql/Replication/replication/","title":"Configure the primary server","text":"<pre><code>CREATE USER replicator REPLICATION LOGIN ENCRYPTED PASSWORD 'password';\n</code></pre> <p>On the primary server, open the postgresql.conf file and add the following settings:</p> <p><pre><code>wal_level = replica\nmax_wal_senders = 2\nwal_keep_segments = 3\nmax_replication_slots = 2\n</code></pre> Setting in the postgres.conf file of the primary database server</p> <p>wal_level = replica: This setting determines the level of information written to the WAL during transactions. The replica setting ensures that enough information is logged to support replication.</p> <p>In PostgreSQL, the following three wal_level settings determine the amount of information written to the WAL:</p> <ul> <li> <code>minimal:</code> Only the information necessary to recover from a crash is written to the WAL. This setting is appropriate for single-node configurations that don\u2019t use replication.</li> <li> <code>replica:</code> This setting provides enough information for replication to work but doesn\u2019t provide all the information necessary for logical decoding. This is the default wal_level for replication configurations.</li> <li> <code>logical:</code> This setting allows for more advanced features like logical replication and decoding of the WAL.</li> <li> <code>max_wal_senders = &lt;number of replica servers&gt;:</code> This setting determines the maximum number of concurrent connections from replica servers to the primary server. The number of replica servers should match the number specified in this setting.</li> <li> <code>wal_keep_segments = &lt;number of segments to retain in WAL&gt;:</code> This setting determines the number of WAL segments kept on the primary server for the replica servers to catch up. A higher value of this setting means that more segments are kept, which can increase the amount of disk space used, but it also allows for longer replication delays. A lower value of this setting means less disk space is used, but there\u2019s less time for the replica servers to catch up in case of a failure.</li> <li> <code>max_replication_slots = &lt;number of replication slots&gt;:</code> This setting specifies the maximum number of replication slots available on the server. Replication slots are used to track the changes in the WAL of the server and ensure that the replication data is consistent between the primary and secondary servers. The max_replication_slots value should be set according to the number of replica servers expected to connect to the primary server. A higher value of max_replication_slots increases the number of concurrent connections that the primary server can handle but also increases the memory usage of the server. The default value max_replication_slots in PostgreSQL is 0. This means that replication slots are not created by default, and the replication process is not enabled. To use replication slots, the value max_replication_slots must be set to a positive integer in the postgresql.conf file and the server must be restarted for the changes.</li> </ul> <pre><code># Replication connection:\nhost    replication     replicator  &lt;slave_ip_address&gt;/32   md5\n</code></pre> <p>Also, add the following entry to the pg_hba.conf file to allow the replica server to connect: The pg_hba.conf configuration file settings for replication</p> <p><code>Restart the primary server</code> After making the changes, restart the primary server to apply the new settings.</p> <p><code>Create a replication slot</code> A replication slot is a mechanism in PostgreSQL that allows the replica server to receive WAL data from the primary server. It\u2019s a named, persisted data structure in a PostgreSQL database cluster that tracks the progress of a replica in reading WAL data. To create a replication slot, use the following SQL command:</p> <p><code>Initiate replication:</code> This will start the replication process, and the data on the primary server will be replicated to the replica server.</p> <pre><code>SELECT pg_start_backup('label');\n</code></pre> <p><code>Configure the replica server</code> On the replica server, open the postgresql.conf file and add the following settings:</p> <pre><code>hot_standby = on\nwal_level = replica\nmax_wal_senders = 2 --The value of 2 for max_wal_senders means that up to two standby servers can receive WAL data simultaneously.\n--\\du replicator\n</code></pre> <p>On the replica server, create a recovery file called recovery.conf in the data directory with the following contents: The purpose of the recovery.conf file is used to configure the replica server.</p> <pre><code>standby_mode = 'on'\nprimary_conninfo = 'host=primary-server-ip port=5432 user=replicator password=P@ssw0rd'\nrecovery_target_timeline = 'latest'\ntrigger_file = '/tmp/postgresql.trigger'\n</code></pre> <p>After creating the recovery file, restart the replica server(s) to apply the new settings. Next, log in to the secondary server and run the following command to start the replication process:</p> <pre><code>pg_basebackup -h &lt;master_server_ip&gt; -U replicator -D /var/lib/postgresql/data -P --xlog-method\n</code></pre> <p>Finally, monitor the replication status by checking the pg_stat_replication view on the primary server:</p> <pre><code>SELECT\n  *\nFROM\n  pg_stat_replication; --\n</code></pre>"},{"location":"self/postgresql/Replication/replication/#uses-of-database-replication","title":"Uses of database replication","text":"<ul> <li> <code>High availability:</code> By having multiple database replicas, we can ensure that the system remains available even if one replica fails. In case of a failure, a replica can take over, ensuring that the system remains available to serve users.</li> <li> <code>Load balancing:</code> Replication can balance read loads across multiple replicas. This can help improve the performance of read-intensive applications and reduce the load on the primary database.</li> <li> <code>Disaster recovery:</code> Replication can be used to ensure that a backup replica is available in case of a disaster. In the event of a disaster, the replica can take over and ensure that the system remains available.</li> <li> <code>Data analysis and reporting:</code> Replicas can be used for data analysis and reporting. This can help reduce the load on the primary database and ensure that reporting and analysis operations don\u2019t impact the performance of the primary database.</li> <li> <code>Backup and recovery:</code> Replication can be part of a backup and recovery strategy. Having a replica available can ensure that data is safe and can be recovered during a disaster.</li> <li> <code>Compliance and auditing:</code> Replication can be used to ensure that a replica of the data is available for compliance and auditing purposes. This can also help reduce the risk of data loss.</li> </ul>"},{"location":"self/postgresql/Replication/replication/#replication-solutions-in-postgresql","title":"Replication solutions in PostgreSQL","text":"<p>There are several ways to classify different types of database replication, including:</p> <ul> <li> <code>Consistency:</code> Replication can be classified based on its consistency level. Consistency refers to the degree to which the data on the replica databases is up-to-date and accurate with respect to the data on the primary database. There are several levels of consistency, including strong consistency, eventual consistency, and weak consistency.</li> <li> <code>Direction of data transfer:</code> Replication can also be classified based on the replication direction. Replication can be one-way or bidirectional. In one-way replication, data changes are replicated from a primary database to one or more replica databases. In bidirectional replication, data changes can be replicated in both directions between two or more databases.</li> <li> <code>Timing:</code> Replication can be classified based on the timing of replication. Replication can be real-time or batch. In real-time replication, changes are replicated as soon as they occur. Changes are periodically collected and then replicated in a batch in batch replication.</li> <li> <code>Method:</code> Replication can also be classified based on the method used for replication. Some common methods include log-based replication, trigger-based replication, file-based replication, and API-based replication.</li> </ul>"},{"location":"self/postgresql/Replication/replication/#postgresql-supports-several-types-of-database-replication-including","title":"PostgreSQL supports several types of database replication, including:","text":"<ul> <li> <code>Streaming replication:</code> This is the standard method of replication in PostgreSQL, and it involves continuously sending WAL records from the primary to the replica. The replica then applies the WAL records to keep its data in sync with the primary.</li> <li> <code>Logical replication:</code> This method involves replicating individual changes to the data, such as inserts, updates, and deletes, instead of replicating the entire database. Logical replication can be useful for replicating specific data between databases or for creating reporting replicas.</li> <li> <code>File-based replication:</code> This method involves copying the entire database files from the primary to the replica. It can be useful for disaster recovery or for creating read-only replicas for reporting purposes.</li> <li> <code>Synchronous replication:</code> This type of replication involves having the primary wait for the replicas to confirm that they have received and applied the changes before committing the transaction. Synchronous replication can provide a higher level of data consistency, but can also impact performance due to the wait time for the replicas to confirm receipt.</li> <li> <code>Asynchronous replication:</code> This type of replication involves the primary sending of changes to the replicas without waiting for confirmation. This can help improve performance, but can also result in data inconsistencies if the replicas are temporarily unavailable.</li> <li> <code>Trigger-based replication:</code> Trigger-based replication is a method of database replication that uses triggers to replicate data changes from one database to another automatically. It can be useful for replicating data between databases or creating reporting replicas. It can also be used for data migration, where data from an old system is replicated to a new system. Triggers are special functions in a database that are automatically executed when a specified event occurs, such as an insert, update, or delete. The main advantage of trigger-based replication is that it\u2019s easy to set up and can be done without modifying the application code. However, trigger-based replication can also have some disadvantages, such as increased latency and load on the source database and the possibility of circular replication, where changes are continuously replicated between two databases, leading to an infinite loop.</li> </ul>"},{"location":"self/postgresql/Replication/replication/#the-following-are-the-different-levels-of-consistency-in-database-replication","title":"The following are the different levels of consistency in database replication:","text":"<ul> <li> <code>Strong consistency:</code> This type of replication ensures that all replica databases have the same data and are always up-to-date with the primary database. This is the highest level of consistency and provides the greatest data accuracy.</li> <li> <code>Eventual consistency:</code> This type of replication allows for a brief period during which the replica databases may be out-of-date with the primary database. However, after a period of time, all replica databases will eventually be brought up-to-date with the primary database. This type of replication provides a lower level of consistency than strong consistency but can provide better performance and scalability.</li> <li> <code>Weak consistency:</code> This type of replication provides the lowest level of consistency and may result in data inconsistencies between the primary and replica databases. This replication type is typically used when data consistency is not a high priority and performance is more important.</li> </ul> <p>The term \u201cstreaming replication\u201d is used to emphasize that changes to the primary database are streamed in real time to the secondary servers, while the term \u201cprimary-secondary replication\u201d is used to describe the traditional client-server relationship between the primary and secondary servers.</p>"},{"location":"self/postgresql/Replication/replication/#the-direction-of-data-transfer","title":"The direction of data transfer","text":"<p>Replication can also be classified based on the direction of data transfer. The following are the different types of replication based on the direction of data transfer:</p> <ul> <li> <code>One-way replication:</code> In this type of replication, data changes are replicated from a primary database to one or more replica databases. The primary database is the source of truth, and all changes to the data are made on the primary database.</li> <li> <code>Bidirectional replication:</code> In this type of replication, data changes can be replicated in both directions between two or more databases. This is useful when data needs to be updated on multiple databases and data changes need to be synchronized between all databases.</li> <li> <code>Multi-master replication:</code> This type of replication is bidirectional replication in which changes can be made to any database, and the changes are automatically replicated to all other databases. This type of replication is useful when multiple databases need to be updated simultaneously, and data changes need to be synchronized between all databases.</li> </ul>"},{"location":"self/postgresql/Replication/replication/#trigger-based-replication","title":"Trigger-based replication","text":"<pre><code>CREATE TABLE Employee_replica\n(\n  id serial primary key,\n  name text NOT NULL,\n  salary numeric(10,2) NOT NULL\n);\n--\\dt\n</code></pre> <pre><code>CREATE OR REPLACE FUNCTION replicate_employee_changes()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF (TG_OP = 'INSERT') THEN\n    INSERT INTO Employee_replica\n    SELECT * FROM Employee\n    WHERE Employee.id = NEW.id;\n  ELSIF (TG_OP = 'UPDATE') THEN\n    UPDATE Employee_replica\n    SET name = NEW.name,\n        salary = NEW.salary\n    WHERE Employee_replica.id = NEW.id;\n  ELSE\n    DELETE FROM Employee_replica\n    WHERE Employee_replica.id = OLD.id;\n  END IF;\n  RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;\n\n--\\df\n</code></pre> <pre><code>CREATE TRIGGER replicate_employee_changes_trigger\nAFTER INSERT OR UPDATE OR DELETE ON Employee\nFOR EACH ROW EXECUTE PROCEDURE replicate_employee_changes();\n--\\dS Employee\n</code></pre> <pre><code>INSERT INTO Employee (id, name, salary)\nVALUES (1, 'John Doe', 5000);\nUPDATE Employee SET salary = 6000 WHERE id = 1;\nDELETE FROM Employee WHERE id = 1;\n\nSELECT * FROM Employee_replica;\n</code></pre>"},{"location":"self/postgresql/Replication/replication/#bidirectional-replication","title":"Bidirectional Replication","text":"<p>Primary-secondary replication only has one primary server and multiple secondary servers, while bidirectional replication has multiple primary servers.</p> <p>This is done through the following steps:</p> <ul> <li> We install PostgreSQL on both servers by following the installation instructions for our operating system.</li> <li> After installation, we open the configuration file on both servers, postgresql.conf.</li> <li> We add the following configuration parameters on both servers:</li> </ul> <pre><code>listen_addresses = '*'\nwal_level = replica\nmax_wal_senders = &lt;number_of_replication_connections&gt;\n</code></pre> <pre><code>CREATE USER replication_user REPLICATION LOGIN ENCRYPTED PASSWORD 'password';\n---\\du replication_user\n</code></pre> <p>Open the pg_hba.conf access control configuration file and add the following line to the file:</p> <pre><code>host replication replication_user &lt;ip_address_of_other_server&gt;/32 md5\n</code></pre>"},{"location":"self/postgresql/Replication/replication/#setting-up-replication-on-both-nodes","title":"Setting up replication on both nodes","text":"<p>On the first server, create a base backup of the database by running the following command:</p> <pre><code>pg_basebackup -h &lt;ip_address_of_other_server&gt; -D &lt;backup_directory&gt; -U replication_user -P\n</code></pre> <p>We replace  and  with the appropriate values for our system. <p>On the second server, repeat the process by creating a base backup of the first server. On both servers, open the recovery configuration file, and add the following parameters to the recovery.conf file on both servers:</p> <pre><code>standby_mode = 'on'\n</code></pre>"},{"location":"self/postgresql/Security/User/User_role_group/","title":"User role group","text":"<p>Additionally, PostgreSQL allows for the creation of role groups, where a single GRANT command can grant privileges to multiple users at once. This can be useful for simplifying the management of user access in larger databases with many users. </p> <pre><code>GRANT INSERT ON Product TO developer WITH GRANT OPTION; --clause to allow the user to grant privileges to other users. \n</code></pre> <pre><code>SELECT * FROM information_schema.table_privileges WHERE grantee='developer';\n</code></pre>"},{"location":"self/postgresql/Security/User/user_create_drop/","title":"User create drop","text":"<pre><code>CREATE OR ALTER USER developer WITH PASSWORD '&lt;password&gt;';\nSELECT rolname, rolpassword FROM pg_authid;\n--\\du\nDROP USER &lt;username&gt;;\n</code></pre>"},{"location":"self/postgresql/Security/User/user_grant_privileges/","title":"User grant privileges","text":"<pre><code>GRANT INSERT ON TABLE Product TO developer;\nGRANT DELETE ON TABLE Product TO developer;\nSELECT * FROM information_schema.table_privileges WHERE grantee='developer';\n</code></pre>"},{"location":"self/postgresql/Security/User/user_group/","title":"User group","text":"<p>This allows us to easily grant the same privileges to multiple users at once.</p> <pre><code>CREATE GROUP team WITH USER developer, tester;\nGRANT INSERT ON Product TO team;\nSELECT * FROM information_schema.table_privileges WHERE grantee='team';\n--\\du\n</code></pre>"},{"location":"self/postgresql/Security/User/user_revoke_privilege/","title":"User revoke privilege","text":"<pre><code>GRANT INSERT, UPDATE ON Product TO team;\nREVOKE INSERT ON Product FROM team; \nSELECT * FROM information_schema.table_privileges WHERE grantee='team';\n</code></pre>"},{"location":"self/postgresql/Security/hashing/hashing_password/","title":"Hashing password","text":"<pre><code>CREATE TABLE Users (\n    username VARCHAR(20) NOT NULL PRIMARY KEY, \n    password VARCHAR(50)\n);\n\nINSERT INTO Users VALUES ('developer', md5('p@ssw0rd'));\n\nSELECT\n  *\nFROM\n  Users\nWHERE\n  username = 'developer' AND password = md5('p@ssw0rd');\n</code></pre>"},{"location":"self/postgresql/Sequences/sequences/","title":"Sequences","text":"<pre><code>CREATE SEQUENCE product_id_seq\n    START WITH 100\n    INCREMENT BY 1\n    MAXVALUE 999\n    MINVALUE 100\n    NO CYCLE;\n-- list all sequences in the database.\n--\\ds\n</code></pre> <pre><code>INSERT INTO\n  Product (id, name)\nVALUES\n  (NEXTVAL('product_id_seq'), 'Laptop');\n\nSELECT\n  *\nFROM\n  Product\nWHERE\n  id = CURRVAL('product_id_seq');\n</code></pre>"},{"location":"self/postgresql/Stored_Functions/sf_create/","title":"Sf create","text":"<pre><code>CREATE FUNCTION get_cheap_product_count(low MONEY, high MONEY)\nRETURNS VARCHAR(50)\nLANGUAGE plpgsql\nAS \n$product_count$ -- OR $$\nDECLARE  \n    product_count integer; \nBEGIN\n    SELECT count(id) INTO product_count  \n    FROM \n        Product\n    WHERE \n        price between low and high; \n\n    RETURN product_count;  \nEND; $product_count$; -- OR $$\n\nSELECT * FROM get_cheap_product_count(100::MONEY, 500::MONEY);\n</code></pre> <p>CREATE FUNCTION get_employee_title(int) RETURNS text  LANGUAGE plpgsql  AS $$  BEGIN     RETURN (SELECT job_title FROM Employee WHERE employee_id = $1);  END; $$;</p> <p>SELECT '\\n' AS \" \"; -- Adding new line</p> <p>SELECT get_employee_title(2); </p> <p>/* \\df The \\sf+  can be used to view the definition of the function named .  \\sf get_employee_title */"},{"location":"self/postgresql/Stored_Functions/Aggregate/sf_aggregate/","title":"Sf aggregate","text":"<pre><code>CREATE TABLE Product (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  creation_date DATE,\n  price MONEY\n);\n\nINSERT INTO\n  Product (name, price)\nVALUES\n  ('iPhone', 799.99),\n  ('S7 Edge', 849.99),\n  ('Mate 9', 599.99),\n  ('Moto Z', 599.99),\n  ('Lumia', 499.99);\n</code></pre> <pre><code>SELECT count(*) AS \"Number of Records\" FROM Product;  \nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT sum(price) AS \"Total Value\" FROM Product;\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT min(price) AS \"Lowest Price\" FROM Product;\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT max(price) AS \"Highest Price\" FROM Product;\n</code></pre>"},{"location":"self/postgresql/Stored_Functions/Composite/sf_composite/","title":"Sf composite","text":"<pre><code>CREATE FUNCTION employee_title_upper(employee) RETURNS text \nAS $$ \n   SELECT UPPER ($1.job_title) FROM Employee; \n$$ LANGUAGE SQL;\n\n\\sf+ employee_title_upper\nSELECT '\\n' AS \" \";  -- Adding new line\n</code></pre> <pre><code>SELECT\n  employee_id AS \"id\",\n  employee_title_upper(employee.*) AS \"title (upper case)\"\nFROM\n  employee;\n</code></pre>"},{"location":"self/postgresql/Stored_Functions/DateTime/sf_datetime/","title":"Sf datetime","text":"<p>Date Time functions</p> <pre><code>SELECT now() AS \"Now\"; \nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT date_part('hour', now()) AS \"Hour\";\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT date_trunc('hour', now()) AS \"Hour\";\n</code></pre> <p>Output:</p> <pre><code>Now\n2023-12-29 18:27:54.727255+00 \n Hour\n18 \n Hour\n2023-12-29 18:00:00+00\n</code></pre>"},{"location":"self/postgresql/Stored_Functions/Math/sf_math/","title":"Sf math","text":"<p>Math functions </p> <pre><code>SELECT round(12.7) AS \"Rounded number\";\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT floor(12.3) AS \"Floor value\";  \nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT ceil(12.3) AS \"Ceiling value\";\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT mod(20, 5) AS \"Modulus function result\";\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT pow(9, 2) AS \"Powers function result\";\n\nSELECT abs(-10) AS \"ABS function result\";\n\nSELECT greatest(2, 54, 67, 99) AS \"Greatest function result\";\n</code></pre> <p>Output:</p> <pre><code>Rounded number\n13 \n Floor value\n12 \n Ceiling value\n13 \n Modulus function result\n0 \n Powers function result\n81\n</code></pre>"},{"location":"self/postgresql/Stored_Functions/String/sf_string/","title":"Sf string","text":"<p>String functions </p> <pre><code>SELECT length('Hello world!') AS \"Number of Characters\";\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT substring('Hello world!', 1, 3) AS \"Substring\";\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT lower('HELLO WORLD!') AS \"Lowercase string\";\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT upper('hello world!') AS \"Uppercase string\";\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT concat('hello', 'world!') AS \"Concatenated string\";\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT repeat('Hello world!', 3) AS \"Repeated string\"; \n</code></pre> <p>Output:</p> <pre><code>Number of Characters\n12 \n Substring\nHel \n Lowercase string\nhello world! \n Uppercase string\nHELLO WORLD! \n Concatenated string\nhelloworld! \n Repeated string\nHello world!Hello world!Hello world!\n</code></pre>"},{"location":"self/postgresql/Stored_Procedures/sp/","title":"Sp","text":"<p><code>Note:</code> PostgreSQL does not support nested procedures, meaning a procedure can\u2019t be called within itself or another already executed procedure.</p> <ul> <li>stored procedures and functions improve database performance by allowing for pre-compiled (like materialized views) and optimized execution of frequently used queries.</li> </ul> <pre><code>CREATE PROCEDURE update_employee(employee_id int, job_title text)\nLANGUAGE plpgsql\nAS $$\nBEGIN \n   UPDATE Employee \n   SET title = $2\n   WHERE id = $1;\nEND; $$;\n\nCALL update_employee(1, 'Marketing Manager');\n</code></pre> <pre><code>\\df\n\\echo '\\n Print source code of stored procedure'\n\\sf update_employee\n</code></pre>"},{"location":"self/postgresql/Table/tbl_alter/","title":"Tbl alter","text":"<pre><code>SELECT '\\n' AS \" \"; -- Adding new line\n\nALTER TABLE\n  Customer\nADD COLUMN IF NOT EXISTS -- DROP COLUMN phone_number; -- DROP COLUMN IF EXISTS phone_number;\n  phone_number VARCHAR(10);\n</code></pre> <pre><code>/*\nALTER TABLE\n  Orders\nALTER COLUMN\n  status\nSET \n  DEFAULT 'pending';\n*/\n</code></pre> <pre><code>/*\nALTER TABLE\n  Orders\nALTER COLUMN\n  status \n DROP DEFAULT;\n*/\n</code></pre> <pre><code>/*\nALTER TABLE\n  Customer RENAME COLUMN phone_number TO contact_number;\n*/  \n</code></pre>"},{"location":"self/postgresql/Table/tbl_constraint/","title":"Tbl constraint","text":"<pre><code>ALTER TABLE\n  Customer\nADD\n  CONSTRAINT customer_pk PRIMARY KEY (id); -- Adding PRIMARY KEY\n\nALTER TABLE\n  Customer\nADD\n  CONSTRAINT unique_email UNIQUE (email); -- Adding UNIQUE constraint\n\nALTER TABLE\n  Customer\nALTER COLUMN\n  id\nSET\n  NOT NULL; -- Adding NOT NULL constraint\n\nALTER TABLE \n  Customer \nALTER COLUMN \n  dob \nSET \n  DEFAULT '2000-01-01'; -- Adding DEFAULT contstraint\n\nALTER TABLE\n  Customer\nADD\n  CONSTRAINT check_customer_id CHECK (id &gt; 0); -- Adding CHECK constraint\n\nALTER TABLE\n  Users\nADD\n  CONSTRAINT user_customer_fk FOREIGN KEY (id) REFERENCES Customer (id); \n--- Adding FOREIGN KEY constraint\n</code></pre> <pre><code>\\d Customer \n</code></pre> <pre><code>SELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>\\d Users\n</code></pre> <pre><code>CREATE TABLE Customer (\n    id INTEGER, --PRIMARY KEY \n    name VARCHAR(255), \n    dob DATE CHECK (dob &gt; '1900-01-01'), --DEFAULT '2000-01-01'\n    PRIMARY KEY (id, name)\n);\n</code></pre>"},{"location":"self/postgresql/Table/tbl_create/","title":"Tbl create","text":"<pre><code>CREATE TABLE Product (\n    id SERIAL,\n    name VARCHAR(255),\n    description TEXT,\n    price MONEY,\n    discount DECIMAL(5,2),\n    in_stock BOOLEAN,\n    inventory INTEGER,\n    m_date DATE, -- manufacturing date     \n    colors VARCHAR(20)[], -- Array of strings, each having max. length of 20 chars.\n    spec JSON,\n    status status_type\n);\n</code></pre> <pre><code>INSERT INTO Product (name, description, price, discount, in_stock, inventory,  m_date, colors, spec, status)\nVALUES ('iPhone', 'A smartphone', 999.90, 10, TRUE, 10, '01-01-2022', ARRAY['red','blue'], '{\"display\": \"retina\", \"camera\": \"48MP\", \"memory\":\"128GB\"}', 'active');\n\nSELECT '\\n\\nA sample record\\n\\n';\nSELECT * FROM Product;\n</code></pre>"},{"location":"self/postgresql/Table/tbl_drop/","title":"Tbl drop","text":"<pre><code>SELECT '\\n' AS \" \"; -- Adding new line\nDROP TABLE IF EXISTS Customer;\n</code></pre>"},{"location":"self/postgresql/Table/tbl_foreign/","title":"Tbl foreign","text":"<pre><code>DROP TABLE IF EXISTS \"Order\";\nCREATE TABLE \"Order\"(\n    id INTEGER PRIMARY KEY,\n    customer_id INTEGER, \n    product_id INTEGER, \n    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES Customer(id,name)\n)\n</code></pre>"},{"location":"self/postgresql/Table/tbl_insert/","title":"Tbl insert","text":"<pre><code>--CREATE TYPE status_type AS ENUM ('active', 'inactive');\nCREATE TABLE Users (\n    id serial PRIMARY KEY,\n    name VARCHAR(255),\n    status status_type\n);\n</code></pre> <pre><code>INSERT INTO Users (name, status)\nVALUES ('John', 'active');\nSELECT * FROM Users;\n</code></pre>"},{"location":"self/postgresql/Table/tbl_rename/","title":"Tbl rename","text":"<pre><code>SELECT '\\n' AS \" \"; -- Adding new line \nALTER TABLE Customer RENAME TO Client; \n</code></pre>"},{"location":"self/postgresql/Table/tbl_truncate/","title":"Tbl truncate","text":"<pre><code>TRUNCATE TABLE Employee;\n</code></pre> <p><code>Note:</code> Be careful when using this statement, as it can\u2019t be undone. If we want to remove only certain rows from a table, it\u2019s better to use the DELETE statement with a WHERE clause.</p>"},{"location":"self/postgresql/Table/Cascade/tbl_delete_cascade/","title":"Tbl delete cascade","text":"<pre><code>ALTER TABLE \n    MANAGER \nADD \n    CONSTRAINT fk_emp_manager FOREIGN KEY (emp_id) REFERENCES Employee (id)\n    ON DELETE CASCADE;\n</code></pre> <pre><code>/*DELETE FROM\n  Employee\nWHERE\n  id = 1;\n  */\n  /*\n  DELETE FROM Employee;\n  */\n</code></pre>"},{"location":"self/postgresql/Table/Cascade/tbl_update_cascade/","title":"Tbl update cascade","text":"<pre><code>ALTER TABLE Manager \n  ADD CONSTRAINT emp_mgr_fk FOREIGN KEY (emp_id) REFERENCES Employee (id)\n  ON UPDATE CASCADE;\n</code></pre> <pre><code>UPDATE\n  Employee\nSET\n  salary = 15000 * 1.2\nWHERE\n  name = 'John' RETURNING salary;\n</code></pre> <pre><code>/*\nSELECT 'Before updation \\n' AS \" \";\n\nSELECT * FROM MANAGER;\nSELECT '\\n' AS \" \";\n\nSELECT * FROM EMPLOYEE;\nSELECT '\\n' AS \" \";\n\nUPDATE\n  Employee\nSET\n  id = 4\nWHERE\n  id = 1;\n\nSELECT 'After updation \\n' AS \" \";\n\nSELECT * FROM MANAGER;\nSELECT '\\n' AS \" \";\n\nSELECT * FROM EMPLOYEE;\n*/\n</code></pre>"},{"location":"self/postgresql/Transactions/transactions/","title":"Transaction","text":"<p>This is useful for ensuring the integrity of the data and reducing the risk of errors in our database. A SAVEPOINT can also label a specific transaction point like a bookmark, which can be used to partially roll back the transaction to this specific point later.</p>"},{"location":"self/postgresql/Transactions/transactions/#transaction-isolation-level","title":"Transaction isolation level","text":"<p>The transaction isolation level determines how much information is shared between different transactions.</p> <p>A dirty read is a transaction that allows reading data that has been modified but not committed yet. This can lead to inconsistencies in data, so it\u2019s not recommended for use in production environments.</p> <p>In a nonrepeatable read, a transaction can read the same data multiple times but see different values each time. This can also lead to problems in the database, so it\u2019s best to avoid this type of transaction if possible.</p> <p>A phantom read occurs when data is read twice and different rows have been read in between. This can cause unexpected results, so it\u2019s best to avoid this mode of transaction.</p> <p>As per SQL standards, there are four different transaction isolation levels, as given below:</p> <ul> <li> <code>READ UNCOMMITTED:</code> This allows dirty reads. It can lead to data inconsistencies, so it\u2019s usually not recommended. However, PostgreSQL ensures there are no dirty reads in a transaction, even in this mode. Having a more restrictive isolation mode is allowed as per SQL standards.</li> <li> <code>READ COMMITTED:</code> This prohibits reading data that has been modified but not yet committed. It provides a higher level of consistency for our data. This is also the default level of consistency in a PostgreSQL database.</li> <li> <code>REPEATABLE READ:</code> This allows reading data that has been modified but not yet committed. It guarantees that we see the same results if we run the same query multiple times. In PostgreSQL, this mode doesn\u2019t allow phantom reads.</li> <li> <code>SERIALIZABLE:</code> This guarantees that we\u2019ll see the same results if we run the same query multiple times, preventing other transactions from modifying our data. It\u2019s the most restrictive of all the isolation levels.</li> </ul> <p>The more restrictive the isolation level, the less information is shared. This can be useful for ensuring that data is not corrupted or changed by other transactions. In autocommit mode, PostgreSQL will automatically commit any changes made to the database when we issue a query. This can be helpful to quickly test out changes, but it\u2019s recommended to use transactions instead of the autocommit mode. </p>"},{"location":"self/postgresql/Transactions/transactions/#lock-resources","title":"Lock resources","text":"<p>Locks are a special type of mechanism that can control access to data between multiple processes. In PostgreSQL, locks can be applied at the table, row, or page level. When we acquire a lock on a resource within a single transaction, it will remain in place until the transaction is committed or rolled back. This ensures that only one process can modify the data at a time.</p> <p>The syntax for table-level locking is given below:</p> <pre><code>LOCK TABLE &lt;table_name&gt; IN EXCLUSIVE MODE;\n</code></pre> <p>The syntax for the LOCK command</p> <p>Here,  is the name of the table that we want to acquire a lock on and  is the type of lock we request. Various options for locking mode include ACCESS SHARE, ROW SHARE, ROW EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, and ACCESS EXCLUSIVE. <p>PostgreSQL uses the concept of shared and exclusive locks. When we acquire an exclusive lock on a resource, no other process can acquire any locks on that resource until it\u2019s released again. This means that only one process can modify the resource at a time.</p> <p>We can acquire an exclusive lock on the table to prevent any other processes from modifying the table, allowing us to make your changes without interference. After our changes are done, we can release the lock so that other processes can access the table again.</p> <p>However, when we acquire a shared lock on a resource, other processes can also acquire shared locks on that resource. This allows multiple processes to read the data simultaneously without locking each other out. Whether we need exclusive or shared locks will depend on our specific application requirements and how the data is used.</p> <p>One common scenario where shared locks can be helpful is when we need to read data from a table, but we don\u2019t want other processes to modify the data until we\u2019re done. We can use a shared lock to prevent other processes from modifying the data until the current process has finished reading it. This allows working with the data concurrently without locking other processes out.</p> <p>In general, it\u2019s recommended that we use shared locks whenever possible, as they\u2019re less restrictive than exclusive locks and provide greater concurrency. However, there may be times when we need to use exclusive locks to ensure data integrity or enforce other business rules.</p> <p><code>Note:</code> There\u2019s no UNLOCK statement in PostgreSQL, but we can release the lock by committing or rolling back our transaction. Once a transaction ends, all the locks obtained in the transaction are released automatically.</p> <p>Table-level locking in PostgreSQL helps prevent data inconsistencies and ensures that all the processes can access up-to-date data. However, there can also be some drawbacks to using this type of locking. For example, it can sometimes cause performance issues, particularly if many processes attempt to modify the same data simultaneously. As such, it\u2019s important to choose a lock mode carefully and minimize any potential negative impacts.</p>"},{"location":"self/postgresql/Transactions/transactions/#deadlocks","title":"Deadlocks","text":"<p>A deadlock is a situation where two or more processes are locked in an endless loop, unable to proceed until one of the processes terminates. This typically occurs when there\u2019s a cyclical dependency between two or more processes that both need to access the same data. To avoid deadlocks, it\u2019s important to understand the underlying causes and take steps to prevent them from occurring.</p> <p>Some of the strategies for preventing deadlocks are as follows:</p> <ul> <li> Using transactions to lock data in smaller chunks.</li> <li> Ensuring that processes don't hold locks for too long.</li> <li> Using dedicated deadlock detection tools to identify and resolve deadlocks as they occur .</li> </ul> <p>But ultimately, the best way to prevent deadlocks is to be aware of their potential causes and take steps to mitigate the associated risks.</p>"},{"location":"self/postgresql/Transactions/trx_lock/","title":"Trx lock","text":"<pre><code>LOCK TABLE &lt;table_name&gt; IN EXCLUSIVE MODE;\n</code></pre>"},{"location":"self/postgresql/Transactions/trx_rollback/","title":"Trx rollback","text":"<pre><code>\\echo '&gt;&gt; Initial value'\n\nSELECT * FROM Account;\nSELECT '\\n' AS \" \"; -- Adding new line\n\nBEGIN; \n\nUPDATE Account SET balance = balance + 100::money;\n\n\\echo '&gt;&gt; Updating the row'\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSELECT * FROM Account;\nSELECT '\\n' AS \" \"; -- Adding new line\n\n\\echo '&gt;&gt; Rolling back the update transaction'\nSELECT '\\n' AS \" \"; -- Adding new line\n\nROLLBACK;\n</code></pre> <pre><code>SELECT * FROM Account;\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre>"},{"location":"self/postgresql/Transactions/trx_savepoint/","title":"Trx savepoint","text":"<pre><code>BEGIN; \nINSERT INTO Account\nVALUES ('100-0000-0001', 'Timothy Wright', 1000);\n\nSAVEPOINT trans_point1;\n\n\\echo '&gt;&gt; Updating the row'\nSELECT '\\n' AS \" \"; -- Adding new line\n\nUPDATE Account SET balance = balance + 100::money;\n\nSELECT * FROM Account;\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSAVEPOINT trans_point2;\n\n\\echo '&gt;&gt; Deleting the row'\nSELECT '\\n' AS \" \"; -- Adding new line\n\nDELETE FROM Account WHERE account_number='100-0000-0001'; \n\nSELECT * FROM Account;\nSELECT '\\n' AS \" \"; -- Adding new line\n\n\\echo '&gt;&gt; Rolling back to trans_point2'\nSELECT '\\n' AS \" \"; -- Adding new line\n\nROLLBACK TO SAVEPOINT trans_point2;\n\nSELECT * FROM Account;\nSELECT '\\n' AS \" \"; -- Adding new line\n\n\\echo '&gt;&gt; Rolling back to trans_point1'\nSELECT '\\n' AS \" \"; -- Adding new line\n\nROLLBACK TO SAVEPOINT trans_point1;\n</code></pre> <pre><code>SELECT * FROM Account;\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre>"},{"location":"self/postgresql/Transactions/trx_serializable/","title":"Trx serializable","text":"<pre><code>SELECT * FROM Account;\nSELECT '\\n' AS \" \"; -- Adding new line\n\n\\echo 'Autocommit mode -&gt;' :AUTOCOMMIT\nSELECT '\\n' AS \" \"; -- Adding new line\n\nSHOW default_transaction_isolation;\nSELECT '\\n' AS \" \"; -- Adding new line\n\n\\echo 'Timothy transfers $100 to Mary'\nSELECT '\\n' AS \" \"; -- Adding new line \n\n\\echo 'Begin transaction with isolation level - serializable'\nSELECT '\\n' AS \" \"; -- Adding new line \nBEGIN ISOLATION LEVEL SERIALIZABLE;\n\nSHOW TRANSACTION ISOLATION LEVEL;\nSELECT '\\n' AS \" \"; -- Adding new line\n\n\\echo 'Debit $100 from the account of Timothy'\nSELECT '\\n' AS \" \"; -- Adding new line \nUPDATE\n  Account\nSET\n  balance = balance - 100::money\nWHERE\n  account_number = '100-0000-0001';\n\n\\echo 'Credit $100 to the account of Mary'\nSELECT '\\n' AS \" \"; -- Adding new line \nUPDATE\n  Account\nSET\n  balance = balance + 100::money\nWHERE\n  account_number = '200-0000-0002'; \n\n\\echo 'Transaction completed'\nSELECT '\\n' AS \" \"; -- Adding new line \nCOMMIT;\n\nSELECT * FROM Account;\n</code></pre> <p>Output:</p> <pre><code>account_number  customer_name   balance\n100-0000-0001   Timothy Wright  $1,000.00\n200-0000-0002   Mary Baker  $500.00 \n\n Autocommit mode -&gt; on \n default_transaction_isolation\nread committed \n Timothy transfers $100 to Mary \n Begin transaction with isolation level - serializable \n transaction_isolation\nserializable \n Debit $100 from the account of Timothy \n Credit $100 to the account of Mary \n Transaction completed \n account_number customer_name   balance\n100-0000-0001   Timothy Wright  $900.00\n200-0000-0002   Mary Baker  $600.00\n</code></pre>"},{"location":"self/postgresql/Triggers/trg_drop/","title":"Trg drop","text":"<pre><code>\\echo 'Before executing DROP TRIGGER statement'\n</code></pre> <pre><code>SELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>\\dS Product\n</code></pre> <pre><code>SELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>DROP TRIGGER product_insert_trg ON Product;\n</code></pre> <pre><code>\\echo 'After executing DROP TRIGGER statement'\n</code></pre> <pre><code>SELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>\\dS Product\n</code></pre>"},{"location":"self/postgresql/Triggers/trg_update_on_view/","title":"Trg update on view","text":"<p>An INSTEAD OF trigger would be created on a view that\u2019s not inherently updatable. </p> <pre><code>CREATE VIEW Product_view AS\n    SELECT \n        id, name, price\n    FROM\n        Product;\n</code></pre> <pre><code>CREATE FUNCTION update_price() RETURNS TRIGGER \nLANGUAGE plpgsql\nAS $$ \nBEGIN\n    UPDATE\n    product\n    SET\n    modification_date = NOW(), \n    prev_price = OLD.price, \n    price = NEW.price\n    WHERE\n    id = NEW.id;\n\n    RETURN NEW;\nEND;\n$$;\n\nCREATE TRIGGER product_update_trg INSTEAD OF\nUPDATE\n  ON Product_view FOR EACH ROW EXECUTE PROCEDURE update_price();\n\nUPDATE Product_view SET price = 999 WHERE id = 1;\n\nSELECT '\\n' AS \" \"; -- Adding Newline \n</code></pre> <pre><code>SELECT id, name, price, modification_date AS \"modified\", prev_price FROM Product; \n</code></pre>"},{"location":"self/postgresql/Triggers/trg_update_table/","title":"Trg update table","text":"<p>NEW.id refers to the new value of ID for each updated row. The NEW is referred to as a reference variable because it refers to the data that\u2019s being updated. </p> <pre><code>CREATE OR REPLACE FUNCTION update_creation_date() RETURNS TRIGGER \nLANGUAGE plpgsql\nAS $$\nBEGIN\n  UPDATE Product SET creation_date = current_timestamp WHERE id = NEW.id;\n  RETURN NEW;\nEND;$$;\n\nCREATE TRIGGER product_insert_trg\nAFTER INSERT ON Product\n  FOR EACH ROW EXECUTE PROCEDURE update_creation_date();\n</code></pre> <pre><code>INSERT INTO\n  Product (name, price)\nVALUES\n  ('iPhone', 799.99),\n  ('S7 Edge', 849.99),\n  ('Mate 9', 599.99),\n  ('Moto Z', 599.99),\n  ('Lumia', 499.99);\n\nSELECT * FROM Product;\n</code></pre>"},{"location":"self/postgresql/Triggers/trigger/","title":"Trigger","text":"<p>Automating actions in response to database operations, allowing for efficient maintenance of data integrity and performance of cascading actions and even send notifications. </p> <p>Triggers can\u2019t be called or executed directly\u2014they can only be fired in response to a specific event.</p>"},{"location":"self/postgresql/Types/Collection/array/","title":"Array","text":"<pre><code>CREATE TABLE Person (\n   id SERIAL PRIMARY KEY,\n   hobbies TEXT[]\n);\n\nINSERT INTO\n  Person (hobbies)\nVALUES\n  (ARRAY ['reading', 'hiking', 'cooking']);\n\nSELECT hobbies[1] FROM Person;\n</code></pre> <p>Output:</p> <pre><code>hobbies\nreading\n</code></pre>"},{"location":"self/postgresql/Types/Collection/array/#array-operators-and-functions","title":"Array Operators and Functions","text":"<pre><code>Operators/Functions\nDescription\nARRAY[] \nCreates an array with the given elements \n|| \n</code></pre> <pre><code>Concatenates two arrays \n&amp;&amp; \n\nIntersects two arrays \n= \n\nChecks if two arrays are equal\narray_append(anyarray, anyelement): \n\nAdds a new element to the end of an array\n</code></pre> <p>Adds a new element to the beginning of an array  <pre><code>array_prepend(anyarray, anyelement)\n</code></pre></p> <p>Removes all occurrences of a specific element from an array </p> <pre><code>array_remove(anyarray, anyelement)\narray_length(anyarray)\n</code></pre> <p>Returns the number of elements in an array.</p>"},{"location":"self/postgresql/Types/Collection/enum/","title":"Enum","text":"<pre><code>CREATE TYPE status_type AS ENUM ('active', 'inactive');\n</code></pre> <pre><code>\\dT\n</code></pre>"},{"location":"self/postgresql/Types/Geometric/typ_geometric/","title":"Typ geometric","text":"<p>The point data type is used to store a point in geometric space in PostgreSQL. This is commonly used for storing geospatial data.</p> <pre><code>CREATE TABLE  parks (\n   id SERIAL PRIMARY KEY, \n   name TEXT, \n   boundary POLYGON\n ); \n\nINSERT INTO\n  parks (name, boundary)\nVALUES\n  (\n    'Central Park',\n    '((-73.9677, 40.7936),  (-73.9668, 40.7911), (-73.9612, 40.7923), \n     (-73.9606, 40.7941), (-73.9645, 40.7954), (-73.9677, 40.7936))'\n  );\n\nSELECT * FROM parks;\n</code></pre>"},{"location":"self/postgresql/Types/JSON/json_funxtion/","title":"Json funxtion","text":"<pre><code>SELECT\n  json_array_length('[\"Jane\", \"John\"]') AS \"Number of fields\";\n\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>SELECT * FROM\n  json_each(\n    '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'\n  );\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>SELECT * FROM\n  json_each_text(\n    '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'\n  );\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>SELECT \n  json_object(\n    '{\"street\", \"city\", \"state\"}', '{\"123 Main St\", \"New York\", \"NY\"}'\n  ) AS \"JSON object\";\n\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>SELECT \n  jsonb_object(\n    '{\"street\", \"city\", \"state\"}', '{\"123 Main St\", \"New York\", \"NY\"}'\n  ) AS \"JSONB object\";\n</code></pre>"},{"location":"self/postgresql/Types/JSON/json_operators/","title":"Json operators","text":"<pre><code>SELECT \n  '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'::jsonb \n  AS \"Address\";\n\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>SELECT \n  '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'::jsonb \n  @&gt; '{\"state\": \"NY\"}'::jsonb AS \"Is NY state?\";\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre> <pre><code>SELECT \n  '{\"state\": \"WA\"}'::jsonb &lt;@\n  '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'::jsonb \nAS \"Is WA state?\";\n</code></pre> <p>SELECT '\\n' AS \" \"; -- Adding new line</p> <p>SELECT    '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'::jsonb    ? 'city'  AS \"contains key city?\";</p> <p>SELECT '\\n' AS \" \"; -- Adding new line</p> <p>SELECT    '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'::jsonb    ?&amp; array['street', 'city', 'state']  AS \"contains ALL address fields?\";</p> <p>SELECT '\\n' AS \" \"; -- Adding new line</p> <p>SELECT    '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'::jsonb    ?| array['street', 'city', 'state', 'zipcode']  AS \"contains ANY address fields\";</p> <p>SELECT '\\n' AS \" \"; -- Adding new line</p> <p>SELECT    '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'::jsonb   || '{\"zipcode\": \"A2N9ZJ\"}'::jsonb AS \"address with zipcode\";</p> <p>SELECT '\\n' AS \" \"; -- Adding new line</p> <p>SELECT    '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\"}'::jsonb   - 'state' AS  \"address without state\";</p> <p>SELECT '\\n' AS \" \"; -- Adding new line</p> <p>SELECT    '[\"Jane\", \"John\"]'::jsonb - 1    AS \"removing item at index 1 from the list\";</p> <p>SELECT    '[\"Jane\", {\"Mary\":1, \"Steve\":2}]'::jsonb #- '{1, \"Steve\"}'    AS \"removing item at specified path\";</p>"},{"location":"self/postgresql/Types/JSON/json_select/","title":"Json select","text":"<pre><code>CREATE TABLE Person (\n    id SERIAL PRIMARY KEY,\n    address JSON\n);\n\nINSERT INTO \n  Person (address) \nVALUES \n  (\n    '{\"street\": \"123 Main St\", \"city\": \"New York\", \"state\": \"NY\", \"zipcode\": \"A2N9ZJ\"}'\n  ); \n</code></pre> <pre><code>SELECT address -&gt; 'city' AS \"City\" FROM Person;\nSELECT '\\n' AS \" \"; -- Adding new line\nSELECT JSON(address) AS \"Address\" FROM Person;\nSELECT '\\n' AS \" \"; -- Adding new line\nSELECT address -&gt;&gt; 'city' AS \"City\" FROM Person;\nSELECT '\\n' AS \" \"; -- Adding new line\n</code></pre>"},{"location":"self/postgresql/Types/MACADDR_BIT/typ_mac_address/","title":"Typ mac address","text":"<pre><code>CREATE TABLE Users (\n  user_id SERIAL PRIMARY KEY,\n  user_name VARCHAR(255),\n  user_ip_address INET,\n  user_mac_address MACADDR,\n  user_location VARCHAR(255),\n  user_status BIT\n);\n</code></pre> <pre><code>INSERT INTO\n  Users (\n    user_name,\n    user_ip_address,\n    user_mac_address,\n    user_location, \n    user_status\n  )\nVALUES\n  (\n    'John Doe',\n    '192.168.0.1',\n    '00:11:22:33:44:55',\n    'California', \n    B'1'\n  ),\n  (\n    'Jane Smith',\n    '10.0.0.1',\n    '01:02:03:04:05:06',\n    'New York',\n    B'0'\n  );\n\nSELECT * FROM users;\n</code></pre>"},{"location":"self/postgresql/View/vm_ceate_drop/","title":"Vm ceate drop","text":"<pre><code>CREATE VIEW OrderHistory AS \nSELECT \n    Customer.name, \n    Customer_order.order_date \nFROM \n    Customer INNER JOIN Customer_order \n    ON Customer.order_id = Customer_order.id;\n\nSELECT * FROM OrderHistory;\n</code></pre> <pre><code>DROP VIEW OrderHistory;\n--\\d+ OrderHistory\n</code></pre>"},{"location":"self/postgresql/View/vm_materialized/","title":"Vm materialized","text":"<p>Having a materialized view can be beneficial in cases where the underlying tables and data used in the view can change frequently because the materialized view will only need to be refreshed periodically rather than after every change to the base tables. It can also be helpful in cases where the view involves complex queries, because having the results pre-computed and stored can improve performance. However, it\u2019s important to keep in mind that materialized views don\u2019t update automatically and must be refreshed manually. They also can\u2019t be used for the modification of data. Therefore, it\u2019s important to carefully consider if a materialized view is the best solution for a particular query before implementing it.</p> <p>The queries above create a materializable view of customer names and their corresponding order dates, which can then be refreshed to update the view with new data. The WITH NO DATA option is important because it prevents any actual data from being inserted into the view. This can improve query performance as the data is already stored in the materializable view rather than having to constantly re-query the underlying tables. </p> <p>Materialized views actually store the results in separate database objects.</p> <p>The table below summarizes the differences between these two views:</p> <pre><code>Aspect  Regular view    Materialized view\nData storage    Not required    Required\nData freshness  Always up-to-date data  Stale data possible\nMaintenance     Not required    Required\nPerformance     Slower  Faster\n</code></pre> <pre><code>CREATE MATERIALIZED VIEW Mat_OrderHistory AS\nSELECT\n  Customer.name,\n  Customer_order.order_date\nFROM\n  Customer INNER JOIN Customer_order \n  ON Customer.order_id = Customer_order.id WITH NO DATA;\n</code></pre> <pre><code>\\d+ Mat_OrderHistory \n</code></pre> <pre><code>REFRESH MATERIALIZED VIEW Mat_OrderHistory;\n</code></pre>"},{"location":"self/postgresql/View/vm_recursive/","title":"Vm recursive","text":"<p>One example of where a recursive view can be useful is in querying an organizational hierarchy. Here, the query can show the hierarchical relationship between employees and their managers by referencing the view within itself.</p> <p>The view created above can be used to find all the employees and their respective managers in the company hierarchy. This view can then be queried to find the manager of a specific employee or to show the entire company hierarchy. </p> <pre><code>CREATE RECURSIVE VIEW Org_chart(id, mgr_id, name, level) as (\n  SELECT\n    id, mgr_id, name, 1\n  FROM\n    employee\n  WHERE\n    mgr_id IS NULL\n  UNION ALL\n  SELECT\n    e.id, e.mgr_id, e.name, level + 1\n  FROM\n    employee e INNER JOIN Org_chart o \n    ON o.id = e.mgr_id\n);\n\nSELECT * FROM Org_chart;\n</code></pre>"},{"location":"self/postgresql/View/vm_replace/","title":"Vm replace","text":"<p>Any changes made through the view will also be reflected in the underlying tables.  The update view can be a useful tool for managing and organizing our data. Just be sure to follow the requirements and use caution when making updates. As always, keep backing up the data before making any updates to prevent any data loss.</p> <pre><code>CREATE OR REPLACE VIEW Update_OrderHistory AS\nSELECT\n  Customer.name,\n  Customer_order.order_date\nFROM\n  Customer INNER JOIN Customer_order \n  ON Customer.order_id = Customer_order.id;\n</code></pre> <pre><code>\\d+ Update_OrderHistory\n</code></pre>"},{"location":"self/postgresql/View/vm_temp/","title":"Vm temp","text":"<p>Temporary views only exist during the current session and aren\u2018t accessible to other users or sessions. Once the session ends, the temporary view is automatically dropped. Also, any changes made to the temporary view don\u2019t affect the underlying tables. </p> <pre><code>CREATE TEMP VIEW TempOrderHistory AS \nSELECT \n  Customer.name, Customer_order.order_date \nFROM \n  Customer INNER JOIN Customer_order \n  ON Customer.order_id = Customer_order.id;\n</code></pre> <pre><code>\\d+ TempOrderHistory\n</code></pre>"},{"location":"self/programming/programming/","title":"Programming","text":"<ul> <li> <p>Design Patterns</p> </li> <li> <p>OOP</p> </li> <li> <p>Microservices</p> </li> <li> <p>Reactive programming</p> </li> </ul>"},{"location":"self/programming/OOP/cSharp/csharp_oop/","title":"Csharp oop","text":"<ul> <li> <p>Base</p> <ul> <li>Relationship</li> <li>Class</li> <li>Constructor</li> <li>Variables</li> </ul> </li> <li> <p>Isolation</p> </li> <li> <p>Polymorphism</p> <ul> <li>Overload</li> <li>Samples</li> <li>Virtual</li> </ul> </li> <li> <p>Inheritance</p> <ul> <li>SuperClass&amp;Interface </li> </ul> </li> <li> <p>Encapsulation </p> </li> <li> <p>Abstraction </p> <ul> <li>Interface </li> <li>Abstract </li> </ul> </li> </ul>"},{"location":"self/programming/OOP/cSharp/Abstraction/abstract/","title":"Rules to be Followed","text":"<ul> <li> An abstract method cannot be declared with the private or sealed modifier as it has to be implemented in some other class.</li> <li> Abstract methods are implicitly virtual so we cannot use the keyword virtual in their declaration. An abstract class cannot be instantiated i.e. one cannot create an object of an abstract class.</li> <li> To use the members of an abstract class, it needs to be inherited.</li> <li> The class which inherits from the abstract class must implement all the abstract members declared in the parent abstract class.</li> <li> An abstract class can have everything else , i.e. constructors, static variables and methods, the same way as a normal C# class has them.</li> <li> An abstract class can inherit from both abstract and non-abstract classes.</li> <li> A non-abstract class can inherit from only one abstract class.</li> </ul> <pre><code>abstract class EDM {\n\n  public EDM() {\n    //Parameter-less constructor\n  }\n  public abstract void Transact();\n\n  public void Dispense() {\n    Console.WriteLine(\"{0} is dispensing the product!\",this.GetType().Name);\n    //this.GetType().Name is an inbuilt functionality of C#\n    //to get the class name from which the method is being called\n  }\n\n}\n\nclass CardVendingMachine : EDM {\n\n  public override void Transact() {\n    Console.WriteLine(\"I accept cards only!\");\n  }\n\n}\n\nclass CashVendingMachine : EDM {\n\n  public override void Transact() {\n    Console.WriteLine(\"I accept cash only!\");\n  }\n\n}\n\nclass HybridVendingMachine : EDM {\n\n  public override void Transact() {\n    Console.WriteLine(\"I accept both cards and cash!\");\n  }\n\n}\n\nclass Demo {\n\n  public static void Main(string[] args) {\n    // Creating the objects\n    EDM cardVendy = new CardVendingMachine();  \n    EDM cashVendy = new CashVendingMachine();\n    EDM hybridVendy = new HybridVendingMachine();\n\n    cardVendy.Dispense();    // Calling methods from CardVendingMachine\n    cardVendy.Transact();\n    Console.WriteLine();\n    cashVendy.Dispense();   // Calling methods from CashVendingMachine\n    cashVendy.Transact();    \n    Console.WriteLine();\n    hybridVendy.Dispense(); // Calling methods from HybridVendingMachine\n    hybridVendy.Transact();  \n\n  }\n\n}\n</code></pre> <p><code>Output</code></p> <pre><code>CardVendingMachine is dispensing the product!\nI accept cards only!\n\nCashVendingMachine is dispensing the product!\nI accept cash only!\n\nHybridVendingMachine is dispensing the product!\nI accept both cards and cash!\n</code></pre> <pre><code>// Abstarct Book Class\nabstract class Book {\n\n  // Private Fields\n  private string _name;\n  private string _author;\n  private string _price;\n\n  protected string Name{\n    get {return this._name;}\n  }\n   protected string Author{\n    get {return this._author;}\n  }\n   protected string Price{\n    get {return this._price;}\n  }\n\n  // Parameterized Constructor\n  public Book(string name, string author, string price) {\n    this._name = name;\n    this._author = author;\n    this._price = price;\n  }\n\n  // Abstract Method\n  public abstract string GetDetails();\n\n}\n\n// Class MyBook extending Book Class\nclass MyBook : Book {\n\n  // Parameterized Constructor\n  public MyBook(string name, string author, string price) \n    : base(name, author, price)\n  { }\n\n  // Overrideing the GetDetails Abstract Method of the Base Class\n  public override string GetDetails() {\n   return Name + \", \" + Author + \", \" + Price;\n  }\n\n}\n\nclass Demo {\n\n  public static void Main(string[] args) {\n    Book myBook = new MyBook(\"Harry Potter\", \"J.k. Rowling\", \"100\");\n    Console.WriteLine(myBook.GetDetails());\n\n  }\n\n}\n</code></pre> <p><code>Output:</code> Harry Potter, J.k. Rowling, 100</p>"},{"location":"self/programming/OOP/cSharp/Abstraction/abstraction/","title":"Abstraction","text":"<p>\u201cWhat an object does?\u201d rather than \u201cHow it does?\u201d</p> Interfaces Abstract Classes Can have abstract member(s) only Can have concrete (non-abstract) &amp; abstract member(s) Support multiple inheritance Don\u2019t support multiple inheritance All members are public abstract by default Can\u2019t have constructors Can have members like non-abstract classes Constructors can be defined. All members are public virtual by default <pre><code>abstract class Beverage // Base abstract class Beverage\n{\n    private string _name;\n    private int _price;\n\n    public Beverage(string name, int price)\n    {\n        this._name = name;\n        this._price = price;\n    }\n\n\n    public int  Price{\n      get {\n        return this._price;\n      }\n    }\n    public string Name {\n\n      get {\n        return this._name;\n      }\n    }\n}\n\ninterface IEnergyDrink // Interface which imposes the tax method\n{\n    int CalculatePrice(int price);\n}\n\n\nclass RedBull : Beverage, IEnergyDrink // Redbull class inheriting from both\n{\n    public RedBull(int price)\n        : base(\"Redbull\", price) {}\n\n    // Any energy drink which implements IEnergyDrink will have to implement\n    public int CalculatePrice(int price)\n    {\n        return (base.Price + 1);\n    }\n\n    public void PrintDetails()\n    {\n        Console.WriteLine(\"The name of the drink is: \" + base.Name);\n        Console.WriteLine(\"The price of the drink is: \" + (CalculatePrice(base.Price)));\n\n    }\n\n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n        RedBull redBull = new RedBull(5);\n        redBull.PrintDetails();\n    }\n}\n</code></pre> <p>'Output'</p> <pre><code>The name of the drink is: Redbull\nThe price of the drink is: 6\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Abstraction/interface/","title":"Interface","text":"<ul> <li> Interfaces allow us to achieve 100% abstraction.</li> <li> An interface can extend from interfaces only, but not abstract class.</li> <li> An interface is just like an abstract class but only specifies the behavior that a class must implement.</li> <li> An interface can be thought of as a contract that a class has to fulfill while implementing that interface. According to this contract, the class that implements an interface has to implement all the abstract members declared in that very interface.</li> <li> All the members declared in an interface are by default public abstract so we do not need to write these modifiers while declaring the members.</li> <li> Just like an abstract class, an interface cannot be instantiated.</li> <li> An interface cannot have constructor(s) in it.</li> <li> A class cannot extend from more than one class, but it can implement any number of interfaces.</li> <li> An interface can inherit from another interface.</li> <li> An interface cannot be declared sealed or read-only.</li> <li> Interfaces can be used to achieve loose coupling in an application. This means that a change in one class doesn\u2019t affect the implementation of the other class. In other words, in an application, the code in a class becomes immutable and mutually exclusive since it doesn\u2019t get affected by changes in some other class.</li> <li> By using interfaces, one can break up complex designs and clear the dependencies between objects.</li> </ul> <pre><code>// Base abstract class\nabstract class EDM {\n\n  public EDM() {\n    //Parameter-less constructor\n  }\n  public abstract void Transact(bool successful);\n\n  public void Dispense() {\n    Console.WriteLine(\"{0} is dispensing the product!\",this.GetType().Name);\n    //this.GetType().Name is an inbuilt functionality of C#\n    //to get the class name from which the method is being called\n  }\n\n}\n\n// ICanPrint interface\ninterface ICanPrint {\n  // Public abstract method\n  void PrintReceipt();\n}\n\nclass CashVendingMachine : EDM, ICanPrint { //Inherits from EDM, Implements ICanPrint\n\n    public override void Transact(bool successful) {\n      if(successful) {\n        Console.WriteLine(\"The transaction was successfully completed!\");\n        PrintReceipt();\n      }\n      else Console.WriteLine(\"The transaction was unsuccessful!\");\n  }\n  // Implementing the abstract method from ICanPrint\n  public void PrintReceipt() {\n    Console.WriteLine(\"Printing your receipt...\");\n  }\n\n}\n\n\n\nclass Demo {\n\n  public static void Main(string[] args) {\n    // Creating the objects\n    EDM cashVendy = new CashVendingMachine();\n\n    cashVendy.Dispense();   // Calling methods from CashVendingMachine\n    cashVendy.Transact(true);    \n    Console.WriteLine();\n    cashVendy.Transact(false);  \n\n  }\n\n}\n</code></pre> <p>'Output'</p> <pre><code>CashVendingMachine is dispensing the product!\nThe transaction was successfully completed!\nPrinting your receipt...\n\nThe transaction was unsuccessful!\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Base/base/","title":"Base","text":"<ul> <li>Relationship</li> <li>Class</li> <li>Constructor</li> <li>Variables</li> </ul>"},{"location":"self/programming/OOP/cSharp/Base/class/","title":"Class","text":"<p>A class can be thought of as a user-defined blueprint or prototype used for creating objects.</p> <p>An object is an instance of a class.</p> <p>A constructor does not have a return type. Not even void!</p> <p>'new', it realizes that an object is being created and allocates a separate memory location for the object being created.</p> <p># Protection level  ## Private Modifier  private members can only be accessed by the methods of that class. A private member cannot be accessed directly from outside the class. a private field should follow snake_case/camelCase.</p>"},{"location":"self/programming/OOP/cSharp/Base/class/#public","title":"Public","text":"<p>members can be accessed from anywhere in the current assembly or any other assembly that references it. a public field should follow PascalCase.</p>"},{"location":"self/programming/OOP/cSharp/Base/class/#static-fields","title":"Static Fields","text":"<p>All the objects/instances of this class will share this field and its value.</p>"},{"location":"self/programming/OOP/cSharp/Base/class/#readonly","title":"Readonly","text":"<p>field must be assigned a value in the constructor of the class or during initialization. It cannot have its value changed once it is assigned.</p>"},{"location":"self/programming/OOP/cSharp/Base/class/#protect","title":"Protect","text":"<ul> <li>inheritance</li> </ul> <pre><code>class VendingMachine {\n\n  // Readonly variable manufacturer\n  public readonly string Manufacturer;\n\n  public VendingMachine(string s){\n     Manufacturer = s; // Assigning a value to readonly member\n     System.Console.WriteLine(\"Manufacturer is {0}\", Manufacturer);\n  }\n\n}\n\nclass Demo {\n\n   public static void Main() {\n\n      var vendingMachine = new VendingMachine(\"Vendy\"); // Manufacturer is Vendy\n      vendingMachine.Manufacturer = \"Some other company\"; // This will give an error\n   }\n\n}\n</code></pre> <p>Next sample:</p> <pre><code>class Calculator {\n\n  // Class fields\n  private double _num1;\n  private double _num2;\n\n  // Default Constructor\n  public Calculator(double num1, double num2) {\n    this._num1 = num1;\n    this._num2 = num2;\n  }\n\n  // Addition Method\n  public double Add() {\n    return this._num1 + this._num2;\n  }\n\n  // Subtraction Method\n  public double Subtract() {\n    return this._num2 - this._num1;\n  }\n\n  // Multiplication Method\n  public double Multiply() {\n    return this._num1 * this._num2;\n  }\n\n  // Divison Method\n  public double Divide() {\n    return this._num2 / this._num1;\n  }\n\n}\n\nclass Demo {\n\n  public static void Main(string[] args) {\n    Calculator calc = new Calculator(10, 94);\n\n    Console.WriteLine(\"Addition:\" + calc.Add());\n    Console.WriteLine(\"Subtraction:\" + calc.Subtract());\n    Console.WriteLine(\"Multiplication:\" + calc.Multiply());\n    Console.WriteLine(\"Division:\" + calc.Divide());\n  }\n\n}\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Base/class/#const-fields","title":"Const Fields","text":"<p>Const fields are assigned values during their initialization. Unlike readonly fields, values are not assigned in the constructor. </p> <p>Note: The value of a const field is known at compile time, whereas the value of a readonly field is computed when an instance is made.</p>"},{"location":"self/programming/OOP/cSharp/Base/constructor/","title":"Constructor","text":"<code>A constructor is a method that is called to create an instance or object of a class.</code> When there is no constructor implemented in a class, a default constructor is always implemented by the compiler automatically. When called, it creates an object in which the fields are initialized to their default values. <code>Calling a Constructor from Another Constructor</code> writing ':this()' <p>```c# class VendingMachine {</p> <p>private bool _onOff;   private int _count;   private int _capacity = 100;   private int _moneyCollected;   // A parameter-less constructor implemented   public VendingMachine() {      // Use of this keyword on the left side of = operator     this._onOff = false;     this._count = 0;     this._moneyCollected = 0;</p> <p>}   // A parameterized constructor implemented   public VendingMachine(bool onOff , int count) {      // Use of this keyword on the left side of = operator     this._onOff = onOff;     this._count = count;</p> <p>}</p> <p>public VendingMachine(bool onOff , int count, int moneyCollected)      : this(onOff,count) // Calling the above parameterized constructor   {     this._moneyCollected = moneyCollected;</p> <p>}</p> <p>// A simple print function   public void PrintFields(){ </p> <pre><code>Console.WriteLine(\"Is the machine turned on? {0}\", this._onOff);\nConsole.WriteLine(\"The count of products is: {0}\", this._count);\nConsole.WriteLine(\"The capacity of machine is: {0}\", this._capacity);\nConsole.WriteLine(\"The total money collected till now is: {0}\\n\", this._moneyCollected);\n</code></pre> <p>}</p> <p>}</p> <p>class Demo {</p> <p>public static void Main(string[] args) {     // Object created with parameterized constructor!     var vendingMachine1 = new VendingMachine(true,50,10);     // Object created with overloaded constructor!      var vendingMachine2 = new VendingMachine(true,5);     // Object created with parameter-less constructor!     var vendingMachine3 = new VendingMachine();     vendingMachine1.PrintFields();     vendingMachine2.PrintFields();     vendingMachine3.PrintFields();</p> <p>}</p> <p>}  ```</p>"},{"location":"self/programming/OOP/cSharp/Base/relationship/","title":"Association","text":"<p>In object-oriented programming, association is the common term used for both the has-a and part-of relationships but is not limited to these. When we say that two classes are associated with each other, this is a generic statement which means that we don\u2019t worry about the lifetime dependency between the objects of these classes.</p>"},{"location":"self/programming/OOP/cSharp/Base/relationship/#is","title":"IS","text":"<p>Wherever we come across an IS A relationship between objects, we can use inheritance.</p> <p></p>"},{"location":"self/programming/OOP/cSharp/Base/relationship/#part-of","title":"Part-Of","text":"<p>class B and class C have their own implementations, but their objects are part-of the implementation of Class A and are only created once a class A object is created. In a part-of relationship between two classes at least one class must be a part of the other but not both classes must be a part of the other.</p> <p></p>"},{"location":"self/programming/OOP/cSharp/Base/relationship/#composition","title":"Composition","text":"<p>Composition is the practice of accessing other class objects in your class. In such a scenario, the class which creates the object of the other class is known as the owner and is responsible for the lifetime of that owner object.</p> <p>Composition relationships are Part-of relationships where the part must be a constituent of the whole object and cannot exist independently of the whole. We can achieve composition by adding the classes together like parts in another class to make a complex unit.</p> <p>So, what makes the composition unique? In composition, the lifetime of the owned object depends on the lifetime of the owner.</p> <p>In followed example VendingMachine class is responsible for the lifetime of the owned objects, i.e.</p> <pre><code>class Display { // Display class\n\n  public Display(){} // Parameter-less constuctor\n  public void WelcomeMessage { // Method to welcome a customer\n    Console.WriteLine(\"Welcome to the Vending Machine\")\n  }\n  public void DisplayMethod() // Method to show the machine menu\n  {\n            Console.Write(@\"\n.-----.---------------------.\n|Press|       Action        |\n|-----|---------------------|\n|  1  |    Feed Money       |\n|  2  |    Select a Product |\n|  3  |    Get Change       |\n|  4  |    Quit             |\n'-----'---------------------'\");\n\n}\n\nclass KeyPad { // KeyPad class\n\n  public KeyPad(){} // Parameter-less constructor\n  public int readKey() // Mehtod to read the user input\n  {\n      string userInput;\n      userInput = Console.ReadLine();\n      /* Convert to integer type as the keypad should only have integer inputs */\n      int value;\n      if (int.TryParse(userInput, out value) &amp;&amp; value &gt; 0)\n      {\n          return value;\n      }\n      else return -1;\n  }\n\n}\n\n\nclass VendingMachine { // Owner class\n  // Fields of VendingMachine class\n  private Display _machineDisplay; \n  private KeyPad _machineKeyPad;\n  // Constructor of VendingMachine class\n  public VendingMachine(){\n    // Creating Owned Objects\n    this._machineDisplay = new Display();\n    this._machineKeyPad = new KeyPad();\n  }\n  /* The above Display and KeyPad objects can be used here*/\n}\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Base/relationship/#has-a","title":"Has-a","text":"<p>This is a slightly less concrete relationship between two classes. Class A and class B hold a has-a relationship if one or both need the other\u2019s object to perform an operation, but both class objects can exist independently of each other.</p> <p>This implies that a class has-a reference to an object of the other class but does not decide the lifetime of the other class\u2019s referenced object.</p> <p></p>"},{"location":"self/programming/OOP/cSharp/Base/relationship/#aggregation","title":"Aggregation","text":"<p>Aggregation is a specialized form of association. It follows the Has-A model. In aggregation, a class uses the objects of other classes. Here, we will refer to the class, using the objects of other classes, as the container class, and the classes whose objects are being used as the contained classes.</p> <p>The container class contains the references to the objects of the contained classes.</p>"},{"location":"self/programming/OOP/cSharp/Base/relationship/#independent-lifetimes","title":"Independent Lifetimes","text":"<p>In aggregation, the lifetime of the contained object does not depend on the lifetime of the container object.</p> <pre><code>class VendingMachine\n{\n\n    private Product[] _productShelf;\n    private int _capacity;\n    private static int _productCount;\n\n\n    public VendingMachine()\n    {\n        this._productShelf = new Product[5];\n        this._capacity = 5;\n        _productCount = 0;\n    }\n    public bool InsertProduct(Product item)\n    {\n        if (_productCount &lt; _capacity)\n        {\n            this._productShelf[_productCount] = item;\n            _productCount++;\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public void PrintProducts()\n    {\n        for (int i = 0; i &lt; this._capacity; i++)\n        {\n            _productShelf[i].PrintDetails();\n        }\n    }\n\n}\n\npublic class Product\n{\n\n    private string _name;\n    private double _price;\n\n    public Product(string name, double price)\n    {\n        this._name = name;\n        this._price = price;\n    }\n\n    public void PrintDetails()\n    {\n        Console.Write(\"[{0}  {1}]\\t\\t\", this._name, this._price);\n    }\n\n}\n\nclass Demo\n{\n\n    public static void Main(string[] args)\n    {\n        // Creating Vending Machine\n        VendingMachine myVendy = new VendingMachine();\n        // Creating Products\n        Product snack = new Product(\"Rango Tango\", 0.5);\n        Product drink = new Product(\"Mineral Water\", 0.7);\n        Product chocolate = new Product(\"Crunchy\", 1);\n        Product energyDrink = new Product(\"Red Bull\", 3);\n        Product popcorn = new Product(\"Caramel pop\", 0.5);\n        // Inserting Products into machine\n        myVendy.InsertProduct(snack);\n        myVendy.InsertProduct(drink);\n        myVendy.InsertProduct(chocolate);\n        myVendy.InsertProduct(energyDrink);\n        myVendy.InsertProduct(popcorn);\n        // Printing the product in vending machine\n        myVendy.PrintProducts();\n        // Now if we null the myVend\n        myVendy = null;\n        // The products still exist and are still usable\n        Console.WriteLine(\"\\nThe Products still exist!\");\n        snack.PrintDetails();\n        drink.PrintDetails();\n        chocolate.PrintDetails();\n        energyDrink.PrintDetails();\n        popcorn.PrintDetails();\n    }\n\n}\n</code></pre> <p><code>Output:</code></p> <pre><code>[Rango Tango  0.5]      [Mineral Water  0.7]        [Crunchy  1]        [Red Bull  3]       [Caramel pop  0.5]      \nThe Products still exist!\n[Rango Tango  0.5]      [Mineral Water  0.7]        [Crunchy  1]        [Red Bull  3]       [Caramel pop  0.5]      \n</code></pre>"},{"location":"self/programming/OOP/cSharp/Base/variables/","title":"Var","text":"<p>sing var, the compiler automatically infers the type of the object being created from the right side of the assignment operator.</p>"},{"location":"self/programming/OOP/cSharp/Base/variables/#this","title":"This","text":"<p>The this reference variable exists for every class. It refers to the current instance of a class. The this.memberName specifies that we are accessing the memberName of the current object. The purpose of using this here is to differentiate between the arguments being passed to the method and the fields of the class.</p> <pre><code>class VendingMachine {\n\n  private int moneyCollected = 70;\n\n  // A simple print function\n  public void PrintMoney(int moneyCollected){ \n    Console.WriteLine(\"Money Collected using this variable: \" + this.moneyCollected);\n    Console.WriteLine(\"Money Collected without using this variable: \" + moneyCollected);\n  }\n\n}\n\nclass Demo {\n\n  public static void Main(string[] args) {\n    //passing the parameters\n    var vendingMachine = new VendingMachine(); // Object created with parameterized constructor!\n    vendingMachine.PrintMoney(-10);\n  }\n\n}\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Base/variables/#base-vs-this","title":"Base vs This","text":"<p>encapsulation</p>"},{"location":"self/programming/OOP/cSharp/Encapsulation/encapsulation/","title":"Advantages of Encapsulation","text":"<ul> <li> Classes are easier to change and maintain.</li> <li> We can specify which data member we want to keep hidden or accessible.</li> <li> We decide which variables can be read or written by the outside world (increases flexibility).</li> </ul>"},{"location":"self/programming/OOP/cSharp/Encapsulation/encapsulation/#corrupted-sample","title":"Corrupted Sample","text":"<pre><code>// MoneyCollector Class\nclass MoneyCollector {\n\n  // Public Fields\n  public int moneyCollected;\n  public int productPrice;\n  public int insertedMoney;\n\n\n  // Parameter-less Constructor to intialize the money collector object\n  public MoneyCollector() { \n    this.moneyCollected = 0;\n    this.productPrice = 2; // Let's fix the product price to 2$\n    this.insertedMoney = 0;\n  }\n\n  public void AddMoney(int money) { // Method to add money to collection\n    this.insertedMoney = money;\n    if (this.insertedMoney &gt;= 0) {  // Check if the customer inserted valid money\n      Console.WriteLine(\"You inserted {0}$\",this.insertedMoney);\n      this.Change(); // Call the change method to provide change\n    }\n    else Console.WriteLine(\"Invalid Insertion\");\n\n    this.insertedMoney = 0;\n  }\n\n  public void Change() { //method to provide change\n    if (this.insertedMoney &gt;= this.productPrice) { //check if any change\n      int change = this.insertedMoney - this.productPrice; //calculate change\n      // product sold so add its price to collected money\n      this.moneyCollected += this.productPrice;\n      Console.WriteLine(\"Your change is: {0}$\", change);\n    }\n    else {\n      Console.WriteLine(\"You didn't insert sufficient money!\");\n      // the transaction was not successfull so return back the money\n      Console.WriteLine(\"Your change is: {0}$\",this.insertedMoney);\n    }\n  }\n\n  public int GetMoneyCollected() { // Getter to moneyCollected\n    return this.moneyCollected;\n  }\n\n}\n\nclass Demo {\n\n  public static void Main(string[] args) {\n    // Create a new money collector object\n    var moneyCollector = new MoneyCollector();\n    // 3 Customers purchase products\n    moneyCollector.AddMoney(2);\n    moneyCollector.AddMoney(5);\n    moneyCollector.AddMoney(7);\n    // getting the collected as 3 products sold it should be 2*3 = 6\n    Console.WriteLine(\"Total collection till now is: {0}$\",moneyCollector.GetMoneyCollected());\n\n    //Let's try to corrupt collection\n    moneyCollector.moneyCollected = 20;\n    Console.WriteLine(\"Total collection till now is: {0}$\",moneyCollector.GetMoneyCollected());\n    //The collection was public so we easily changed its value\n    //THIS SHOULD NOT HAVE HAPPENED!\n\n  }\n\n}\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Encapsulation/encapsulation/#a-good-implementation","title":"A Good Implementation","text":"<pre><code>// MoneyCollector Class\nclass MoneyCollector {\n\n  // Public Fields\n  private int moneyCollected;\n  private int productPrice;\n  private int insertedMoney;\n\n\n  // Parameter-less Constructor to intialize the money collector object\n  public MoneyCollector() { \n    this.moneyCollected = 0;\n    this.productPrice = 2; // Let's fix the product price to 2$\n    this.insertedMoney = 0;\n  }\n\n  public void AddMoney(int money) { // Method to add money to collection\n    this.insertedMoney = money;\n    if (this.insertedMoney &gt;= 0) {  // Check if the customer inserted valid money\n      Console.WriteLine(\"You inserted {0}$\",this.insertedMoney);\n      this.Change(); // Call the change method to provide change\n    }\n    else Console.WriteLine(\"Invalid Insertion\");\n    // as a good practice set inserted to 0 at the end of transaction\n    this.insertedMoney = 0;\n  }\n\n  private void Change() { //method to provide change\n    if (this.insertedMoney &gt;= this.productPrice) { //check if any change\n      int change = this.insertedMoney-this.productPrice; //calculate change\n      this.moneyCollected += this.productPrice; // Add money to total collection\n      Console.WriteLine(\"Your change is: {0}$\",change);\n    }\n    else {\n      Console.WriteLine(\"You didn't insert sufficient money!\");\n      // Return whatever the user entered\n      Console.WriteLine(\"Your change is: {0}$\",this.insertedMoney);\n    }\n  }\n\n  public int GetMoneyCollected() { // Getter to moneyCollected\n    return this.moneyCollected;\n  }\n\n}\n\nclass Demo {\n\n  public static void Main(string[] args) {\n    // Create a new money collector object\n    var moneyCollector = new MoneyCollector();\n    // 3 Customers purchase products\n    moneyCollector.AddMoney(3);\n    moneyCollector.AddMoney(5);\n    moneyCollector.AddMoney(7);\n    // getting the collected as 3 products sold it should be 2*3 = 6\n    Console.WriteLine(\"Total collection till now is: {0}$\",moneyCollector.GetMoneyCollected());\n\n    // Uncommenting the below line will now cause an error\n    //moneyCollector.moneyCollected = 20;\n\n  }\n\n}\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Encapsulation/encapsulation/#internal","title":"Internal","text":"<p>The accessibility of the class members declared as internal is limited to the current assembly only, i.e., they cannot be accessed from any other assembly in our code.</p>"},{"location":"self/programming/OOP/cSharp/Encapsulation/encapsulation/#protected-internal","title":"Protected Internal","text":"<p>The accessibility of the class members declared as protected internal is limited to any code in the assembly in which they are declared or from within a derived class in another assembly.</p>"},{"location":"self/programming/OOP/cSharp/Encapsulation/encapsulation/#private-protected","title":"Private Protected","text":"<p>The accessibility of the class members declared as private protected is limited to the code in the same class or a derived class only inside the assembly which they are declared in.</p>"},{"location":"self/programming/OOP/cSharp/Encapsulation/encapsulation/#base-vs-this","title":"Base vs This","text":"<p>As you already know, the this keyword in C# is used to refer to the instance of the current class.</p> <p>In a similar fashion, the base keyword in C# is used to refer to the base class members from inside the immediate derived class. The use of base comes into play when we implement inheritance.</p> <pre><code>class Product { //Base class Product  \n\n  public double price = 1.7; //price field inside base class\n\n} \n\n\nclass Beverage : Product { // sub class Beverage extending from Product\n\n  new double price = 1; //price field inside derived class\n\n  public void Display() { \n    //accessing the field of parent class using base*/\n    Console.WriteLine(\"Price from the Product class: \" + base.price); \n    //without using base the field of current class shadows the field of parant class*/\n    Console.WriteLine(\"Price from the Beverage class: \" + this.price); \n\n  } \n\n} \n\nclass Demo {\n\n  public static void Main(String[] args) { \n    Beverage cola = new Beverage(); \n    cola.Display(); \n  } \n\n}\n</code></pre> <p>Next sample:</p> <pre><code>class Product {          // Base class Product \n\n  public void Display() {   // Display method inside base class\n    Console.WriteLine(\"I am from the Product Class!\");\n  }\n\n} \n\nclass Beverage : Product { // Sub class Beverage inheriting from Product\n\n  new public void Display() { // Display method inside derived class\n    Console.WriteLine(\"I am from the Beverage Class!\");\n  } \n\n  public void PrintOut(){\n    Console.WriteLine(\"The Display() call with base:\");\n    base.Display();  // Calling the Display() of Product(base class)\n    Console.WriteLine(\"The Display() call without base:\");\n    Display();       // Calling the Display() of the Beverage(derived class)\n  }\n\n} \n\nclass Demo {\n\n  public static void Main(string[] args) {\n    Beverage cola = new Beverage(); // An object of derived class\n    cola.PrintOut(); \n  }\n\n}\n</code></pre> <p>Important Note: If the base class has a default or parameter-less constructor, the compiler implicitly calls the base class constructor before the derived class constructor when an object of the derived class is created.</p> <p>Note: In a constructor we can include a call to base() or this() but not both. Also, these calls can only be made after a constructor\u2019s signature and before the start of curly brackets.</p> <pre><code>// Base Class Product\nclass Product {\n\n  // Private Fields: Common attributes of all type of products\n  private string _name; \n  private double _price;\n  private string _expiryDate;      \n\n\n  // Parameterized Constructor\n  public Product(string name, double price, string expiryDate) {\n    this._name = name;\n    this._price = price;\n    this._expiryDate = expiryDate;  \n\n  }\n\n  // public method to print details\n  public void PrintDetails() {\n    Console.WriteLine(\"Name: \" + this._name);\n    Console.WriteLine(\"Price: \" + this._price);\n    Console.WriteLine(\"Expiry Date: \" + this._expiryDate);\n  }\n\n}\n\n// Derived Class Beverage\nclass Beverage : Product {\n\n  // Private fields : Fields specific to the derived class\n  private double _litres;\n  private string _flavor;\n\n  // Parameterized Constructor\n  public Beverage(string name, double price, string expiryDate, double litres, string flavor) \n    : base(name, price, expiryDate) //calling parent class constructor\n  {  \n      this._litres = litres;    \n      this._flavor = flavor;   \n  }\n\n  public void BeverageDetails() {  //details of Beverage\n    PrintDetails();         //calling inherited method from parent class\n    // Printing fields of this class\n    Console.WriteLine(\"Litres: \" + this._litres); \n    Console.WriteLine(\"Flavor: \" + this._flavor);\n  }\n\n}\n\nclass Demo {\n\n  public static void Main(string[] args) {\n    Beverage cola = new Beverage(\"RC Cola\", 0.7, \"8/12/2019\", 0.35, \"Cola\"); //creation of Beverage Object\n    cola.BeverageDetails(); //calling method to print details\n  }\n\n}\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Inheritance/inheritance/","title":"Index","text":"<ul> <li>Interface</li> </ul> <p>A derived class can use all the fields and methods of the superclass directly which are non-private or protected.</p>"},{"location":"self/programming/OOP/cSharp/Inheritance/inheritance/#advantages-of-inheritance","title":"Advantages of Inheritance","text":"<ul> <li> Reusability: ou don\u2019t have to re-declare the fields nor do you have to re-code.</li> <li> Code Modification: What happens when you change a method, a data type or something similar?</li> <li> Extensibility: An existing class can act as a base class from which a new class with upgraded features can be derived.</li> <li> Encapsulation: The base class can decide to keep some data private so that it cannot be altered by the derived class.</li> </ul>"},{"location":"self/programming/OOP/cSharp/Inheritance/inheritance/#multi-inheritance-example","title":"Multi inheritance example","text":"<pre><code>RedBull IS A Beverage.\nRedBull IS AN EnergyDrink also.\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Inheritance/inheritance/#hybrid-inheritance","title":"Hybrid inheritance","text":"<p>Example</p> <pre><code>A RedBull is an EnergyDrink.\nA RedBull is a Beverage.\nBoth EnergyDrink and Beverage are products.\n</code></pre> <p>Note: In C#, multiple and hybrid inheritance are applicable using interfaces only.</p>"},{"location":"self/programming/OOP/cSharp/Inheritance/interface/","title":"when do we use inheritance?","text":"<p>Wherever we come across an IS A relationship between objects, we can use inheritance. Let\u2019s have a look at 'Rust'(Subclass) classe which can be derived using ProgrammingLanguage(Superclass).</p> <p>Note: In C#, a class can extend (inherit) from only one other class at a time and a class cannot extend itself.</p>"},{"location":"self/programming/OOP/cSharp/Inheritance/interface/#protect","title":"Protect","text":"<p>The accessibility of the members declared with the protected access modifier is limited to the class containing it and the classes which derived from this class.</p> <pre><code>class Product { // Base Product class\n  // Protected field\n  protected double price = 50;\n  // Protected method\n  protected void Print() {\n    Console.WriteLine(\"Hi! I am the Print() method from the Product class\");\n  }\n}\n\nclass Beverage : Product { // Derived Beverage class\n\n    public void Access() {\n      // Accessing the protected field\n      Console.WriteLine(\"I can Access price: \" + price);\n      // Accessing the protected method\n      Print();\n    }  \n}\n\nclass Demo {\n\n    public static void Main(string[] args) {\n      var cola = new Beverage();\n      cola.Access();\n    }\n\n}\n</code></pre> <p>Next example</p> <p>Example The follow code won\u2019t compile because Subclass is not calling the parent class constructor.</p> <pre><code>class A {\n\n    int i;\n    public A(int i)\n    {\n        this.i=i; \n    }\n\n}\nclass B : A{\n\n    int j;\n    public B(int j)\n    {\n        this.j=j;\n    }\n\n}\n</code></pre> <p>Next sample</p> <pre><code>// Base Class\nclass Product {\n\n  // Private Data Members\n  private string name;\n  private double price;\n\n  // Getter method for name\n  public string GetName(int liters) {\n      if (liters == 1) {\n          this.name = \"Cola\";\n          return this.name;\n      }\n      else if (liters == 2) {\n          this.name = \"Fanta\";\n          return this.name;\n      }\n      else if (liters == 3) {\n          this.name = \"Dew\";\n          return this.name;\n      }\n      else return \"\";\n  }\n\n  // Getter method for price\n  public double GetPrice(int liters) {\n      if (liters == 1) {\n          this.price = 2;\n          return this.price;\n      }\n\n      else if (liters == 2) {\n          this.price = 3.5;\n          return this.price;\n      }\n\n      else if (liters == 3) {\n          this.price = 4;\n          return this.price;\n      }\n      else return 0;\n  }\n\n}\n\n// Derived Class\nclass Beverage : Product { \n\n    public int Liters { get; set; } //  Liters of a Beverage\n\n    public string GetDetails() {\n        string details = GetName(this.Liters) + \", \" + GetPrice(this.Liters) + \", \" + Liters;\n        return details;\n    }\n\n}\n\n\nclass Demo {\n\n    public static void Main(string[] args) {\n        Beverage berverage = new Beverage();\n        berverage.Liters = 2;\n        Console.WriteLine(berverage.GetDetails());\n    }\n\n}\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Isolation/isolation/","title":"Isolation","text":"<pre><code>// VendingMachine class\nclass VendingMachine {\n\n  private int _count; // member field count\n  private int _capacity = 100;\n\n  //no fields declared\n  // Implementing the auto-implemented property for count\n  // One drawback of this auto-implemented property is that we cannot set any conditional checks while setting or accessing the fields.\n  public int Count {get; set;} \n\n  /*\n  // Setter method to set the count of the products\n  public void SetCount(int x) {\n    if(x &gt;=0 &amp;&amp; x &lt;= _capacity) { // count should always be positive and less than or equal to capacity\n    _count = x; \n    }\n  }\n\n  // Getter method to get the count of the products\n  public int GetCount() {\n    return _count; \n  }\n  */\n}\n\nclass Demo {\n\n   public static void Main(string[] args) {\n     var vendingMachine = new VendingMachine();\n     vendingMachine.SetCount(88); // calling the setter method\n     Console.WriteLine(\"The count is: {0}\", vendingMachine.GetCount()); // calling the getter method\n   } \n\n}\n</code></pre> <p>Next sample:</p> <pre><code>class Student {\n  //fields\n  private string _name;\n  private double _physicsMarks;\n  private double _chemistryMarks;\n  private double _biologyMarks;\n  //properties\n  public string Name {\n    get {\n      return this._name;\n    }\n    /*\n      set\n    {\n      this._name = value;\n    }\n    */\n  }\n\n  public double PhysicsMarks {\n    get {\n      return this._physicsMarks;\n    }\n  }\n\n  public double ChemistryMarks {\n    get {\n      return this._chemistryMarks;\n    }\n  }\n\n  public double BiologyMarks {\n    get {\n      return this._biologyMarks;\n    }\n  }\n  // Parameterized constructor\n  public Student(string name, double phy, double chem, double bio) { \n    this._name = name;\n    this._physicsMarks = phy;\n    this._chemistryMarks = chem;\n    this._biologyMarks = bio;\n  }\n\n  public double TotalObtained() {\n    double totalMarks = PhysicsMarks + ChemistryMarks + BiologyMarks;    \n    return totalMarks;\n  }\n\n   public double Percentage() {\n    return (TotalObtained()/300) * 100;\n  }\n\n}\nclass Demo {\n  public static void Main(string[] args) {\n    Student john = new Student(\"John\", 75, 75, 90);\n    Console.WriteLine(john.TotalObtained());\n    Console.WriteLine(john.Percentage());\n    Console.WriteLine(john.ChemistryMarks);\n  }\n\n}\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Polymorphism/overload/","title":"Overload","text":"<p>We could redefine a method several times with the same name but with a different number of arguments and/or types. When the method is called, the appropriate definition will be selected by the compiler at the compile time.</p> <p>Note: Methods that have no arguments and differ only in the return types cannot be overloaded since the compiler won\u2019t be able to differentiate between their calls.</p> <pre><code>class Calculator {\n\n  public double Product(double x, double y) {\n    return x * y;\n  }\n\n  // Overloading the function to handle three arguments\n  public double Product(double x, double y, double z) {\n    return x * y * z;\n  }\n\n  // Overloading the function to handle int\n  public int Product(int x, int y){\n    return x * y;\n  }\n\n}\n\nclass Demo {\n\n  public static void  Main(string[] args) {\n    Calculator calculator = new Calculator();\n\n    double x = 10;\n    double y = 20;\n    double z = 5;\n\n    int a = 12;\n    int b = 4;\n\n    Console.WriteLine(calculator.Product(x, y));\n    Console.WriteLine(calculator.Product(x, y, z));\n    Console.WriteLine(calculator.Product(a, b));\n  }\n\n}\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Polymorphism/poly_samples/","title":"Poly samples","text":"<pre><code>What is the output of the following piece of code?\n\n\nclass Base {\n\n  public Base() {}\n  public void Print() { \n        Console.WriteLine(\"Base\");\n  }\n}\n\nclass Derived : Base {\n\n  public Derived() {}\n  public new void Print() {\n    Console.WriteLine(\"Derived\");\n  }\n}\n\nclass Demo {\n\n  public static void Main(string[] args) {\n    Base obj = new Derived();\n    obj.Print();\n  }\n}\n</code></pre> <p>Output: <code>Base</code></p> <pre><code>// Base Class\nclass Product {\n\n  // Private Data Members\n  private string _className;\n\n  public Product() { // Default Constructor\n    this._className = \"Product\";\n  }\n\n  // Getter Function\n  public virtual string GetName() {\n    return this._className;\n  }\n\n}\n\n// Derived Class\nclass XProduct : Product { \n\n  private string _className;\n\n  public XProduct(string className) { // Default Constructor\n    this._className = className;\n  }\n\n  // Overriden Method\n  public override string GetName() { \n    return base.GetName() + \", \" +this._className;\n  }\n\n}\n\nclass Demo {\n\n public static void Main(string[] args) {\n\n   Product beverage = new XProduct(\"Beverage\");\n   Console.WriteLine(beverage.GetName());\n\n }\n}\n</code></pre> <p>Output: <code>Product, Beverage</code></p> <pre><code>// Base Class\nclass Shape {\n\n  public Shape() {} // Default Constructor\n\n\n  // Getter Function\n  public virtual double ClacArea() {\n    return 0;\n  }\n\n}\n\n// Derived Class\nclass Circle : Shape { \n\n  private double _radius;\n\n  public Circle(double radius) { // Constructor\n    this._radius = radius;\n\n  }\n\n  // Overridden CalcArea() method which returns the area of Rectangle\n\n  public override double ClacArea() {\n    return (this._radius * this._radius) * 3.14;\n  }\n\n}\n\nclass Demo {\n\n public static void Main(string[] args) {\n   Shape circle = new Circle(2);\n   Console.WriteLine(circle.ClacArea());\n  }\n\n}\n</code></pre> <p>Output: <code>12.56</code></p> <pre><code>class Account {\n\n    private double _balance;\n\n    protected double Balance {\n        get { return this._balance; }\n        // Check before setting the balance\n        set { if(value&gt;=0)\n              this._balance = value;\n            }\n    }\n    // Constructor\n    public Account(double balance) {\n        this.Balance = balance;\n    }\n    //Virtual Methods\n    public virtual bool Deposit(double amount) {\n\n        return false;\n    }\n\n\n    public virtual bool Withdraw(double amount) {\n\n        return false;\n    }\n\n\n    public virtual void PrintBalance() {\n\n        Console.WriteLine(\"The balance is: \" + Balance);\n    }\n\n\n}\n\nclass SavingsAccount : Account {\n\n    private double _interestRate;\n    // Constructor\n    public SavingsAccount(double balance)\n        : base(balance)\n    {   // It's always preferable to initialize fields inside a constructor\n        this._interestRate = 0.8;\n    }\n    // Overridden Methods\n    public override bool Deposit(double amount) {\n        if(amount &gt; 0) { // Check if amount is non-zero and non-negative\n            // Adding to balance with interest rate\n            Balance += amount + (amount * this._interestRate);\n            return true;\n        }\n        return false;\n    }\n\n\n    public override bool Withdraw(double amount) {\n        if(amount &gt; 0 &amp;&amp; amount &lt;= Balance) { // Check if amount is non-zero, non-negative and less than equal to balance\n            // Deducting from balance with interest rate\n            Balance -= amount + (amount * this._interestRate);\n            return true;\n        }\n        return false;\n    }\n\n\n    public override void PrintBalance() {\n\n        Console.WriteLine(\"The saving account balance is: \" + base.Balance);\n    }\n\n}\n\nclass CheckingAccount : Account\n{\n    // Constructor\n    public CheckingAccount(double balance)\n        : base(balance) { }\n\n    // Overridden Methods\n    public override bool Deposit(double amount) {\n        if (amount &gt; 0)\n        {\n            Balance += amount;\n            return true;\n        }\n        return false;\n    }\n\n\n    public override bool Withdraw(double amount) {\n        if (amount &gt; 0 &amp;&amp; amount &lt;= Balance)\n        {\n            Balance -= amount;\n            return true;\n        }\n        return false;\n    }\n\n\n    public override void PrintBalance() {\n\n        Console.WriteLine(\"The checking account balance is: \" + base.Balance);\n    }\n\n}\n\nclass Demo {\n\n    public static void Main(string[] args) {\n\n        Account SAccount = new SavingsAccount(5000);\n\n        // Creating saving account object\n        SAccount.Deposit(1000);\n        SAccount.PrintBalance();\n\n        SAccount.Withdraw(3000);\n        SAccount.PrintBalance();\n\n        Console.WriteLine();\n\n        // Creating checking account object\n        Account CAccount = new CheckingAccount(5000);\n        CAccount.Deposit(1000);\n        CAccount.PrintBalance();\n\n        CAccount.Withdraw(3000);\n        CAccount.PrintBalance();\n\n    }\n\n}\n</code></pre> <p>Output:</p> <pre><code>The saving account balance is: 6800\nThe saving account balance is: 1400\n\nThe checking account balance is: 6000\nThe checking account balance is: 3000\n</code></pre>"},{"location":"self/programming/OOP/cSharp/Polymorphism/polymorphism/","title":"Polymorphism","text":"<ul> <li>Overload</li> <li>Samples</li> <li>Virtual</li> </ul>"},{"location":"self/programming/OOP/cSharp/Polymorphism/virtual/","title":"Virtual","text":"<p>Method overriding is the process of redefining a parent class\u2019 method in a subclass.</p> <p>The methods in the parent class are called overridden methods and have to be declared virtual. The methods in the child classes are called overriding methods and have to include the keyword override in their signatures.</p> <p>Here are some details we should take care of when thinking about overriding a method:</p> <ul> <li> Method overriding needs inheritance and there should be at least one derived class.</li> <li> Derived class(es) must have the same declaration, i.e., the same name, parameters, and return type of the overriding methods as those of the virtual methods in the base class.</li> <li> The method in the derived class(es) should have a different implementation from each other.</li> <li> The method being overridden should be declared virtual in the base class and the overriding method should be declared with the keyword override.</li> <li> The base class or method must not be declared as sealed.</li> </ul>"},{"location":"self/programming/OOP/cSharp/Polymorphism/virtual/#method-overloading-vs-method-overriding","title":"Method Overloading vs Method Overriding","text":"Overloading Overriding It is done inside the same class. Base and derived class(es) are required here. Overloading happens at compile time. Overriding happens at runtime Gives better performance because the binding is being done at compile time. Gives worse performance because the binding is being done at run time. Private and sealed methods can be overloaded. Private and sealed methods can not be overridden. Return type of the method does not matter in case of method overloading. Return type of the method must be the same in the case of overriding. Arguments must be different in the case of overloading. Arguments must be the same in the case of overriding. Mostly used to increase the readability of the code. Mostly used to have a separate implementation for a method that is already defined in the base class. This happens at the compile time, so it can be referred to as static or compile-time polymorphism. This happens at run time, so it can be called dynamic or runtime polymorphism. <pre><code>class Product\n{\n    private string _name;\n    private double _purchasePrice;\n\n    // Parameterized Constructor\n    public Product(string name, double purchasePrice)\n    {\n        this._name = name;\n        this._purchasePrice = purchasePrice;\n    }\n\n    // Getters\n    public string GetName()\n    {\n        return this._name;\n    }\n\n    public double GetPurchasePrice()\n    {\n        return this._purchasePrice;\n    }\n    // Method to calculate selling price\n    public virtual double GetPrice()\n    {\n        return 0;\n    }\n    // Method to print details\n    public virtual void PrintDetails()\n    {\n        Console.WriteLine(\"Selected Product's Name: \" + this.GetName());\n    }\n\n}\n\n\nclass Beverage : Product\n{\n\n\n    private double _refCost;\n    private double _profit;\n\n    // Parameterized Constructor\n    public Beverage(string name, double price)\n        : base(name,price)\n    {\n        this._refCost = GetPurchasePrice() * 0.10; // 10% of purchase price\n        this._profit = GetPurchasePrice() * 0.15; // 15% of purchase price\n    }\n\n     // public method to get selling price\n    public override double GetPrice()\n    {   //calculating selling price, Math.Round is just an inbuilt method to round off the price\n        return (GetPurchasePrice() + (int)Math.Round(this._refCost) + (int)Math.Round(this._profit));\n    }\n\n    public override void PrintDetails()\n    {\n        base.PrintDetails();\n        Console.WriteLine(\"Selling price: {0}\", this.GetPrice());\n    }\n\n}\n\n\nclass Chocolate : Product\n{\n\n    private double _profit;\n\n    // Parameterized Constructor\n    public Chocolate(string name, double price)\n        : base(name, price)\n    {\n        this._profit = base.GetPurchasePrice() * 0.20; // 20% of purchase price\n    }\n\n\n\n    // public method to get selling price\n    public override double GetPrice()\n    {   //calculating selling price, Math.Round is just an inbuilt method to round off the price\n        return (base.GetPurchasePrice() + (int)Math.Round(this._profit));\n    }\n\n\n    public override void PrintDetails()\n    {\n        base.PrintDetails();\n        Console.WriteLine(\"Selling price: {0}\", this.GetPrice());\n    }\n\n}\n\n\nclass Demo\n{\n\n    public static void Main(string[] args)\n    {\n        // Placing the products in an array\n        Product[] products = new Product[4];\n        products [0] = new Beverage(\"Cola\", 9);\n        products [1] = new Chocolate(\"Crunch\", 15);\n        products [2] = new Chocolate(\"Kit-kat\", 20);\n        products [3] = new Beverage(\"Fanta\", 8);\n\n        // name and price of respective  product is displayed\n        foreach(Product product in products)\n        product.PrintDetails();\n\n    }\n}\n</code></pre>"},{"location":"self/programming/design_patterns/design_patterns/","title":"Index","text":"<ul> <li> <p>Java Design Patterns</p> </li> <li> <p>Tests</p> </li> </ul> <p></p> Transfer analysis from event storming perspective"},{"location":"self/programming/design_patterns/dp_test/","title":"Dp test","text":"<p>Which is the bottom-most level of architectural abstraction? - [ ] A Layers - [ ] B Classes - [ ] C Data and methods - [ ] D None of the above</p> <p>What is the port layer in hexagonal architecture?</p> <ul> <li> A A layer where the business logic is placed.</li> <li> B A strategy for the isolation of business flows from rules validation.</li> <li> C A layer where an interface is exposed to allow us to consume business logic.</li> <li> D None of the above</li> </ul> <p>Which SOLID principle helps in the isolation of the domain layer from the adapter layer?</p> <ul> <li> A Single-responsibility principle</li> <li> B Interface-segregation principle</li> <li> C Dependency-inversion principle</li> <li> None of the above</li> </ul> <p>Which layer should the domain layer have a relationship with? - [ ] A The adapter layer - [ ] B The port layer - [ ] C The use case layer - [x] D None of the above (The Domain layer must not know anything about the others.</p> <p>Adapters are the most important layer in hexagonal architecture? - [ ] A True - [x] B False</p>"},{"location":"self/programming/design_patterns/java/java_patterns/","title":"Index","text":""},{"location":"self/programming/design_patterns/java/java_patterns/#common-patterns","title":"Common Patterns","text":"<ul> <li>Behavioral<ul> <li>Iterator</li> <li>observer</li> <li>strategy</li> <li>visitor </li> </ul> </li> </ul> <ul> <li>Creational<ul> <li>builder</li> <li>Singleton</li> <li>ProtoType</li> <li>FactoryMethod</li> <li>AbstractFactory</li> </ul> </li> </ul> <ul> <li>Structural<ul> <li>Decorator</li> <li>Proxy</li> </ul> </li> </ul> <ul> <li>Summary</li> </ul>"},{"location":"self/programming/design_patterns/java/summary/","title":"Summary","text":""},{"location":"self/programming/design_patterns/java/summary/#summary","title":"Summary","text":""},{"location":"self/programming/design_patterns/java/summary/#creational-patterns","title":"Creational Patterns","text":""},{"location":"self/programming/design_patterns/java/summary/#builder-pattern","title":"Builder Pattern","text":"<p>The builder pattern is used to create objects. It seperates out how the object is represented and how it is created. Additionally, it breaks down the creation into multiple steps. For instance in Java the java.lang.StringBuilder is an example of the builder pattern.</p>"},{"location":"self/programming/design_patterns/java/summary/#singleton-pattern","title":"Singleton Pattern","text":"<p>The singleton pattern is applied to restrict instantiation of a class to only one instance. For instance in the Java language the class java.lang.Runtime is a singleton.</p>"},{"location":"self/programming/design_patterns/java/summary/#prototype-pattern","title":"Prototype Pattern","text":"<p>Prototype pattern involves creating new objects by copying existing objects. The object whose copies are made is called the prototype. In Java the clone() method of java.lang.Object is an example of this pattern.</p>"},{"location":"self/programming/design_patterns/java/summary/#factory-method-pattern","title":"Factory Method Pattern","text":"<p>The factory method is defined as providing an interface for object creation but delegating the actual instantiation of objects to subclasses. For instance the method getInstance() of the class java.util.Calendar is an example of a factory method pattern.</p>"},{"location":"self/programming/design_patterns/java/summary/#abstract-factory","title":"Abstract Factory","text":"<p>The abstract factory pattern is defined as defining an interface to create families of related or dependent objects without specifying their concrete classes.The abstract factory is particularly useful for frameworks and toolkits that work on different operating systems. For instance, if your library provides fancy widgets for the UI, then you may need a family of products that work on MacOS and a similar family of products that work on Windows.</p>"},{"location":"self/programming/design_patterns/java/summary/#structural-patterns","title":"Structural Patterns","text":""},{"location":"self/programming/design_patterns/java/summary/#adapter-pattern","title":"Adapter Pattern","text":"<p>The Adapter pattern allows two incompatible classes to interoperate that otherwise can't work with eachother. Consider the method asList() offered by java.util.Arrays as an exampe of the adapter pattern. It takes an array and returns a list.</p>"},{"location":"self/programming/design_patterns/java/summary/#bridge-pattern","title":"Bridge Pattern","text":"<p>The bridge pattern describes how to pull apart two software layers fused together in a single class hierarchy and change them into parallel class hierarchies connected by a bridge.</p>"},{"location":"self/programming/design_patterns/java/summary/#composite-pattern","title":"Composite Pattern","text":"<p>The pattern allows you to treat the whole and the individual parts as one. The closest analogy you can imagine is a tree. The tree is a recursive data-structure where each part itself is a sub-tree except for the leaf nodes.</p>"},{"location":"self/programming/design_patterns/java/summary/#decorator-pattern","title":"Decorator Pattern","text":"<p>The decorator pattern can be thought of as a wrapper or more formally a way to enhance or extend the behavior of an object dynamically. The pattern provides an alternative to subclassing when new functionality is desired. A prominent example of this pattern is the java.io package, which includes several decorators. For example the BufferedInputStream wraps the FileInputStream to provide buffering capabilities.</p>"},{"location":"self/programming/design_patterns/java/summary/#facade-pattern","title":"Facade Pattern","text":"<p>The facade pattern is defined as a single uber interface to one or more subsystems or interfaces intending to make use of the subsystems easier.</p>"},{"location":"self/programming/design_patterns/java/summary/#flyweight-pattern","title":"Flyweight Pattern","text":"<p>The pattern advocates reusing state among a large number of fine grained object. Methods java.lang.Boolean.valueOf() and java.lang.Integer.valueOf() both return flyweight objects.</p>"},{"location":"self/programming/design_patterns/java/summary/#proxy-pattern","title":"Proxy Pattern","text":"<p>In a proxy pattern setup, a proxy is responsible for representing another object called the subject in front of clients. The real subject is shielded from interacting directly with the clients. The java.rmi.* package contains classes for creating proxies. RMI is Remote Method Invocation. It is a mechanism that enables an object on one Java virtual machine to invoke methods on an object in another Java virtual machine.</p>"},{"location":"self/programming/design_patterns/java/summary/#behavioral-patterns","title":"Behavioral Patterns","text":""},{"location":"self/programming/design_patterns/java/summary/#chain-of-responsibility-pattern","title":"Chain of Responsibility Pattern","text":"<p>In a chain of responsibility pattern implementation, the sender's request is passed down a series of handler objects till one of those objects, handles the request or it remains unhandled and falls off the chain. Multiple objects are given a chance to handle the request. This allows us to decouple the sender and the receiver of a request. The log() method of the java.util.logging.Logger class is an example of this pattern.</p>"},{"location":"self/programming/design_patterns/java/summary/#observer-pattern-publishersubscriber","title":"Observer Pattern (Publisher/Subscriber)","text":"<p>The pattern is formally defined as a one to many dependency between objects so that when one object changes state all the dependents are notified. All types implementing the interface java.util.EventListener are examples of this pattern.</p>"},{"location":"self/programming/design_patterns/java/summary/#interpreter-pattern","title":"Interpreter Pattern","text":"<p>The interpreter pattern converts a language's sentences into its grammar and interprets them.</p>"},{"location":"self/programming/design_patterns/java/summary/#command-pattern","title":"Command Pattern","text":"<p>The pattern is defined as representing an action or a request as an object that can then be passed to other objects as parameters, allowing parameterization of clients with requests or actions. The requests can be queued for later execution or logged. Logging requests enables undo operations. Types implementing the interface java.lang.Runnable are examples of this pattern.</p>"},{"location":"self/programming/design_patterns/java/summary/#iterator-pattern","title":"Iterator Pattern","text":"<p>An iterator is formally defined as a pattern that allows traversing the elements of an aggregate or a collection sequentially without exposing the underlying implementation. All types implementing the java.util.Iterator interface are examples of this pattern.</p>"},{"location":"self/programming/design_patterns/java/summary/#mediator-pattern","title":"Mediator Pattern","text":"<p>The pattern is applied to encapsulate or centralize the interactions amongst a number of objects. Object orientated design may result in behavior being distributed among several classes and lead to too many connections among objects. The encapsulation keeps the objects from referring to each other directly and the objects don't hold references to each other anymore. The java.util.Timer class represents this pattern where tasks may be scheduled for one-time execution, or for repeated execution at regular intervals in a background thread.</p>"},{"location":"self/programming/design_patterns/java/summary/#memento-pattern","title":"Memento Pattern","text":"<p>The memento pattern let's us capture the internal state of an object without exposing its internal structure so that the object can be restored to this state later. Classes implementing java.io.Serializable interface are examples of the memento pattern.</p>"},{"location":"self/programming/design_patterns/java/summary/#state-pattern","title":"State Pattern","text":"<p>The state pattern encapsulates the various states a machine can be in. The machine or the context, as it is called in pattern-speak, can have actions taken on it that propel it into different states. Without the use of the pattern, the code becomes inflexible and littered with if-else conditionals.</p>"},{"location":"self/programming/design_patterns/java/summary/#template-method","title":"Template Method","text":"<p>The template method pattern defines the skeleton or steps of an algorithm but leaves opportunities for subclasses to override some of the steps with their own implementations. Non-abstract methods of java.util.AbstractList, java.util.AbstractSet and java.util.AbstractMap are examples of this pattern.</p>"},{"location":"self/programming/design_patterns/java/summary/#strategy-pattern","title":"Strategy Pattern","text":"<p>The pattern allows grouping related algorithms under an abstraction, which the client codes against. The abstraction allows switching out one algorithm or policy for another without modifying the client. java.util.Comparator has the method compare() which allows the user to define the algorithm or strategy to compare two objects of the same type.</p>"},{"location":"self/programming/design_patterns/java/summary/#visitor-pattern","title":"Visitor Pattern","text":"<p>The visitor pattern allows us to define an operation for a class or a class hierarchy without changing the classes of the elements on which the operation is performed. The pattern is suitable in scenarios, where the object structure class or the classes that make up its elements don't change often but new operations over the object structure are desired. java.nio.file.FileVisitor interface has an implementation class of SimpleFileVisitor which is an example of a visitor. The interface is defined as a visitor of files. An implementation of this interface is provided to the Files.walkFileTree() methods to visit each file in a file tree.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/","title":"Behavioral","text":"<ul> <li>Iterator</li> <li>Observer</li> <li>Strategy</li> <li>Visitor</li> </ul> <p>Behavioral design patterns dictate the interaction of classes and objects amongst eachother and the delegation of responsibility. These include:</p> <ul> <li> Interpreter Pattern</li> <li> Template Pattern</li> <li> Chain of Responsibility Pattern</li> <li> Command Pattern</li> <li> Iterator Pattern</li> <li> Mediator Pattern</li> <li> Memento Pattern</li> <li> Observer Pattern</li> <li> State Pattern</li> <li> Strategy Pattern</li> <li> Visitor Pattern</li> </ul>"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#iterator-pattern","title":"Iterator Pattern","text":"<p>An iterator is formally defined as a pattern that allows traversing the elements of an aggregate or a collection sequentially without exposing the underlying implementation. All types implementing the java.util.Iterator interface are examples of this pattern.</p> <p></p> Iterator"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#observer-pattern-publishersubscriber","title":"Observer Pattern (Publisher/Subscriber)","text":"<p>The pattern is formally defined as a one to many dependency between objects so that when one object changes state all the dependents are notified. All types implementing the interface java.util.EventListener are examples of this pattern.</p> <p></p> Observer <p></p> Observer no.2"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#strategy-pattern","title":"Strategy Pattern","text":"<p>The pattern allows grouping related algorithms under an abstraction, which the client codes against. The abstraction allows switching out one algorithm or policy for another without modifying the client. java.util.Comparator has the method compare() which allows the user to define the algorithm or strategy to compare two objects of the same type.</p> <p></p> Strategy"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#visitor-pattern","title":"Visitor Pattern","text":"<p>The visitor pattern allows us to define an operation for a class or a class hierarchy without changing the classes of the elements on which the operation is performed. The pattern is suitable in scenarios, where the object structure class or the classes that make up its elements don't change often but new operations over the object structure are desired. java.nio.file.FileVisitor interface has an implementation class of SimpleFileVisitor which is an example of a visitor. The interface is defined as a visitor of files. An implementation of this interface is provided to the Files.walkFileTree() methods to visit each file in a file tree.</p> <p></p> Visitor"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#chain-of-responsibility-pattern","title":"Chain of Responsibility Pattern","text":"<p>In a chain of responsibility pattern implementation, the sender's request is passed down a series of handler objects till one of those objects, handles the request or it remains unhandled and falls off the chain. Multiple objects are given a chance to handle the request. This allows us to decouple the sender and the receiver of a request. The log() method of the java.util.logging.Logger class is an example of this pattern.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#interpreter-pattern","title":"Interpreter Pattern","text":"<p>The interpreter pattern converts a language's sentences into its grammar and interprets them.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#command-pattern","title":"Command Pattern","text":"<p>The pattern is defined as representing an action or a request as an object that can then be passed to other objects as parameters, allowing parameterization of clients with requests or actions. The requests can be queued for later execution or logged. Logging requests enables undo operations. Types implementing the interface java.lang.Runnable are examples of this pattern.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#mediator-pattern","title":"Mediator Pattern","text":"<p>The pattern is applied to encapsulate or centralize the interactions amongst a number of objects. Object orientated design may result in behavior being distributed among several classes and lead to too many connections among objects. The encapsulation keeps the objects from referring to each other directly and the objects don't hold references to each other anymore. The java.util.Timer class represents this pattern where tasks may be scheduled for one-time execution, or for repeated execution at regular intervals in a background thread.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#memento-pattern","title":"Memento Pattern","text":"<p>The memento pattern let's us capture the internal state of an object without exposing its internal structure so that the object can be restored to this state later. Classes implementing java.io.Serializable interface are examples of the memento pattern.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#state-pattern","title":"State Pattern","text":"<p>The state pattern encapsulates the various states a machine can be in. The machine or the context, as it is called in pattern-speak, can have actions taken on it that propel it into different states. Without the use of the pattern, the code becomes inflexible and littered with if-else conditionals.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/behavioral/#template-method","title":"Template Method","text":"<p>The template method pattern defines the skeleton or steps of an algorithm but leaves opportunities for subclasses to override some of the steps with their own implementations. Non-abstract methods of java.util.AbstractList, java.util.AbstractSet and java.util.AbstractMap are examples of this pattern.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/iterator/","title":"Iterator","text":"<p>A for loop iterates over an array.</p> <pre><code>public interface Iterator {\n\n    void next();\n\n    boolean hasNext();\n}\npublic class AirForce {\n\n    List&lt;IAircraft&gt; jets = new ArrayList&lt;&gt;();\n    IAircraft[] helis = new IAircraft[1];\n    LinkedList&lt;Boeing747&gt; cargo = new LinkedList&lt;&gt;();\n\n    public List&lt;IAircraft&gt; getJets() {\n        return jets;\n    }\n\n    public IAircraft[] getHelis() {\n        return helis;\n    }\n\n    public LinkedList&lt;Boeing747&gt; getCargo() {\n        return cargo;\n    }\n\n    public AirForce() {\n        jets.add(new F16());\n        helis[0] = new CobraGunship();\n        cargo.add(new Boeing747());\n    }\n\n    // This method returns a concrete iterator that\n    // traverses over the entire airforce planes.\n    public Iterator createIterator() {\n        return new AirForceIterator(this);\n\n    }\n\n    // This method returns a different concerete iterator\n    // that traverses over only the jets in the airforce.\n    public Iterator createJetsIterator() {\n        return new JetsIterator(jets);\n\n    }\n}\n/*\nNote the methods createIterator() and createJetsIterator() return objects that implement the Iterator interface. Notice how each kind of aircraft is stored in a different type of collection. If a client needs to list all the aircraft in an airforce object, it'll have a hard time invoking getters and then going over each individual collection. We mask this complexity by creating an iterator class whose sole job is to list all the aircraft held by the airforce. Look at the implementation below:\n*/\npublic class AirForceIterator implements Iterator {\n\n    List&lt;IAircraft&gt; jets;\n    IAircraft[] helis;\n    LinkedList&lt;Boeing747&gt; cargo;\n    int jetsPosition = 0;\n    int helisPosition = 0;\n    int cargoPosition = 0;\n\n    /**\n     * The iterator is composed with the object it'll be iterating over\n     */\n    public AirForceIterator(AirForce airForce) {\n        jets = airForce.getJets();\n        helis = airForce.getHelis();\n        cargo = airForce.getCargo();\n\n    }\n\n    @Override\n    /**\n     * We provide our own custom logic of returning aircraft in a\n     * sequence. Note we are returning IAircraft interface object which\n     * every plane in our airforce implements. We also design the function\n     * to throw a runtime exception if next is invoked when no more elements\n     * are left to iterate over\n     */\n    public IAircraft next() {\n\n        // return helis first\n        if (helisPosition &lt; helis.length) {\n            return helis[helisPosition++];\n        }\n\n        // return jets second\n        if (jetsPosition &lt; jets.size()) {\n            return jets.get(jetsPosition++);\n        }\n\n        // return cargos last\n        if (cargoPosition &lt; cargo.size()) {\n            return cargo.get(cargoPosition++);\n        }\n\n        throw new RuntimeException(\"No more elements\");\n\n    }\n\n    @Override\n    public boolean hasNext() {\n\n        return helis.length &gt; helisPosition ||\n               jets.size() &gt; jetsPosition ||\n               cargo.size() &gt; cargoPosition;\n    }\n}\npublic class Client {\n\n    public void main() {\n\n        AirForce airForce = new AirForce();\n\n        Iterator jets = airForce.createJetsIterator();\n\n        while (jets.hasNext()) {\n            jets.next();\n        }\n\n        Iterator allPlanes = airForce.createIterator();\n\n        while (allPlanes.hasNext()) {\n            allPlanes.next();\n        }\n    }\n}\n</code></pre> <p>Notice, the client has no idea about how the different airplane types are held in the airforce object nor does it know what type of aircraft they are. It simply gets to work with the IAircraft interface.</p> <p>The Java API has its own iterator interface which also includes remove() and forEachRemaining() methods that we have not included in our in-house iterator.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/iterator/#internal-vs-external-iterator","title":"Internal vs External Iterator","text":"<p>When the iteration control rests with the client using the iterator, that is, the client is responsible for advancing the traversal and explicitly requesting the next element from the iterator, it is an example of an external iterator. Iterators in our aircraft example are external iterators. On the other hand, when the client hands the iterator an operation to perform and the iterator performs the operation on each element of the aggregate, it is an example of an internal iterator.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/iterator/#other-examples","title":"Other examples","text":"<p>In Java several classes directly or indirectly implement the Iterator interface. By indirect implemenation, it is implied that a class implements an interface that extends the Iterator interface.</p> <p>Another example one can think of is in case of tree datastructure. One can parametrize the createIterator() method to yield iterators which traverse the tree in preorder, inorder or postorder.</p> <p>java.util.Scanner class is another example of the iterator pattern.</p> <p>java.util.Enumeration interface although deprecated but is an early example of the iterator pattern in Java.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/iterator/#caveats","title":"Caveats","text":"<p>Note that there could be more than one pending traversals on the aggregate. Each iterator would store its own traversal state. The iterator can apply the memento pattern to store the traversal state.</p> <p>By moving the traversal outside of the aggregate, it's easier to provide variations on the traversal algorithm to the client.</p> <p>Special care needs to be taken care when insertions or deletions are allowed to an aggregate amidst an on-going traversal. The iterator can either skip over a new element or iterate over the same element twice.</p> <p>For composites as described in the Composite Pattern, it might make sense to create internal iterators instead of external ones, reason being that the composite can have several levels of aggregate structures and its easier for the composite to internally keep track of the traversal position by calling itself recursively and implicitly storing the traversal path in the call stack.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/observer/","title":"Observer","text":"<p>Social media helps us immensely in understanding the observer pattern. If you are registered on Twitter then whenever you follow someone, you are essentially asking Twitter to send you (the observer) tweet updates of the person (the subject) you followed. The pattern consists of two actors, the observer who is interested in the updates and the subject who generates the updates. The pattern is formally defined as a one to many dependency between objects so that when one object changes state all the dependents are notified.</p> <pre><code>public interface ISubject {\n\n    void addObserver(IObserver observer);\n\n    void removeObserver(IObserver observer);\n\n    void notifyObservers();\n}\n\npublic interface IObserver {\n\n    void update( Object newState);\n}\n\npublic class F16 implements IObserver, IAircraft {\n\n    ISubject observable;\n\n    public F16(ISubject observable) {\n        this.observable = observable;\n        observable.addObserver(this);\n    }\n\n    @Override\n    public void fly() {\n        System.out.println(\"F16 is flying ...\");\n\n    }\n\n    @Override\n    public void land() {\n\n        // Don't forget to unsubscribe from control tower updates\n        observable.removeObserver(this);\n    }\n\n    @Override\n    public void update(Object newState) {\n        // Take appropriate action based on newState\n    }\n}\n</code></pre> <p>Going back to our aircraft example, we can say that any aircraft in flight would be interested in updates from the air-traffic controller. We can imagine that an aircraft, as soon as, it is airborne would want to subscribe to updates from the air traffic controller and unsubscribe when it lands. Publisher Code</p> <p>We create a control tower class which acts as a publisher for all aircraft.</p> <pre><code>public class ControlTower implements ISubject {\n\n    // The ControlTower maintains a list of\n    Collection&lt;IObserver&gt; observers = new ArrayList&lt;&gt;();\n\n    @Override\n    public void addObserver(IObserver observer) {\n        observers.add(observer);\n\n    }\n\n    @Override\n    public void removeObserver(IObserver observer) {\n        // Logic to remove the observer goes in here\n    }\n\n    @Override\n    public void notifyObservers() {\n        for (IObserver observer : observers) {\n            // We are passing null for state here but we\n            // could pass 'this' the subject itself or a\n            // type representing the state. These two options\n            // represent the Pull vs Push models\n            observer.update( null);\n        }\n    }\n\n    /**\n     * This is hypothetical function that runs perptually, gathering\n     * runway and weather conditions and notifying all observers of\n     * them periodically.\n     */\n    public void run() {\n\n        while (true) {\n            // get new runway/weather conditions and update observers\n            // every five minutes\n            // Thread.sleep(1000 * 60 * 5)\n            notifyObservers();\n        }\n    }\n}\n</code></pre>"},{"location":"self/programming/design_patterns/java/Behavioral/observer/#push-vs-pull","title":"Push vs Pull","text":"<p>Note how the F-16 class receives the new state as a type of class Object. We can pass in a more specific type if we agree on what information gets passed. The way the code is structured, it represents the Push Model where the subject is responsible for pushing the new state. Say if the aircraft is a helicopter, is it really interested in the runway conditions? It's supposed to land on a helipad and may not use all the information that it gets passed for the runway.</p> <p>A flip solution is that in the update method, instead of passing in the changed state, we pass in the subject object itself. The subject-object in turn exposes getter methods for individual pieces of information it is willing to share with the observers. The observer is now able to lookup only that information which it finds interesting. This is called the Pull Model.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/observer/#caveats","title":"Caveats","text":"<p>Some issues one needs to keep in mind while working with the observer pattern.</p> <pre><code>In case of many subjects and few observers, if each subject stores its observers separately, it'll increase the storage costs as some subjects will be storing the same observer multiple times.\n\nA small change in the subject, may lead to a cascade of updates for the observers and their dependent objects. If clients invoke notify on the subject after each change, it can overwhelm the observers with updates, whereas another option can be to batch the changes and then invoke notify on the subject.\n\nUsually, another entity Change Manager can sit between the observers and the subject in case there are complex dependencies between the subject and the observers.\n</code></pre>"},{"location":"self/programming/design_patterns/java/Behavioral/strategy/","title":"Strategy","text":"<p>It allows grouping related algorithms under an abstraction, which the client codes against. The abstraction allows switching out one algorithm or policy for another without modifying the client.</p> <p>The strategy pattern is formally defined as encapsulating algorithms belonging to the same family and making them interchangeable. The consumers of the common interface that the algorithms implement allow switching out one algorithm for another seamlessly.</p> <pre><code>public interface ISort {\n\n    void sort(int[] input);\n}\npublic class BubbleSort implements ISort {\n\n    @Override\n    public void sort(int[] input) {\n        // Do inefficient sorting in order n squared\n    }\n}\n\npublic class MergeSort implements ISort {\n\n    @Override\n    public void sort(int[] input) {\n        // Do efficient sorting in nlogn\n    }\n}\n\npublic class Context {\n\n    private ISort howDoISort;\n\n    public Context(ISort howDoISort) {\n        this.howDoISort = howDoISort;\n    }\n\n    // Context receives the data from its client\n    // and passes it on to the strategy object.\n    void sort(int[] numbers) {\n        howDoISort.sort(numbers);\n    }\n\n    // We can change the sorting algorithm using this setter\n    public void setHowDoISort(ISort howDoISort) {\n        this.howDoISort = howDoISort;\n    }\n}\n\npublic class Client {\n\n    private int[] numbers = new int[1000];\n\n    void crunchingNumbers() {\n\n        // Choose the sorting strategy\n        BubbleSort bubbleSort = new BubbleSort();\n\n        // Context receives the strategy object\n        Context context = new Context(bubbleSort);\n\n        // Sort the numbers\n        context.sort(numbers);\n\n        // Do remaining work\n    }\n}\n</code></pre> <p>Notice how the context keeps an interface reference and can be configured with any concrete sort implementation. The implementation can also be changed at runtime through the setter. This decoupling of the client and the algorithms, allows us to vary the algorithms independent of the client.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/strategy/#other-examples","title":"Other Examples","text":"<p>For our aircraft scenario, we can think about the different ways an F-16 can be equipped with weapons before each mission. An F-16 can go for reconnaissance without carrying any weapons, it can be loaded with (God forbid) nuclear weapons or it can carry Sidewinder missiles to intercept incoming enemy fighter jets. When modeling this scenario in our code, we could create a ArmingStrategy interface which will have concrete implementations of NoWeapons, NuclearWeapons and AirToAirWeapons as arming strategies for the plane. Before the F16 flies each mission we can set the armingStrategy variable held in the F16 class with the desired arming strategy for the mission.</p> <p>java.util.Comparator has the method compare which allows the user to define the algorithm or strategy to compare two objects of the same type.</p> <p>Think how a text editor such as Microsoft Word can make use of the strategy pattern when a client chooses the paragraph alignment options. The strategies could be justify text, left-align, right-align or center-align.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/strategy/#caveats","title":"Caveats","text":"<p>The context can either pass the required data or itself to the strategy object. In the latter case, the context would expose methods on itself so that the strategy object can retrieve the required data.</p> <p>Strategy objects are good candidates to be implemented as flyweight objects. This can reduce the memory requirements for the application.</p> <p>The context class can be simplified by providing a default strategy and only burdening the clients to provide a strategy object, when the default doesn't meet their requirements.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/visitor/","title":"Visitor","text":"<p>The visitor pattern allows us to define an operation for a class or a class hierarchy without changing the classes of the elements on which the operation is performed.</p> <p>Recall the Airforce class example from the Composite Pattern lesson. The Airforce class is a composite consisting of several different kinds of airplanes. It can be thought of as the object structure on whose elements we want to conduct operations. The elements would be the individual planes that make up the airforce object structure. Now imagine, a few days later we are tasked with calculating the total price tag for the Airforce. We will now add another method to the abstract airplane class or interface that'll return the price for each individual plane and sum it across all the airplanes.</p> <p>There are several problems in our scenario, first the airplane class shouldn't be responsible for monitoring or pricing data. It should just represent the aircraft. With each additional functionality, we'll end up bloating our aircraft classes with new unrelated methods. The visitor patterns lets us out of this dilemma by suggesting to have a separate class that defines the new functionality related to the aircraft. The methods in the AircraftVisitor class would take the aircraft object as an argument and work on it. This saves us from changing our aircraft classes each time we need to support a new functionality relating to the Airforce class.</p> <p>Formally, the pattern is defined as defining operations to be performed on elements of an object structure without changing the classes of the elements it works on.</p> <p>The pattern is suitable in scenarios, where the object structure class or the classes that make up its elements don't change often but new operations over the object structure are desired.</p> <pre><code>public class Airforce {\n\n    // Holds a collection of planes\n    private Collection&lt;IAircraft&gt; planes = new ArrayList&lt;&gt;();\n\n    // Returns an iterator to its collection of planes\n    public Iterator&lt;IAircraft&gt; getIterator() {\n        return planes.iterator();\n    }\n}\npublic interface IAircraft {\n\n    // Each concrete element class is expected to\n    // define the accept method\n    public void accept(IAircraftVisitor visitor);\n\n}\npublic interface IAircraftVisitor {\n\n    void visitF16(F16 f16);\n\n    void visitBoeing747(Boeing747 boeing747);\n}\npublic class F16 implements IAircraft {\n\n    @Override\n    public void accept(IAircraftVisitor visitor) {\n        visitor.visitF16(this);\n    }\n}\n\npublic class Boeing747 implements IAircraft{\n\n    @Override\n    public void accept(IAircraftVisitor visitor) {\n        visitor.visitBoeing747(this);\n    }\n}\npublic class MetricsVisitor implements IAircraftVisitor {\n\n    public void visitF16(F16 f16){\n        // Logic to get metrics for F16\n    }\n\n    public void visitBoeing747(Boeing747 boeing747){\n        // Logic to get metrics for Boeing 747\n    }\n\n    public void printAccumulatedResults(){\n\n    }\n}\n\npublic class PriceVisitor implements IAircraftVisitor{\n\n    @Override\n    public void visitF16(F16 f16) {\n        // Logic to get price for F16\n    }\n\n    @Override\n    public void visitBoeing747(Boeing747 boeing747) {\n        // Logic to get price for Boeing 747\n    }\n\n    public void printAccumulatedResults(){\n\n    }\n}\n/*\nNote that each visitor can invoke methods specific to each concrete class. Even though the two airplane classes share the same interface, the pattern allows us to work with classes that are unrelated or don't share a common interface. Finally, the client code will look like below:\n*/\n\npublic class Client {\n\n    public void main(Airforce airforce) {\n\n        Iterator&lt;IAircraft&gt; planes = airforce.getIterator();\n        MetricsVisitor aircraftVisitor = new MetricsVisitor();\n\n        while (planes.hasNext()){\n            planes.next().accept(aircraftVisitor);\n        }\n\n        aircraftVisitor.printAccumulatedResults();\n    }\n}\n</code></pre> <p>If we want to define a new operation on the object structure, then it is as easy as adding a new visitor class.</p> <p>Each object structure will have an associated visitor class. This visitor interface will need to declare a visitConcreteElement operation for each class of concreteElement defining the object structure. Each visit method on the visitor interface will need to declare its argument to be a particular concreteElement, allowing the visitor to access the interface of the concreteElement directly.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/visitor/#double-dispatch","title":"Double Dispatch","text":"<p>Take a look at the following code snippet and run it. Even though we save the reference for the BetterF16 object in a variable of the super class F16, the outputs are printed for each of the object types correctly. This is an example of dynamic dispatch where Java determines at runtime what class an instance belongs to and chooses the appropriate, possibly overridden, method.</p> <pre><code>class Demonstration {\n    public static void main( String args[] ) {\n        F16 f16 = new F16();\n        f16.whoAmI();\n\n        System.out.println();\n\n        // Reference for the derived object \n        // is held in the superclass type\n        F16 betterF16 = new BetterF16();\n        betterF16.whoAmI();\n    }\n}\n\nclass F16 {\n\n    public void whoAmI(){\n        System.out.print(\"I am the mighty F-16.\");\n    }\n}\n\nclass BetterF16 extends F16 {\n\n    public void whoAmI(){\n        System.out.print(\"I am the better than the mighty F-16.\");\n    }\n}\n/*\nNow consider the below code snippet. We add a method fire() which takes in an object of type Missile. We overload the fire method with an object of a derived class BetterMissile. \n*/\n\nclass Demonstration {\n    public static void main( String args[] ) {\n        F16 f16 = new F16();\n        F16 betterF16 = new BetterF16();\n        Missile missile = new Missile();\n        Missile betterMissile = new BetterMissile();\n\n        System.out.println(\"Expected output\");\n        f16.fireMissile(missile);\n        betterF16.fireMissile(missile);\n        System.out.println();\n\n        System.out.println(\"Failed double dispatch attempt\");      \n        f16.fireMissile(betterMissile);\n        betterF16.fireMissile(betterMissile);\n        System.out.println();      \n\n        System.out.println(\"Expected output\");      \n        BetterMissile reallyBetterMissile = new BetterMissile();\n        f16.fireMissile(reallyBetterMissile);\n        betterF16.fireMissile(reallyBetterMissile);\n        System.out.println();      \n    }\n}\n\nclass BetterMissile extends Missile {\n\n    @Override\n    public String explode() {\n        return \" very very big baaam\";\n    }\n}\n\nclass Missile {\n\n    public String explode() {\n        return \" baaaam\";\n    }\n}\n\nclass BetterF16 extends F16 {\n\n    public String whoAmI() {\n        return \"Better F16\";\n    }\n}\n\nclass F16 {\n\n    public String whoAmI() {\n        return \"F16\";\n    }\n\n    public void fireMissile(Missile missile) {\n        System.out.println(whoAmI() + \" fired ordinary missile: \" + missile.explode());\n    }\n\n    public void fireMissile(BetterMissile missile) {\n        System.out.println(whoAmI() + \" fired better missile: \" + missile.explode());\n    }\n}\n</code></pre> <p><code>Output</code></p> <pre><code>Expected output\nF16 fired ordinary missile:  baaaam\nBetter F16 fired ordinary missile:  baaaam\n\nFailed double dispatch attempt\nF16 fired ordinary missile:  very very big baaam\nBetter F16 fired ordinary missile:  very very big baaam\n\nExpected output\n</code></pre> <p>If you run the above code the lines 14-15 call the fire with a reference of type Missile pointing to an object of type BetterMissile. The JVM doesn't check the type of the object at runtime and invokes fire(Missile) instead of fire(BetterMissile). Languages which support double dispatch or multiple dispatch, would have invoked the right intended method fire(BetterMissile).</p> <p>In the visitor pattern the accept() method simulates the double dispatch effect.</p> <pre><code>    public void accept(IAircraftVisitor visitor) {\n        visitor.visitF16(this);\n    }\n</code></pre> <p>The first dispatch is when an airplane object calls the accept method. If the airplane object is of type F16 or Boeing747, the corresponding accept method on those classes is called. The second dispatch happens when the visitor interface reference passed into the accept method correctly calls the corresponding visit method on the concrete visitor object the reference points to.</p>"},{"location":"self/programming/design_patterns/java/Behavioral/visitor/#other-examples","title":"Other Examples","text":"<pre><code>java.nio.file.FileVisitor interface has an implementation class of SimpleFileVisitor which is an example of a visitor. The interface is defined as a visitor of files. An implementation of this interface is provided to the Files.walkFileTree methods to visit each file in a file tree.\n\njavax.lang.model.element.Element interface represents a program element such as a package, class, or method. To implement operations based on the class of an Element object not known at compile an implementation of the javax.lang.model.element.ElementVisitor interface is required.\n</code></pre>"},{"location":"self/programming/design_patterns/java/Behavioral/visitor/#caveats","title":"Caveats","text":"<p>The visitor pattern cautions that if one expects the object structure classes to change often then it might be a good idea to just keep the new functionality within the visited classes instead of using the visitor pattern. The key consideration in applying the Visitor pattern is if the algorithm applied over an object structure is more likely to change or the classes of objects that make up the structure. The visitor class hierarchy can be difficult to maintain when new concrete element classes are added frequently. In such cases, it's probably easier just to define operations on the classes that make up the structure. If the Element class hierarchy is stable, but you are continually adding operations or changing algorithms, then the visitor pattern will help you manage the changes.</p> <p>Adding new concrete classes will require modifying all the visitor classes, which makes it hard to add new types to the object structure.</p> <p>Iteration over the object structure can happen via an iterator, inside the object structure or by the visitor.</p> <p>Note that an iterator requires that a composite be made up of elements that all conform to the same base class or interface, whereas a visitor can visit all the elements of a composite even if they are unrelated. Languages that support double or multiple dispatch lessen the need for the visitor pattern.</p>"},{"location":"self/programming/design_patterns/java/Creational/abstractfactory/","title":"Abstractfactory","text":"<p>The abstract factory pattern solves the problem of creating families of related products. For instance, F-16 needs an engine, a cockpit, and wings. The Boeing-747 would require the same set of parts but they would be specific to Boeing. Any airplane would require these three related parts but the parts will be plane and vendor specific. Can you see a pattern emerge here? We need a framework for creating the related parts for each airplane, a family of parts for the F-16, a family of parts for the Boeing-747 so on and so forth.</p> <p>Formally, the abstract factory pattern is defined as defining an interface to create families of related or dependent objects without specifying their concrete classes. </p> <pre><code>public interface IAircraftFactory {\n\n    IEngine createEngine();\n\n    IWings createWings();\n\n    ICockpit createCockpit();\n}\n\npublic class Aircraft {\n\n    IEngine engine;\n    ICockpit cockpit;\n    IWings wings;\n    IAircraftFactory factory;\n\n    public Aircraft(IAircraftFactory factory) {\n        this.factory = factory;\n    }\n\n    protected Aircraft makeAircraft() {\n        engine = factory.createEngine();\n        cockpit = factory.createCockpit();\n        wings = factory.createWings();\n        return this;\n    }\n\n    private void taxi() {\n        System.out.println(\"Taxing on runway\");\n    }\n\n    public void fly() {\n        Aircraft aircraft = makeAircraft();\n        aircraft.taxi();\n        System.out.println(\"Flying\");\n    }\n}\npublic class F16Factory implements IAircraftFactory {\n\n    @Override\n    public IEngine createEngine() {\n        return new F16Engine();\n    }\n\n    @Override\n    public IWings createWings() {\n        return new F16Wings();\n    }\n\n    @Override\n    public ICockpit createCockpit() {\n        return new F16Cockpit();\n    }\n}\n\npublic class Boeing747Factory implements IAircraftFactory {\n\n    @Override\n    public IEngine createEngine() {\n        return new Boeing747Engine();\n    }\n\n    @Override\n    public IWings createWings() {\n        return new Boeing747Wings();\n    }\n\n    @Override\n    public ICockpit createCockpit() {\n        return new Boeing747Cockpit();\n    }\n}\npublic class Client {\n\n    public void main() {\n\n        // Instantiate a concrete factory for F-16\n        F16Factory f16Factory = new F16Factory();\n\n        // Instantiate a concrete factory for Boeing-747\n        Boeing747Factory boeing747Factory = new Boeing747Factory();\n\n        // Lets create a list of all our airplanes\n        Collection&lt;Aircraft&gt; myPlanes = new ArrayList&lt;&gt;();\n\n        // Create a new F-16 by passing in the f16 factory\n        myPlanes.add(new Aircraft(f16Factory));\n\n        // Create a new Boeing-747 by passing in the boeing factory\n        myPlanes.add(new Aircraft(boeing747Factory));\n\n        // Fly all your planes\n        for (Aircraft aircraft : myPlanes) {\n            aircraft.fly();\n        }\n\n    }\n}\n</code></pre>"},{"location":"self/programming/design_patterns/java/Creational/abstractfactory/#other-examples","title":"Other Examples","text":"<pre><code>The abstract factory is particularly useful for frameworks and toolkits that work on different operating systems. For instance, if your library provides fancy widgets for the UI, then you may need a family of products that work on MacOS and a similar family of products that work on Windows. Similarly, themes used in IDE can be another example. If your IDE supports light and dark themes then it may use the abstract factory pattern to create widgets that belong to the light or dark theme just by varying the concrete factory that creates the widgets.\n</code></pre> <p>javax.xml.parsers.DocumentBuilderFactory.newInstance() will return you a factory.</p> <p>javax.xml.transform.TransformerFactory.newInstance() will return you a factory.</p>"},{"location":"self/programming/design_patterns/java/Creational/abstractfactory/#caveats","title":"Caveats","text":"<p>It might appear to the naive reader that the factory method pattern and the abstract factory pattern are similar. The difference between the two lies in their motivations. The factory method pattern is usually responsible for creating a single product whereas an abstract factory pattern creates entire families of related products. Furthermore, in the factory method pattern, we use inheritance to create more specialized products whereas, in an abstract factory pattern, we practice object composition by passing in factories that are consumed to create the desired products.</p> <p>In our aircraft example, we can add a new aircraft simply by creating a concrete factory for it. However, note that if a helicopter is added to the fleet and requires a part that an aircraft doesn't have, then we'll need to extend the IAircraftFactory interface with another create method for the part required only by the helicopter. This will cascade the change to existing factories that'll need to return null since the new component isn't part of the jets.</p> <p>Concrete factories can be best represented as a singleton object</p>"},{"location":"self/programming/design_patterns/java/Creational/builder/","title":"Builder","text":"<p>a builder pattern encapsulates or hides the process of building a complex object and separates the representation of the object and its construction. The separation allows us to construct different representations using the same construction process.</p> <p>The steps represent the construction process from our formal definition. The product is an aircraft but can have different representations such as an F-16 or a Boeing-747. Using the same construction process, we should be able to produce both F-16s and Boeings.</p> <pre><code>public abstract class AircraftBuilder {\n\n    public void buildEngine() {\n\n    }\n\n    public void buildWings() {\n\n    }\n\n    public void buildCockpit() {\n\n    }\n\n    public void buildBathrooms() {\n\n    }\n\n    abstract public IAircraft getResult();\n}\npublic class Boeing747Builder extends AircraftBuilder {\n\n    Boeing747 boeing747;\n\n    @Override\n    public void buildCockpit() {\n\n    }\n\n    @Override\n    public void buildEngine() {\n\n    }\n\n    @Override\n    public void buildBathrooms() {\n\n    }\n\n    @Override\n    public void buildWings() {\n\n    }\n\n    public IAircraft getResult() {\n        return boeing747;\n    }\n}\n\npublic class F16Builder extends AircraftBuilder {\n\n    F16 f16;\n\n    @Override\n    public void buildEngine() {\n        // get F-16 an engine\n        // f16.engine = new F16Engine();\n    }\n\n    @Override\n    public void buildWings() {\n        // get F-16 wings\n        // f16.wings = new F16Wings();\n    }\n\n    @Override\n    public void buildCockpit() {\n        f16 = new F16();\n        // get F-16 a cockpit\n        // f16.cockpit = new F16Cockpit();\n    }\n\n    public IAircraft getResult() {\n        return f16;\n    }\n}\npublic class Director {\n\n    AircraftBuilder aircraftBuilder;\n\n    public Director(AircraftBuilder aircraftBuilder) {\n        this.aircraftBuilder = aircraftBuilder;\n    }\n\n    public void construct(boolean isPassenger) {\n        aircraftBuilder.buildCockpit();\n        aircraftBuilder.buildEngine();\n        aircraftBuilder.buildWings();\n\n        if (isPassenger)\n            aircraftBuilder.buildBathrooms();\n    }\n}\npublic class Client {\n\n    public void main() {\n\n        F16Builder f16Builder = new F16Builder();\n        Director director = new Director(f16Builder);\n        director.construct(false);\n\n        IAircraft f16 = f16Builder.getResult();\n    }\n}\n</code></pre>"},{"location":"self/programming/design_patterns/java/Creational/builder/#other-examples","title":"Other Examples","text":"<p>Using the jave api exposes a StringBuilder instance we can successively create a string by using the append method.</p>"},{"location":"self/programming/design_patterns/java/Creational/builder/#caveats","title":"Caveats","text":"<p>The builder pattern might seem similar to the abstract factory pattern but one difference is that the builder pattern creates an object step by step whereas the abstract factory pattern returns the object in one go.</p>"},{"location":"self/programming/design_patterns/java/Creational/creational/","title":"Creational","text":"<ul> <li>Builder</li> <li>Singleton</li> <li>ProtoType</li> <li>FactoryMethod</li> <li>AbstractFactory</li> </ul> <p>Creational design patterns relate to how objects are constructed from classes. New-ing up objects may sound trivial but unthoughtfully littering code with object instance creations can lead to headaches down the road. The creational design pattern come with powerful suggestions on how best to encapsulate the object creation process in a program.</p> <ul> <li> Builder Pattern</li> <li> Prototype Pattern</li> <li> Singleton Pattern</li> <li> Abstract Factory Pattern</li> </ul>"},{"location":"self/programming/design_patterns/java/Creational/creational/#builder-pattern","title":"Builder Pattern","text":"<p>The builder pattern is used to create objects. It seperates out how the object is represented and how it is created. Additionally, it breaks down the creation into multiple steps. For instance in Java the java.lang.StringBuilder is an example of the builder pattern.</p> <p></p> Builder"},{"location":"self/programming/design_patterns/java/Creational/creational/#singleton-pattern","title":"Singleton Pattern","text":"<p>The singleton pattern is applied to restrict instantiation of a class to only one instance. For instance in the Java language the class java.lang.Runtime is a singleton.</p> <p></p> Singleton"},{"location":"self/programming/design_patterns/java/Creational/creational/#prototype-pattern","title":"Prototype Pattern","text":"<p>Prototype pattern involves creating new objects by copying existing objects. The object whose copies are made is called the prototype. In Java the clone() method of java.lang.Object is an example of this pattern.</p> <p></p> Prototype"},{"location":"self/programming/design_patterns/java/Creational/creational/#factory-method-pattern","title":"Factory Method Pattern","text":"<p>The factory method is defined as providing an interface for object creation but delegating the actual instantiation of objects to subclasses. For instance the method getInstance() of the class java.util.Calendar is an example of a factory method pattern.</p> <p></p> Factory"},{"location":"self/programming/design_patterns/java/Creational/creational/#abstract-factory","title":"Abstract Factory","text":"<p>The abstract factory pattern is defined as defining an interface to create families of related or dependent objects without specifying their concrete classes.The abstract factory is particularly useful for frameworks and toolkits that work on different operating systems. For instance, if your library provides fancy widgets for the UI, then you may need a family of products that work on MacOS and a similar family of products that work on Windows.</p> <p></p> Abstract Factory"},{"location":"self/programming/design_patterns/java/Creational/factorymethod/","title":"Factorymethod","text":"<p>Factory pattern is a creational design pattern used to centralize the creation of multiple instances in one place where they are checked to see which type of instance will be created.  It is used to create an instance without specifying the exact class in a single location.</p> <p>It is used when: </p> <p>1) A class doesn't know what sub-classes will be required to ,create beforehand.  2) You need to centralize the creation of instances of different classes.  3) All the instances of different classes may require the same parameter.  4) A new property/function needs to be added to all the classes without code duplication(this way, we don't' enter a new property or function to each class separately). </p> <p>A factory produces goods, and a software factory produces objects. Usually, object creation in Java takes place like so:</p> <p>SomeClass someClassObject = new SomeClass();</p> <p>The problem with the above approach is that the code using the SomeClass's object, suddenly now becomes dependent on the concrete implementation of SomeClass. There's nothing wrong with using new to create objects but it comes with the baggage of tightly coupling our code to the concrete implementation class, which is a violation of code to an interface and not to an implementation.</p> <p>Formally, the factory method is defined as providing an interface for object creation but delegating the actual instantiation of objects to subclasses.</p> <pre><code>public interface IEngine {\n\n    void start();\n}\npublic interface ICockpit {\n\n    void installed();\n}\npublic class F16 {\n\n    IEngine engine;\n    ICockpit cockpit;\n\n    protected F16 makeF16() {\n        engine = new F16Engine();\n        cockpit = new F16Cockpit();\n        return this;\n    }\n/*  Simple Factory:\n public F16 makeF16(String variant) {\n\n        switch (variant) {\n        case \"A\":\n            return new F16A();\n        case \"B\":\n            return new F16B();\n        default:\n            return new F16();\n        }\n    }\n*/\n    public void taxi() {\n        System.out.println(\"F16 is taxing on the runway !\");\n    }\n\n    public void fly() {\n        // Note here carefully, the superclass F16 doesn't know\n        // what type of F-16 variant it was returned.\n        F16 f16 = makeF16();\n        f16.taxi();\n        System.out.println(\"F16 is in the air !\");\n    }\n}\n\npublic class F16A extends F16 {\n\n    @Override\n    public F16 makeF16() {\n        super.makeF16();\n        engine = new F16AEngine();\n        return this;\n    }\n}\n\npublic class F16B extends F16 {\n\n    @Override\n    public F16 makeF16() {\n        super.makeF16();\n        engine = new F16BEngine();\n        return this;\n    }\n}\n\npublic class Client {\n    public void main() {\n        Collection&lt;F16&gt; myAirForce = new ArrayList&lt;F16&gt;();\n        F16 f16A = new F16A();\n        F16 f16B = new F16B();\n        myAirForce.add(f16A);\n        myAirForce.add(f16B);\n\n        for (F16 f16 : myAirForce) {\n            f16.fly();\n        }\n    }\n}\n</code></pre>"},{"location":"self/programming/design_patterns/java/Creational/factorymethod/#other-examples","title":"Other Examples","text":"<p>The factory method pattern pervades toolkits and frameworks. The pattern can be used whenever a class doesn't know ahead of time what subclass objects it would need to instantiate. This is common problem in designing frameworks, where the consumers of the framework are expected to extend framework provided abstract classes and hook-in functionality or object creations.</p> <p>The Java API exposes several factory methods:         java.util.Calendar.getInstance()         java.util.ResourceBundle.getBundle()         java.text.NumberFormat.getInstance()</p>"},{"location":"self/programming/design_patterns/java/Creational/factorymethod/#caveats","title":"Caveats","text":"<p>The pattern can result in too many subclasse with very minor differences.</p> <p>If the subclass extends the functionality, then the superclass can't use it unless it downcasts it to the concrete type. The downcast may fail at runtime.</p>"},{"location":"self/programming/design_patterns/java/Creational/prototype/","title":"Prototype","text":"<p>The object whose copies are made is called the prototype. You can think of the prototype object as the seed object from which other objects get created but you might ask why would we want to create copies of objects, why not just create them anew? The motivations for prototype objects are as follows:</p> <p>Sometimes creating new objects is more expensive than copying existing objects.</p> <pre><code>Imagine a class will only be loaded at runtime and you can't access its constructor statically. The run-time environment creates an instance of each dynamically loaded class automatically and registers it with a prototype manager. The application can request objects from the prototype manager which in turn can return clones of the prototype.\n\nThe number of classes in a system can be greatly reduced by varying the values of a cloned object from a prototypical instance.\n</code></pre> <p>Formally, the pattern is defined as specify the kind of objects to create using a prototypical instance as a model and making copies of the prototype to create new objects.</p> <pre><code>public interface IAircraftPrototype {\n\n    void fly();\n\n    IAircraftPrototype clone();\n\n    void setEngine(F16Engine f16Engine);\n}\npublic class F16 implements IAircraftPrototype {\n\n    // default engine\n    F16Engine f16Engine = new F16Engine();\n\n    @Override\n    public void fly() {\n        System.out.println(\"F-16 flying...\");\n    }\n\n    @Override\n    public IAircraftPrototype clone() {\n        // Deep clone self and return the product\n        return new F16();\n    }\n\n    public void setEngine(F16Engine f16Engine) {\n        this.f16Engine = f16Engine;\n    }\n}\npublic class Client {\n\n    public void main() {\n\n        IAircraftPrototype prototype = new F16();\n\n        // Create F16-A\n        IAircraftPrototype f16A = prototype.clone();\n        f16A.setEngine(new F16AEngine());\n\n        // Create F16-B\n        IAircraftPrototype f16B = prototype.clone();\n        f16B.setEngine(new F16BEngine());\n    }\n}\n</code></pre> <p>Note that the interface IAircraftPrototype clone method returns an abstract type. The client doesn't know the concrete subclasses. The Boeing747 class can just as well implement the same interface.</p>"},{"location":"self/programming/design_patterns/java/Creational/prototype/#dynamic-loading","title":"Dynamic Loading","text":"<p>The prototype pattern also helps with dynamic loading of classes. Language frameworks which allow dynamic loading will create an instance of the loaded class and register it in a managing entity. The application can at runtime request the object of the loaded class from the manager. Note, the application can't access the class's constructor statically.</p>"},{"location":"self/programming/design_patterns/java/Creational/prototype/#other-examples","title":"Other examples","text":"<p>In Java the root Object class exposes a clone method. The class implements the interface java.lang.Cloneable.</p>"},{"location":"self/programming/design_patterns/java/Creational/prototype/#caveats","title":"Caveats","text":"<p>Implementing the clone method can be challenging because of circular references.</p>"},{"location":"self/programming/design_patterns/java/Creational/singleton/","title":"Singleton","text":"<p>Formally the Singleton pattern is defined as ensuring that only a single instance of a class exists and a global point of access to it exists. </p> <p>how do we ensure that only one object ever gets created? The answer is to make the constructor private of the class we intend to define as singleton. That way, only the members of the class can access the private constructor and no one else.</p> <pre><code>public class AirforceOne {\n\n    // The sole instance of the class\n    private static AirforceOne onlyInstance;\n\n    // Make the constructor private so its only accessible to\n    // members of the class.\n    private AirforceOne() {\n    }\n\n    public void fly() {\n        System.out.println(\"Airforce one is flying...\");\n    }\n\n    // Create a static method for object creation\n    public static AirforceOne getInstance() {\n\n        // Only instantiate the object when needed.\n        if (onlyInstance == null) {\n            onlyInstance = new AirforceOne();\n        }\n\n        return onlyInstance;\n    }\n}\n\npublic class Client {\n\n    public void main() {\n        AirforceOne airforceOne = AirforceOne.getInstance();\n        airforceOne.fly();\n    }\n}\n</code></pre>"},{"location":"self/programming/design_patterns/java/Creational/singleton/#multithreading-and-singleton","title":"Multithreading and Singleton","text":"<pre><code>Thread A calls the method getInstance and finds the onlyInstance to be null but before it can actually new-up the instance it gets context switched out.\nNow thread B comes along and calls the getInstance method and goes on to new-up the instance and returns the AirforceOne object.\nWhen thread A is scheduled again, is when the mischief begins. The thread was already past the if null condition check and will proceed to new-up another object of AirforceOne and assign it to onlyInstance. Now there are two different AirforceOne objects out in the wild, one with thread A and one with thread B.\n</code></pre> <p>There are two trivial ways to fix this race condition.</p> <ul> <li>One is to add synchronized to the getInstance() method.</li> </ul> <pre><code>synchronized public static AirforceOne getInstance()\n</code></pre> <p>The other is to undertake static initialization of the instance, which is guaranteed to be thread-safe.</p> <pre><code>   // The sole instance of the class\n   private static AirforceOne onlyInstance = new AirforceOne();\n</code></pre> <p>The problem with the above approaches is that synchronization is expensive and static initialization creates the object even if it's not used in a particular run of the application. If the object creation is expensive then static intialization can cost us performance.</p> <p>## Double-Checked Locking</p> <p>The next evolution of our singleton pattern would be to synchronize only when the object is created for the first time and if its already created, then we don't attempt to synchronize the accessing threads. This pattern has a name called \"double-checked locking\".</p> <pre><code>public class AirforceOneWithDoubleCheckedLocking {\n\n    // The sole instance of the class. Note its marked volatile\n    private volatile static AirforceOneWithDoubleCheckedLocking onlyInstance;\n\n    // Make the constructor private so its only accessible to\n    // members of the class.\n    private AirforceOneWithDoubleCheckedLocking() {\n    }\n\n    public void fly() {\n        System.out.println(\"Airforce one is flying...\");\n    }\n\n    // Create a static method for object creation\n    synchronized public static AirforceOneWithDoubleCheckedLocking getInstance() {\n\n        // Only instantiate the object when needed.\n        if (onlyInstance == null) {\n            // Note how we are synchronizing on the class object\n            synchronized (AirforceOneWithDoubleCheckedLocking.class) {\n                if (onlyInstance == null) {\n                    onlyInstance = new AirforceOneWithDoubleCheckedLocking();\n                }\n            }\n        }\n\n        return onlyInstance;\n    }\n}\n</code></pre> <p>The double checked locking is now considered an antipattern and its utility has largely passed away as JVM startup times have sped up over the years.</p>"},{"location":"self/programming/design_patterns/java/Creational/singleton/#other-examples","title":"#Other Examples","text":"<p>In the Java API we have the following singletons:</p> <pre><code>java.lang.Runtime\njava.awt.Desktop\n</code></pre>"},{"location":"self/programming/design_patterns/java/Creational/singleton/#caveats","title":"Caveats","text":"<p>Its possible to subclass a singleton class by making the constructor protected instead of private. It might be suitable under some circumstances. An approach taken in these scenarios is to create a register of singletons of the subclasses and the getInstance method can take in a parameter or use an environment variable to return the desired singleton. The registry maintains a mapping of string names to singleton objects.</p>"},{"location":"self/programming/design_patterns/java/Structural/decorator/","title":"Decorator","text":"<p>It extends the object behavior at the run time. The decorator pattern adds new functionality to objects without modifying their defining classes. The decorator pattern can be thought of as a wrapper or more formally a way to enhance or extend the behavior of an object dynamically. The pattern provides an alternative to subclassing when new functionality is desired.The strategy is to wrap the existing object within a decorator object that usually implements the same interface as the wrapped object.i.e. the decorator takes action either before or after invoking some method on the wrapped.</p> <p>For instance a car can have a technology package added to the base model, then maybe the sports package so on and so forth. Similarly, our base Boeing-747 model can have two additional properties added to it. One is to let the plane be fitted with luxury fittings and the other is making the plane bullet-proof. </p> <p>Say we are interested in the weight of our plane, which can be important in determining the fuel required for flights. Adding either or both of the options would make the plane heavier. We would want an extensible way of adding properties to the plane object and still be able to know its weight with the additional packages installed on the plane.</p> <pre><code>public interface IAircraft {\n\n    float baseWeight = 100;\n\n    void fly();\n\n    void land();\n\n    float getWeight();\n\n}\n\npublic class Boeing747 implements IAircraft {\n\n    @Override\n    public void fly() {\n        System.out.println(\"Boeing-747 flying ...\");\n    }\n\n    @Override\n    public void land() {\n        System.out.println(\"Boeing-747 landing ...\");\n    }\n\n    @Override\n    public float getWeight() {\n        return baseWeight;\n    }\n}\npublic abstract class BoeingDecorator implements IAircraft {\n\n}\npublic class LuxuryFittings extends BoeingDecorator {\n\n    IAircraft boeing;\n\n    public LuxuryFittings(IAircraft boeing) {\n        this.boeing = boeing;\n    }\n\n    @Override\n    public void fly() {\n        boeing.fly();\n    }\n\n    @Override\n    public void land() {\n        boeing.land();\n    }\n\n    @Override\n    public float getWeight() {\n        return (30.5f + boeing.getWeight());\n    }\n}\n\npublic class BulletProof extends BoeingDecorator {\n\n    IAircraft boeing;\n\n    public BulletProof(IAircraft boeing) {\n        this.boeing = boeing;\n\n    }\n\n    @Override\n    public void fly() {\n        boeing.fly();\n    }\n\n    @Override\n    public void land() {\n        boeing.land();\n    }\n\n    @Override\n    public float getWeight() {\n        return 50f + boeing.getWeight();\n    }\n}\npublic class Client {\n\n    public void main() {\n        IAircraft simpleBoeing = new Boeing747();\n        IAircraft luxuriousBoeing = new LuxuryFittings(simpleBoeing);\n        IAircraft bulletProofBoeing = new BulletProof(luxuriousBoeing);\n        float netWeight = bulletProofBoeing.getWeight();\n        System.out.println(\"Final weight of the plane: \" + netWeight);\n    }\n}\n</code></pre> <p>From the client code, one can observe how the plane's behavior is extended at runtime. From the client code, one can see how we wrap the boeing object in successive decorators and are able to retrieve the net weight.</p>"},{"location":"self/programming/design_patterns/java/Structural/decorator/#other-examples","title":"Other Examples","text":"<p>A prominent example of this pattern is the java.io package, which includes several decorators. Look at the snippet below:</p> <pre><code>    public void main() {\n        // FileInputStream is responsible for reading the file\n        FileInputStream fileInputStream = new FileInputStream(\"myFile.txt\");\n        // BufferedInputStream extends FilterInputStream and not FileInputStream, it is\n        // a decorator which enhances the functionality of the original object by wrapping over it.\n        BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);\n        // The read operation becomes buffered now\n        bufferedInputStream.read();\n    }\n</code></pre>"},{"location":"self/programming/design_patterns/java/Structural/decorator/#caveats","title":"Caveats","text":"<p>One of the issues with the decorator pattern is that we may end up with too many classes as the number of decorators grows. The java.io package suffers from the same issue, as it makes extensive use of the decorator pattern.</p> <p>Also, if we want to take a specific action based on the concrete type of the plane, we may not be able to do so. Once the concrete object is wrapped inside a decorator the reference to the object is through the abstract type and not the concrete type anymore.</p>"},{"location":"self/programming/design_patterns/java/Structural/proxy/","title":"Proxy","text":"<p>The literal definition of proxy is the authority to represent someone else. In a proxy pattern setup, a proxy is responsible for representing another object called the subject in front of clients. The real subject is shielded from interacting directly with the clients. There could be several reasons why one would want to front a subject with a proxy, some are listed below:</p> <ul> <li> To access remote objects over the internet, running in another JVM or another address space</li> <li> To protect a subject from clients not authorized to access it</li> <li> To stand in place of an object that may be expensive to create and delay the object's creation till it is accessed</li> <li> To cache queries or results from subject for clients     There are a number of other use cases such as the firewall proxy, synchronization proxy etc.</li> </ul> <p>Formally, the pattern is defined as a mechanism to provide a surrogate or placeholder for another object to control access to it.</p>"},{"location":"self/programming/design_patterns/java/Structural/proxy/#remote-proxy","title":"Remote Proxy","text":"<p>A remote proxy acts in a somewhat similar fashion and facilitates interaction between the client and the subject. A remote proxy stands in place of an object which isn't running on the same machine or JVM. The subject doesn't have the intelligence built into it to receive the method invocation request over the network and usually, a helper entity runs alongside the remote subject and handles network communication on behalf of the subject.</p>"},{"location":"self/programming/design_patterns/java/Structural/proxy/#virtual-proxy","title":"Virtual Proxy","text":"<p>A virtual proxy creates objects on demand. Sometimes creation of an object is expensive and complex and should only be created when required. A virtual proxy delays creation of its subject until required and stands in its place before and during its construction.</p> <p>Think of instagram running on a very weak internet connection on a mobile phone. The pictures aren't loaded quickly enough but to ensure a pleasant user experience, a loading widget can appear on the mobile screen while the image gets downloaded in the background. The loading widget would act as a proxy for the picture and might have related information about the picture such as the dimensions of the picture, which it can provide to the display frame before the picture download is complete.</p>"},{"location":"self/programming/design_patterns/java/Structural/proxy/#protection-proxy","title":"Protection Proxy","text":"<p>A protection proxy or authorization proxy controls access to the real subject. Requests are vetted for authorization before being forwarded to the real subject. These proxies are useful when clients should have different access rights to the subject.</p> <p>We'll show a simple example of a remote proxy. The DroneProxy and the actual subject Drone will both implement the same interface IDrone. The client will talk with the drone proxy without knowing that it is not talking to the real subject. The drone proxy would in turn forward requests from the client to the real drone object running in the flying drone's computer memory over a wireless connection. The action taken on the ground by the pilot against the drone proxy will be mimicked by the flying drone.</p> <pre><code>public interface IDrone {\n\n    void turnLeft();\n\n    void turnRight();\n\n    void firstMissile();\n}\npublic class DroneProxy implements IDrone {\n\n    @Override\n    public void turnLeft() {\n        // forward request to the real drone to\n        // turn left over the internet\n    }\n\n    @Override\n    public void turnRight() {\n        // forward request to the real drone to\n        // turn right over the internet\n    }\n\n    @Override\n    public void firstMissile() {\n        // forward request to the real drone to\n        // fire missile\n    }\n}\npublic class Client {\n\n    public void main(DroneProxy droneProxy) {\n\n        // perpetual loop that received pilot actions\n        while (true) {\n\n            Scanner scanner = new Scanner(System.in);\n            String action = scanner.nextLine();\n\n            switch (action) {\n            case \"left\": {\n                droneProxy.turnLeft();\n                break;\n            }\n\n            case \"right\": {\n                droneProxy.turnRight();\n                break;\n            }\n\n            case \"fire\": {\n                droneProxy.firstMissile();\n                break;\n            }\n\n            default:\n                System.out.println(\"Invalid Action\");\n            }\n        }\n    }\n}\n/*The object of class Drone which will be part of the code that runs on the hardware of the flying drone and controls its flight may look like below:*/\npublic class Drone implements IDrone {\n\n    @Override\n    public void turnLeft() {\n        // receives the request and any method parameters\n        // over the internet to turn the drone to its left.\n    }\n\n    @Override\n    public void turnRight() {\n        // receives the request and any method parameters\n        // over the internet to turn the drone to its right.\n    }\n\n    @Override\n    public void firstMissile() {\n        // receives the request and any method parameters\n        // over the internet to fire a missile\n    }\n}\n</code></pre> <p>Note we have skipped the technological details for transmitting the request and the method parameters over the wire as they may vary from language to language and don't affect the spirit of the pattern.</p>"},{"location":"self/programming/design_patterns/java/Structural/proxy/#other-examples","title":"Other Examples","text":"<p>java.lang.reflect.Proxy is an example of the proxy pattern.</p> <p>java.rmi.* package contains classes for creating proxies. RMI is Remote Method Invocation. It is a mechanism that enables an object on one Java virtual machine to invoke methods on an object in another Java virtual machine. RMI uses marshalling to send method parameters over the wire and the subject unmarshalls them back into objects.</p>"},{"location":"self/programming/design_patterns/java/Structural/proxy/#caveats","title":"Caveats","text":"<p>A proxy may also be responsibile for additional house-keeping tasks such as deleting the subject, keeping a reference count to the real subject or encoding requests before sending them to the real subject over the wire.</p>"},{"location":"self/programming/design_patterns/java/Structural/structural/","title":"Structural","text":"<ul> <li>Decorator</li> <li>Proxy</li> </ul> <p>Structural patterns are concerned with the composition of classes i.e. how the classes are made up or constructed. These include:</p> <ul> <li> Adapter Pattern</li> <li> Bridge Pattern</li> <li> Composite Pattern</li> <li> Decorator Pattern</li> <li> Facade Pattern</li> <li> Flyweight Pattern</li> <li> Proxy Pattern</li> </ul>"},{"location":"self/programming/design_patterns/java/Structural/structural/#decorator-pattern","title":"Decorator Pattern","text":"<p>The decorator pattern can be thought of as a wrapper or more formally a way to enhance or extend the behavior of an object dynamically. The pattern provides an alternative to subclassing when new functionality is desired. A prominent example of this pattern is the java.io package, which includes several decorators. For example the BufferedInputStream wraps the FileInputStream to provide buffering capabilities.</p> <p></p> Decorator"},{"location":"self/programming/design_patterns/java/Structural/structural/#proxy-pattern","title":"Proxy Pattern","text":"<p>In a proxy pattern setup, a proxy is responsible for representing another object called the subject in front of clients. The real subject is shielded from interacting directly with the clients. The java.rmi.* package contains classes for creating proxies. RMI is Remote Method Invocation. It is a mechanism that enables an object on one Java virtual machine to invoke methods on an object in another Java virtual machine.</p> <p></p> Proxy"},{"location":"self/programming/design_patterns/java/Structural/structural/#adapter-pattern","title":"Adapter Pattern","text":"<p>The Adapter pattern allows two incompatible classes to interoperate that otherwise can't work with eachother. Consider the method asList() offered by java.util.Arrays as an exampe of the adapter pattern. It takes an array and returns a list.</p>"},{"location":"self/programming/design_patterns/java/Structural/structural/#bridge-pattern","title":"Bridge Pattern","text":"<p>The bridge pattern describes how to pull apart two software layers fused together in a single class hierarchy and change them into parallel class hierarchies connected by a bridge</p>"},{"location":"self/programming/design_patterns/java/Structural/structural/#composite-pattern","title":"Composite Pattern","text":"<p>The pattern allows you to treat the whole and the individual parts as one. The closest analogy you can imagine is a tree. The tree is a recursive data-structure where each part itself is a sub-tree except for the leaf nodes.</p>"},{"location":"self/programming/design_patterns/java/Structural/structural/#facade-pattern","title":"Facade Pattern","text":"<p>The facade pattern is defined as a single uber interface to one or more subsystems or interfaces intending to make use of the subsystems easier.</p>"},{"location":"self/programming/design_patterns/java/Structural/structural/#flyweight-pattern","title":"Flyweight Pattern","text":"<p>The pattern advocates reusing state among a large number of fine grained object. Methods java.lang.Boolean.valueOf() and java.lang.Integer.valueOf() both return flyweight objects.</p>"},{"location":"self/programming/microservice/architecture/","title":"Architecture","text":""},{"location":"self/programming/microservice/architecture/#architecture","title":"Architecture","text":""},{"location":"self/programming/microservice/architecture/#macro","title":"Macro","text":""},{"location":"self/programming/microservice/architecture/#macro-with-micro","title":"Macro with Micro","text":"<p>he overarching macro architecture applies to all microservices, whereas the micro architecture deals with individual microservices so that each microservice has its own microarchitecture. It matter, if the microservices can work with each other. So we need to have macro for them to work with each other.</p> <ul> <li> The micro architecture comprises all decisions that can be made individually for each microservice.</li> <li> The macro architecture consists of all decisions that can be made at a global level and apply to all microservices.</li> </ul> <p></p> Micro and Macro Architecture"},{"location":"self/programming/microservice/architecture/#ddd","title":"DDD","text":""},{"location":"self/programming/microservice/architecture/#bounded-context-and-strategic-design","title":"Bounded context and strategic design","text":"<p>A macro architecture divides the domains into coarse-grained modules. These modules are further divided as part of the micro architecture.</p>"},{"location":"self/programming/microservice/architecture/#an-example-for-a-domain-architecture","title":"An example for a domain architecture","text":"<p>The drawing above shows an example of the division of a system into multiple domain modules. In this division, each module has its own domain model. Let\u2019s discuss each. - [x] To search successfully, data, such as descriptions, images or prices, must be stored for the products. Important customer data can include, for example, the recommendations that can be determined based on past orders. - [x] To process orders in the order process module, the contents of the shopping cart have to be tracked. For products, only basic information is required such as name and price. Similarly, not too much data concerning the customer is necessary. The most important component of the domain model of this module is the shopping cart. It is then turned into an order that has to be handed over and processed by the other bounded contexts. - [x] For payment, the payment-associated information like credit card numbers has to be kept for each customer. - [x] For shipping, the delivery address is required information about the customer while the size and the weight are necessary information about the product. This list reflects that the modules require different domain models. Not only does the data concerning customer and product differ but so does the entire model and the logic.</p>"},{"location":"self/programming/microservice/architecture/#domain-driven-design-definition","title":"Domain-driven design: definition","text":"<p>Domain-driven design (DDD) offers a collection of patterns for the domain model of a system. For microservices, the patterns in the area of strategic design are the most interesting. They describe how a domain can be subdivided. Consequently, search, order process, payment, and shipping are such bounded contexts because they each have their own domain model.</p> <p>Here are some books you could look into if you are interested in Domain-Driven Design:</p> <ul> <li> Domain-driven design offers many more patterns that, for example, facilitate the model of individual modules. The original DDD book provides a lot more information. It introduces the term \u201cdomain-driven design\u201d and comprehensively describes DDD.</li> <li> The more compact book Domain-driven Design Distilled focuses on design, bounded context, and domain events.</li> <li> The Domain-Driven Design Reference is also by the author of the original DDD book. It contains all DDD patterns but without any additional explanation or examples.</li> </ul>"},{"location":"self/programming/microservice/architecture/#multiple-bounded-contexts","title":"Multiple bounded contexts","text":"<p>It would be conceivable to implement a domain model that comprises multiple bounded contexts. However, such a model would not be the easiest solution.</p> <p>For example, a price change affects search; however, it must not result in a price change for orders that have already been processed in payment. It is easier to store only the current price of a product in the bounded context search, and to store the price of the product of each order in payment, which can also comprise rebates and other complex logic.</p> <p>Therefore, the simplest design consists of multiple specialized domain models that are valid only in a certain context. Each domain model has its own model for business objects such as customers or products.</p> <p><code>Each domain model is valid only in a bounded context</code></p>"},{"location":"self/programming/microservice/architecture/#domain-events-between-bounded-contexts","title":"Domain events between bounded contexts","text":"<p>For the communication between bounded contexts, we can use domain events.</p> <p>Events can be useful for integrating bounded contexts. Domain events are a part of the domain model as they represent something that happened in the domain. That means they should also be relevant to domain experts.</p> <p><code>Example</code> - [x] Ordering a shopping cart can be modeled as such an event. - [x] This event is triggered by the bounded context order process and is received by the bounded contexts shipping and payment to initiate shipping and invoicing of the order.</p>"},{"location":"self/programming/microservice/architecture/#bounded-contexts-and-microservices","title":"Bounded contexts and microservices","text":"<p>Bounded contexts divide a system by domains. They do not have to be microservices. They can also be implemented as modules in a deployment monolith. However, since the microservices are part of a larger system, dependencies between the modules cannot be completely avoided. ommunication between bounded contexts can be triggered from Domain events.</p>"},{"location":"self/programming/microservice/architecture/#evolution","title":"Evolution","text":"<p>There are a number of reasons why new bounded context, and therefore new microservices, might be created:</p> <ol> <li>Over time, new functionalities might justify new bounded contexts.</li> <li>It might become apparent that one bounded context should really be split into two. That might be the case because new logic is added to the bounded context, or the team understands the bounded context better.</li> <li>New microservices might be created by dividing a current one due to a technical reason (recall division by technicality!).     One reason may be to make scalability easier. A microservice may be split in two since the resulting microservices will be smaller and therefore easier to scale. Such reasons might also lead to a larger number of microservices.</li> </ol> <p><code>Good Question</code></p> <p><code>Suppose you\u2019re given the following e-commerce system:</code></p> <ul> <li> Customer registration</li> <li> Order process         Data validation         Freight charge calculation</li> <li> Payment</li> <li> Shipping What will happen to the rest of the modules if the internal architecture of order process is changed as follows:</li> <li> Customer registration</li> <li> Order process         Data validation         *Input sanitation         Freight charge calculation</li> <li> Payment</li> <li> Shipping</li> </ul> <p><code>Answer:</code> Nothing - the rest of the modules will not have to change anything.</p>"},{"location":"self/programming/microservice/architecture_decisions/","title":"Architecture decisions","text":""},{"location":"self/programming/microservice/architecture_decisions/#db-level","title":"DB Level","text":"<p>Micro: Each microservice can also have its own instance of the database. If databases were defined at the micro architecture.</p> <p>Macro: To avoid needing many different databases, the database can be defined as part of the macro architecture for all microservices.</p>"},{"location":"self/programming/microservice/architecture_decisions/#ui-level","title":"UI Level","text":"<p>Micro: sometimes a system has different types of users (back office and customers, for example) with different requirements for the UI which are often incompatible with a uniform look and feel. A micro architecture decision for the UI is suitable in this case.</p> <p>Macro: Often a system should have a uniform UI; therefore, the look and feel must be a macro architecture decision.</p>"},{"location":"self/programming/microservice/architecture_decisions/#documentation-level","title":"Documentation Level","text":"<p>Micro: The documentation should be part of the micro architecture if the same team will build and maintain the microservice.</p> <p>Macro: Of course, the decision about the documentation can also be part of the macro architecture.</p>"},{"location":"self/programming/microservice/architecture_decisions/#communication-protocol-level","title":"Communication protocol Level","text":"<p>The communication protocol of the microservices is a typical macro architecture decision.</p> <p>Only if all microservices provide a uniform interface, for example, a REST interface or a messaging interface, can they communicate with each other coherently. In addition, the data format must be standardized. It makes a difference whether systems communicate with JSON or XML, for example.</p> <p>If the communication protocol was a microservice decision, i.e., a different communication channel between each microservice, a coherent system will not exist and will disintegrate into islands that communicate with each other in different ways. Authentication</p> <p>With authentication, a user proves their identity. This can be done with a password and a username, to name a common example.</p> <p>Since it is unacceptable for the user to re-authenticate with every microservice, the entire microservice system should use a single authentication system. The user then enters a username and password once and can then use any microservice. Integration</p> <p>Integration testing technology is also a typical macro architecture decision. All microservices must be tested together, so they must run together in an integration test. The macro architecture must define the necessary prerequisites for this. Typical micro architecture decisions</p> <p>Certain decisions should be taken for each microservice individually. Therefore, they are typically part of the micro architecture. Authorization</p> <p>The authorization of the user determines what a user is allowed to do. The authorization should be done in the respective microservice.</p> <p>Which user is allowed to initiate what action, i.e., authorization, is part of the domain logic, and therefore belongs to the microservice like the other domain logic.</p> <p>If this was decided at the macro architecture, the domain logic would be implemented in a microservice itself, but the decision about which part of the domain logic is available to which user would be made centrally, which is difficult, especially with complex rules.</p> <p>For example, if orders up to a certain upper limit can be triggered by certain users, authorization, concrete upper limits, and possible exceptions belong to the microservice order.</p> <p>Authentication assigns the user roles used in authorization.</p> <p>For example, a microservice can define which actions a user with the role of customer can trigger and which actions a user with the role of call center agent can trigger.</p>"},{"location":"self/programming/microservice/architecture_decisions/#test-level","title":"Test Level","text":"<p>The testing can be different for each microservice. Even the tests are ultimately part of the domain logic.</p> <p>In addition, there may be different non-functional requirements for each microservice.</p> <pre><code>For example, one microservice can be particularly performance-critical, whereas another is more safety-critical.\n</code></pre> <p>These risks must be covered by an individual focus in the tests.</p> <p>Since the tests can be different, the continuous delivery pipeline is also different for each microservice. It must include the relevant tests. Of course, the technology for the continuous delivery pipeline can be standardized.</p> <p>For example, each pipeline can use a tool like Jenkins. What happens in the respective pipelines, however, depends on the respective microservice.</p> <p></p> Descision"},{"location":"self/programming/microservice/index_microservice/","title":"Index","text":"<ul> <li>Microservice<ul> <li>Architecture<ul> <li>Strategic Patterns</li> <li>Architecture Decisions</li> <li>Operation </li> <li>ISA </li> </ul> </li> </ul> </li> </ul>"},{"location":"self/programming/microservice/isa/","title":"Isa","text":""},{"location":"self/programming/microservice/isa/#independent-systems-architecture-principles","title":"Independent Systems Architecture Principles","text":"<p>ISA (Independent Systems Architecture) is the term for a collection of fundamental principles for microservices. It is based on experiences with microservices gained from many different projects. The name already suggests that these principles aim to build software out of independent systems. Macro and micro architecture are very important for this goal. A minimal macro architecture leaves a lot of freedom to the level of the micro architecture, making the systems independent. Technical decisions can be made for each system without influencing the other systems. ISA defines the term micro and macro architecture. Also, the principles explain what the minimum requirements for macro and micro architecture are.</p>"},{"location":"self/programming/microservice/isa/#conditions","title":"Conditions","text":"<p>Must is used for principles when they absolutely have to be adhered to.</p> <p>Should describes principles which have many advantages but do not have to be strictly followed. We\u2019ll now discuss each principle. The ISA principles are not only a great guideline for building microservices, but they also explain why macro and micro architecture are so important.</p>"},{"location":"self/programming/microservice/isa/#principle-1-the-system-must-be-divided-into-modules","title":"Principle #1: The system must be divided into modules","text":"<p>The system must be divided into modules that offer interfaces. Accessing modules is only possible via these interfaces. Therefore, modules may not depend directly on the implementation details of another module, such as the data model in a database.</p> <p><code>Evaluation</code> The first ISA principle states that a system must be built from modules. This is common knowledge.</p> <p></p> System Modularization"},{"location":"self/programming/microservice/isa/#principle-2-two-separate-levels-of-architectural-decisions","title":"Principle #2: Two separate levels of architectural decisions","text":"<p>The system must have two clearly separated levels of architectural decisions:</p> <ul> <li> Macro architecture comprises decisions which concern all modules. All further principles are part of the micro architecture.</li> <li> Micro architecture comprises those decisions which can be made differently for each individual module.</li> </ul> <p><code>Evaluation</code></p> <p>The second principle defines two levels of architecture: macro and micro architecture.</p> <p></p> Micro Macro"},{"location":"self/programming/microservice/isa/#principle-3-modules-must-be-separate-processescontainersvms","title":"Principle #3: Modules must be separate processes/containers/VMs","text":"<p>Modules must be separate processes, containers, or virtual machines to maximize independence.</p> <p><code>Evaluation</code></p> <p>In a deployment monolith, most of the decisions will be on the macro architecture level. For example, a deployment will be written in one programming language, so the programming language has to be a decision on the macro architecture level. The same is true for frameworks and most of the other technologies.</p> <p>To make more decisions on the micro architecture level, each module must be implemented in a separate container as this principle states. ISA says that the reason why microservices run in containers is the additional technological freedom that cannot be achieved in a deployment monolith. Therefore, microservices add more independence and decoupling to the architecture.</p> <p>An approach where each microservice is a WAR and all run together in one Java application server does not fit this principle. Actually, the compromise concerning the free choice of technology and the robustness is so high that this approach usually does not make a lot of sense.</p> <p>Because decoupling is so important, ISA and microservices actually provide fundamental improvements to modularization.</p> <p></p> Modules are separate processes/containers/virtual machines"},{"location":"self/programming/microservice/isa/#principle-4-standardized-integration-communication","title":"Principle #4: Standardized integration &amp; communication","text":"<p>The choice of integration and communication options must be limited and standardized for the system.</p> <pre><code>The integration might be done with synchronous or asynchronous communication, and/or on the UI level.\nCommunication must use a limited set of protocols like RESTful HTTP or messaging. It might make sense to use just one protocol for each integration option.\n</code></pre> <p><code>Evaluation</code></p> <p>Although the goal of ISA is to create a minimal macro architecture, some decisions still need to be made on the macro level. This is what the rest of the principles explain. As a start, principle four states that integration and communication must be standardized. The last three chapters of this course discuss a few technology stacks for integration and communication.</p> <p>The decision to use a specific technology for integration and communication influences all modules and must, therefore, be done on the macro architecture level. It is therefore also a very important decision in microservices systems.</p> <p>Without a common integration approach and communication technology, it is hard to consider the system as a system and not just a few services that can barely communicate with each other.</p>"},{"location":"self/programming/microservice/isa/#principle-5-standardized-metadata","title":"Principle #5: Standardized metadata","text":"<p>Metadata, for example, for authentication, must be standardized. Otherwise, the user would need to log in to each microservice.</p> <pre><code>This might be done using a token that is transferred with each call/request.\nOther examples might include a trace ID to track a call and its dependent calls through the microservices.\n</code></pre> <p><code>Evaluation</code></p> <p>This principle states that metadata for tracing and authentication must be standardized. Such metadata must be transferred between the microservices and must, therefore, also be a part of the macro architecture. This course does not discuss security aspects of microservices, including metadata for authentication.</p>"},{"location":"self/programming/microservice/isa/#principle-6-independent-continuous-delivery-pipelines","title":"Principle #6: Independent continuous delivery pipelines","text":"<p>Each module must have its own independent continuous delivery pipeline. Tests are part of the continuous delivery pipeline; therefore, the tests of the modules have to be independent, too.</p> <p><code>Evaluation</code></p> <p>This principle extends the idea of independent deployment as the definition of microservices from the last chapter.</p> <p></p> Each module has it's own independent continuous delivery pipeline"},{"location":"self/programming/microservice/isa/#principle-7-operations-should-be-standardized","title":"Principle #7: Operations should be standardized","text":"<p>Operations should be standardized. There can be exceptions from the standard when a module has very specific requirements. These operations comprise:</p> <ul> <li> configuration</li> <li> deployment</li> <li> log analysis</li> <li> tracing</li> <li> monitoring</li> <li> alarms</li> </ul> <p><code>Evaluation</code></p> <p>This principle says that the operations of microservices should be standardized. It is not in all cases necessary to standardize operations. With a separate operations department, standardization is the only way to handle a large number of microservices.</p> <p>However, with a \u201cyou build it \u2013 you run it\u201d organization, standards are not necessary as each team operates their microservices. Actually, a standardized operations approach might not fit all microservices. In that case, the teams need to come up with their own operations technologies. A standard may not be useful then.</p>"},{"location":"self/programming/microservice/isa/#principle-8-standardized-interface","title":"Principle #8: Standardized interface","text":"<p>Standards for operations, integration, or communication should be enforced on the interface level.</p> <p>For example, the communication protocol and data structures could be standardized to a specific JSON payload format exchanged using HTTP, but every module should be free to use a different REST library/implementation.</p> <p><code>Evaluation</code></p> <p>This principle states that standards should only be defined on the interface level. The technologies discussed throughout the last three chapters can be used in this way. They provide interfaces and client libraries for all commonly used programming languages.</p>"},{"location":"self/programming/microservice/isa/#principle-9-modules-have-to-be-resilient","title":"Principle #9: Modules have to be resilient","text":"<p>Modules have to be resilient. This means that:</p> <ul> <li> They may not fail when other modules are unavailable or when communication problems occur.</li> <li> They must be able to shut down without losing data or state.     It must be possible to move them to other environments (server, networks, configurations and so on) without the module failing.</li> </ul> <p><code>Evaluation</code></p> <p>This principle addresses resilience. Asynchronous communication makes resilience easier. If a microservice fails, a message will be transferred later but the failed microservice will not cause another microservice to fail.</p> <p></p> Modules must be resilient"},{"location":"self/programming/microservice/microservice/","title":"Microservice","text":""},{"location":"self/programming/microservice/microservice/#microservice","title":"Microservice","text":"<p>Microservices are independently deployable modules. In practice, microservices can vary hugely in size. New microservices can replace parts of the old system. A key feature of the microservices architecture is that a new version of the entire application is not deployed when a change is made to any one microservice. Thus, with the help of microservices, teams can act independently regarding domain logic and technology. This minimizes the coordination effort required for large projects. No pre-existing codebase has to be used. In addition, developers can employ a completely different technology stack.</p>"},{"location":"self/programming/microservice/microservice/#advantages-of-this-microservice-definition","title":"Advantages of this microservice definition","text":"<p>The definition of microservices as independently deployable modules has several advantages:</p> <ul> <li> It is very compact.</li> <li> It is very general and covers all kinds of systems which are commonly denoted as microservices.</li> <li> The definition is based on modules and is thus a well-understood concept. This allows us to adopt many ideas concerning modularization. This definition also highlights that microservices are part of a larger system and cannot function entirely on their own. Microservices have to be integrated with other microservices.</li> <li> The independent deployment is a feature that creates numerous advantages and is therefore very important. Thus, the definition, in spite of its brevity, explains what the most essential feature of a microservice really is.</li> </ul>"},{"location":"self/programming/microservice/microservice/#sustainable-development","title":"Sustainable development","text":""},{"location":"self/programming/microservice/microservice/#replaceability-of-microservices","title":"Replaceability of microservices","text":"<p>To achieve replaceability, the dependencies between microservices have to be managed appropriately.</p> <p><code>Good Qustion</code> Why is it NOT likely that a developer will introduce a new dependency between two modules in a microservice architecture? <code>Answer</code> Because microservices have clear boundaries due to their interface and to introduce a dependency, they will have to call it.</p>"},{"location":"self/programming/microservice/microservice/#dependencies-have-to-be-managed","title":"Dependencies have to be managed","text":"<p>Microservices have clear boundaries due to their interface irrespective of whether the interface is implemented as a REST interface or via messaging. When a developer introduces a new dependency on such an interface, they will notice this because the interface has to be called appropriately. For this reason, it is unlikely that architecture violations will occur at the level of dependencies between microservices. The interfaces between microservices are in a way architecture firewalls since they prevent architecture violations. The concept of architecture firewalls is also implemented by architecture management tools like Sonargraph, Structure101, or jQAssistant. Advanced module concepts can also, generate such a firewall. In the Java world, OSGi limits access and visibility between modules. Access can even be restricted to individual packages or classes.</p> <p>The architecture at the level of dependencies between microservices also remains maintainable. Developers cannot unintentionally add dependencies between microservices. Therefore, microservices can ensure a high architecture quality in the long term both inside each microservice and between the microservices.</p>"},{"location":"self/programming/microservice/microservice/#continuous-delivery","title":"Continuous delivery","text":"<p>Continuous delivery is an approach where software is continuously brought into production with the help of a continuous delivery pipeline. The pipeline brings the software into production via different phases.</p>"},{"location":"self/programming/microservice/microservice/#phases","title":"Phases","text":"<p>Typically, the software compilation, unit tests, and static code analysis are performed in the commit phase.  In the acceptance test phase, automated tests assure the correctness of the software regarding domain logic.     Capacity tests check the performance at the expected load. Explorative tests serve to perform not-yet-considered tests or to examine new functionalities. In this manner, explorative tests can analyze aspects that are not yet covered by automated tests. In the end, the software is brought into production.</p> <p>Microservices represent independently deployable modules. Therefore each microservice has its own continuous delivery pipeline. Setting up an environment to integration test a microservices architecture can be complicated.</p>"},{"location":"self/programming/microservice/microservice/#microservices-facilitate-continuous-delivery","title":"Microservices facilitate continuous delivery","text":"<p>The continuous delivery pipeline is significantly faster because the deployment units are smaller. </p> <p>The tests are also faster because they need to cover fewer functionalities.</p> <p>Building up a continuous delivery pipeline is easier for microservices. Setting up an environment for a deployment monolith is complicated.</p> <p>The deployment of a microservice poses a smaller risk than the deployment of a deployment monolith.</p>"},{"location":"self/programming/microservice/microservice/#robustness","title":"Robustness","text":"<p>When a memory leak exists in a microservice, only this microservice is affected and crashes. The other microservices keep running. Of course, they have to compensate for the failure of the crashed microservice; this is called resilience.</p>"},{"location":"self/programming/microservice/microservice/#independent-scaling","title":"Independent scaling","text":"<p>Most of the time, scaling the whole system is not required. </p> <ul> <li> Each microservice can be independently scaled.</li> <li> the microservices naturally have to fulfill certain requirements. For example, they must be stateless. Otherwise, requests of a specific client cannot be transferred to another instance, because this instance then would not have the state specific to that client.</li> <li> In the case of a microservice, the scaling can be more fine-grained so that normally fewer additional services are necessary and the basic requirements are less complex.</li> </ul>"},{"location":"self/programming/microservice/microservice/#security","title":"Security","text":"<p>For example, it is possible to introduce firewalls into the communication between microservices. Besides, the communication between microservices can be encrypted to guarantee that the communication really originates from another microservice and is authentic.</p>"},{"location":"self/programming/microservice/microservice/#isolation","title":"Isolation","text":"<ul> <li> In the end, many advantages of microservices can be traced back to a stronger isolation.</li> <li> In isolation, a microservice can be replaced with a new microservice. This enables the low-risk replacement of microservices and allows one to keep the architecture of the individual microservices clean. Thus, isolation facilitates the long-term maintainability of the software.</li> </ul> Isolation as the Source of the Advantages of Microservices"},{"location":"self/programming/microservice/microservice/#microservices-involve-trade-offs","title":"Microservices involve trade-offs","text":"<p>For example, when robustness is the goal of introducing microservices, the microservices have to be implemented as separate Docker containers.         Each Docker container can crash without affecting the other ones.</p> <p>If robustness does not matter, other alternatives can be considered. For example, multiple microservices can run together as Java web applications in one Java application server. In this case, they all run in one process and therefore are not isolated in respect to robustness. Still they are independently deployable. - [x] A memory leak in any of the microservices will cause them all to fail. - [x] However, such a solution is easier to operate and therefore might be the better trade-off in the end.</p>"},{"location":"self/programming/microservice/microservice/#two-levels-of-microservices-domain-and-technical","title":"Two levels of microservices: Domain and technical","text":"<p>The technical and organizational advantages point to two levels at which a system can be divided into microservices.</p> <ul> <li> A coarse-grained division by domain enables the teams to develop largely independently and allows them to roll out a new feature with the deployment of a single microservice if it concerns just this one domain, as it usually does. However, sometimes multiple domains are involved and more than one microservice must be deployed. For example, in an e-commerce system, customer registration and the order process can be examples of such coarse-grained microservices.</li> <li> For technical reasons some microservices can be further divided. These microservices can then be scaled independently of the other microservices. When, for example, the last step of the order process is under especially high load, this last step can be implemented in a separate microservice. The microservice belongs to the domain of the order process, but for technical reasons, it is implemented as a separate microservice. This is an example of a technical division.</li> </ul> <p>The drawing above shows an example for the two levels. Based on the domains, an e-commerce application is divided into the microservices:</p> <ul> <li> Search</li> <li> Full-text search</li> <li> Category-based search</li> <li> Check out</li> <li> Payment</li> <li> Delivery</li> </ul> <p>Search is further subdivided. The full-text search is separated from the category-based search.</p> <p><code>Good Question:</code> Suppose you\u2019re designing an application where one microservice gets data from another. If this data fetching fails, the functionality of the app will be compromised. What would be the best course of action in this situation? As the microservices communicate over the network, which is unreliable. The app should not depend on this communication. So the solution would be merge the two microservices into one.</p>"},{"location":"self/programming/microservice/operation/","title":"Operation","text":""},{"location":"self/programming/microservice/operation/#operation-micro-or-macro-architecture","title":"Operation: Micro or Macro Architecture?","text":"<p>Some decisions in the area of micro and macro architecture mostly influence the operation of the applications. Let\u2019s take a look at a few.</p>"},{"location":"self/programming/microservice/operation/#configuration","title":"Configuration","text":"<p>We must define the interface with which a microservice obtains its configuration parameters. For example, a microservice can get these settings via an environment variable or read them from a configuration file. These parameters include both:</p> <ul> <li> Technical parameters such as thread pool sizes</li> <li> Parameters for the domain logic</li> </ul> <p>The decision of how to store and generate the configuration data is independent of these parameters. The data can be stored in a database, for example. Either configuration files or environment variables can be generated from the data in the database.</p> <p>Note that the information on which computer and under which port a microservice can be reached, does not belong to the configuration, but to the service discovery.</p> <p>Configuring passwords or certificates is also a challenge that can be solved with other tools. To do this, Vault is a good choice because this information must be stored in a particularly secure way and must be visible to as few employees as possible in order to prevent unauthorized access to production data.</p>"},{"location":"self/programming/microservice/operation/#monitoring","title":"Monitoring","text":"<p>Monitoring is about the technology that tracks metrics. Metrics provide information about the state of a system. Examples include the number of requests processed per second or business metrics, such as revenue.</p> <p>The question of which technology is used to track the metrics is independent of which metrics are captured. Every microservice has different metrics because every microservice has different challenges. For example, if a microservice is under a very high load, then performance metrics are useful.</p>"},{"location":"self/programming/microservice/operation/#log-analysis","title":"Log Analysis","text":"<p>Log analysis defines a tool for managing logs.</p> <p>Although logs were originally stored in log files, they are now stored on specialized servers. This has a few advantages. For example, it makes it easier to analyze and search the logs, even with large amounts of data and many microservices.</p> <p>In addition, new instances of a microservice can be started when the load increases and can be deleted again after the load decreases. In this case, the logs of this microservice instance should still be available, even if the microservice was deleted long ago due to a decreasing load. If the logs are stored only on a local device, the logs would be gone after the microservice has been deleted.</p>"},{"location":"self/programming/microservice/operation/#deployment-technology","title":"Deployment Technology","text":"<p>Deployment technology determines how the microservices are rolled out. For example, this can be done with Docker images (see chapter 6), Kubernetes Pods, a PaaS, or installation scripts.</p> <p>These decisions define how a microservice behaves from an operational point of view. Typically, these decisions are either all part of the macro architecture or the micro architecture.</p>"},{"location":"self/programming/microservice/operation/#you-build-it-you-run-it-operation-as-micro-architecture","title":"\u201cYou build it, you run it\u201d: operation as micro architecture","text":"<p>There is a form of organization in which operational aspects have to be part of the micro architecture. If the same team is to develop and operate the microservice, they must also be able to choose the technology. This approach can be described as \u201cyou build it, you run it\u201d. The teams are each responsible for a microservice, for its operation and development. You can only expect this level of responsibility from the team if you allow them to choose their own technologies.</p>"},{"location":"self/programming/microservice/operation/#operation-as-a-whole-is-micro-or-macro-architecture","title":"Operation as a whole is micro or macro architecture","text":"<p>Decisions for operation can be taken either at the level of micro or macro architecture. Making operation decisions part of the macro architecture is useful if there is a separate operations team, while a \u201cyou build it, you run it\u201d organization must make these decisions at the level of micro architecture. The drawing below illustrates this point.</p> <p></p> Operation"},{"location":"self/programming/microservice/pattern-strategic/","title":"Pattern strategic","text":""},{"location":"self/programming/microservice/pattern-strategic/#strategic-design","title":"Strategic design","text":"<p>The division of the system into different bounded contexts is part of strategic design, which belongs to the practices of DDD. The drawing above shows the fundamental terms of strategic design.</p> <p></p> Bounded Context <p><code>Upstream: means making an influence</code></p> <ul> <li> The bounded context is the context in which a specific domain model is valid.</li> <li> The bounded contexts depend on each other. Usually, each bounded context is implemented by one team.</li> <li> The upstream team can influence the success of the downstream team. However, the downstream team cannot influence the success of the upstream team.     For example, the success of the team responsible for payment depends on the order process team.     If data such as prices or credit card numbers are not part of the order, it is impossible to do the payment.     However, the order process does not depend on the payment to be successful.     Therefore, order processing is upstream. It can make payment fail. Payment is downstream since it cannot make the order process fail.</li> </ul>"},{"location":"self/programming/microservice/pattern-strategic/#the-customersupplier-pattern","title":"The customer/supplier pattern","text":"<p>With this customer/supplier pattern, the supplier is upstream and the customer is downstream. However, the customer can factor their priorities into the planning of the upstream project.</p> <p><code>Example</code> In the drawing below, for example, payment uses the model of the order process. However, payment defines requirements for the order process. Payment can only be done successfully if the order process provides the required data.</p> <p>So, payment can become a customer of the order process. That way the customer\u2019s requirements can be included in the planning of the order process.</p>"},{"location":"self/programming/microservice/pattern-strategic/#the-conformist-pattern","title":"The conformist pattern","text":"<p>Conformist means that a bounded context simply uses a domain model from another bounded context.</p> <p><code>Example</code> In the drawing below, the bounded contexts, statistics, and order process, both use the same domain model. The statistics are part of a data warehouse. They use the domain model of the order process bounded context and extract some information relevant to store in the data warehouse.</p> <p>However, with the conformist pattern, the data warehouse team does not have a say in case of changes to the bounded context.</p> <p>The data warehouse team could not demand additional information from the other bounded context. However, it is still possible that they would receive additional information out of altruism. Essentially, the data warehouse team is not deemed important enough to get a more powerful role.</p> <p></p> Conformist: Domain Model Used in Other Bounded Context"},{"location":"self/programming/microservice/pattern-strategic/#the-anti-corruption-layer","title":"The anti-corruption layer","text":"<p>In the case of an anti-corruption layer (ACL) pattern, the bounded context does not directly use the domain model of the other bounded context, but it contains a layer for decoupling its own domain model from the model of the bounded context.</p> <p>This is useful in conjunction with the conformist pattern to generate a separate model decoupled from the other model.</p> <p><code>Example</code></p> <p>The drawing below shows that the bounded context shipping uses an ACL at the interface to the bounded context legacy so that both bounded contexts have their own independent domain models.</p> <p>This ensures that the model in the legacy system does not affect the bounded context shipping. Shipping can implement a clean model in its bounded context.</p> <p></p> ACl"},{"location":"self/programming/microservice/pattern-strategic/#the-separate-ways-pattern","title":"The separate ways pattern","text":"<p>With the separate ways pattern, the bounded contexts are not related at the software level although a relation would be conceivable.</p> <p><code>Example</code></p> <p>Let\u2019s assume that in the e-commerce scenario, a new bounded context, purchasing, for the purchase department is added. This bounded context could collect the data for listing products, but it is implemented differently.</p> <p>With the separate ways pattern, the purchasing would be separate from the remaining system. When the goods are delivered, a user would use another bounded context like listing to enter the necessary data and list the products.</p> <p>The purchasing causes the shipping, which in turn triggers the delivery, and thereby triggers the user to list the product with a different bounded context.</p> <p><code>purchasing \u2192 shipping \u2192 delivery \u2192 list product</code></p> <p>The shipping of the products is one event in the real world, however, in the software, the systems are separate.</p> <p>Consequently, the systems are independent and can be evolved completely independently.</p> <p></p> Seperate"},{"location":"self/programming/microservice/pattern-strategic/#the-shared-kernel-pattern","title":"The shared kernel pattern","text":"<p>The Shared Kernel Pattern describes a common core that is shared by multiple bounded contexts. The data of a customer is an example of such a scenario.</p> <p>However, the shared kernel comprises shared business logic and shared database schema and therefore should not be used in a microservices environment.</p> <p>It is an anti-pattern for microservices systems. But because DDD can also be applied to deployment monoliths, there are still scenarios in which a shared kernel makes sense. <code>Example</code></p> <p>In the drawing below the domain model order process and the payment possess a shared kernel.</p> <p></p> Shared-kernel"},{"location":"self/programming/microservice/pattern-strategic/#the-open-host-service-pattern","title":"The open host service pattern","text":"<p>Open host service means that the bounded context offers a generic interface with several services. Other bounded contexts can implement their own integration with these services. This pattern is frequently found at public APIs on the Internet. However, it is also a possible alternative within an enterprise.</p>"},{"location":"self/programming/microservice/pattern-strategic/#the-published-language-model","title":"The published language model","text":"<p>Published language is a domain model accessible by all bounded contexts. For example, this can be a standard format such as #EDIFACT for transactions between companies. But it is also possible to define a data structure that is only used inside a company and published, for example, in Wiki.</p> <p><code>Example</code></p> <p>These models can be used together. The open host service can use published language for communication. For example, the order process might accept orders from external clients. Providing a specific interface for each external client is a lot of effort, so there is a generic open host service and a published language for orders. Each external client can use this interface to submit orders to the bounded context order process.</p> <p></p> Open Host Service and Published Language"},{"location":"self/programming/microservice/pattern-strategic/#selecting-patterns","title":"Selecting patterns","text":"<p>The choice of patterns has to be in line with:</p> <ul> <li> The domain</li> <li> The power structures</li> <li> The communication relationships between the teams.</li> </ul> <p><code>Example</code></p> <p>When the bounded context payment does not obtain the necessary data from the bounded context order processing, the products can be ordered but not paid for. Therefore, the customer/supplier pattern is an obvious choice.</p> <p>However, this is not a fact found in the domain, but rather a consequence of the power structure, which in turn depends on the company business model. Tradeoffs to Consider</p> <p>Of course, the selected patterns influence the effort necessary for coordination and therefore the degree of isolation between the teams. They set the rules by which the teams must work on the integration.</p> <p>Thus, a pattern like customer/supplier is not desirable as it requires a lot of coordination. Still, it might be the right solution depending on domain aspects.</p> <p>It makes little sense to use a different pattern between payment and the order process just to have less coordination. A different pattern might make it impossible for the business to succeed.</p> <p><code>Good Question</code> How to pass configuration patterns to a microservice MUST be a decision of the individual microservice. <code>Answer</code> False</p>"},{"location":"self/programming/reactive/reactive/","title":"Reactive programming","text":"<p>One way to implement a microservice is reactive programming. Oftentimes it is stated that microservices must be implemented with reactive technologies.</p> <p>This section discusses what reactive actually is and determines whether reactive technologies are truly needed for microservices.</p> <p>Similar to microservices, reactive has an ambiguous definition.</p> <p>The Reactive Manifesto defines the term \u201creactive\u201d based on the following characteristics:</p>"},{"location":"self/programming/reactive/reactive/#features","title":"Features","text":""},{"location":"self/programming/reactive/reactive/#responsive","title":"Responsive","text":"<p>Responsive means that the system responds as fast as possible.</p>"},{"location":"self/programming/reactive/reactive/#resilient","title":"Resilient","text":"<p>Because of resilience the system remains available even if parts fail.</p>"},{"location":"self/programming/reactive/reactive/#elastic","title":"Elastic","text":"<p>The system can deal with different levels of load, for instance by using additional resources. After the load peak subsides the resources are freed again.</p>"},{"location":"self/programming/reactive/reactive/#asynchronous-communication","title":"Asynchronous communication","text":"<p>The system uses asynchronous communication (message-driven).</p> <p>These characteristics are useful for microservices. They pretty much correspond to the features discussed in chapter 2 as essential characteristics of microservices.</p> <p>At first sight, it seems that microservices, in fact, must be written with reactive technologies.</p>"},{"location":"self/programming/reactive/reactive/#reactive-programming_1","title":"Reactive programming","text":"<p>However, reactive programming means something completely different. This programming concept resembles the data flow. When new data comes into the system, it is processed. A spreadsheet is an example. When the user changes a value in a cell, the spreadsheet recalculates all dependent cells.</p>"},{"location":"self/programming/reactive/reactive/#classical-server-applications","title":"Classical server applications","text":"<p>A similar approach is possible for server applications. Without reactive programming, a server application typically processes an incoming request in a thread.</p> <p>If the processing of the request requires a call to a database, the thread blocks until the result of this call arrives.</p> <p>In this model, a thread has to be provided for each request that is processed in parallel and for each network connection.</p>"},{"location":"self/programming/reactive/reactive/#reactive-server-applications","title":"Reactive server applications","text":"<p>Reactive server applications behave very differently. The application only reacts to events. It must not block because it is waiting, for instance, for I/O. Thus, an application waits for an event such as an incoming HTTP request.</p> <p>If a request arrives, the application executes the logic and then sends a call to the database at some point. However, subsequently, the application does not wait for the result of the call to the database but suspends processing the HTTP request.</p> <p>Eventually, the next event arrives, namely the result of the call to the database. The processing of the HTTP request then resumes. In this model, only one thread is needed. It processes the respective current event.</p> <p>The figure below shows an overview of this approach.</p> <p></p> Reactive-Event Loop <p>The event loop is a thread and processes one event at a time. Instead of waiting for I/O, the processing of the event is suspended.</p> <p>Once the results of the I/O operation are available, they are part of a new event which is processed by the event loop.</p> <p>In this way, a single event loop can process a plethora of network connections. However, processing of the event must not block the event loop for longer unless it is absolutely necessary. Otherwise processing of all events will be stopped.</p>"},{"location":"self/programming/reactive/reactive/#reactive-programming-and-the-reactive-manifesto","title":"Reactive programming and the reactive manifesto","text":"<p>Reactive programming can support the goals of the Reactive Manifesto:</p> <ul> <li> Responsive: The model can make the application respond faster because fewer threads are blocked. However, whether this really leads to an advantage over a classical application depends on how efficiently the threads are implemented in the system and how efficiently it handles blocked threads.</li> <li> Resilience: If a service no longer responds, nothing is blocked in reactive programming. This helps with resilience. However, for example, in a classical application, a timeout can avoid a blockage by aborting the processing of the request.</li> <li> Elastic: With a higher load, more and more instances can be started. This is also possible with the classical programming model.</li> <li> Message-driven: Reactive programming does not affect the communication between the services. Therefore, communication can or cannot be message-driven in reactive programming as well as in classical applications.</li> </ul>"},{"location":"self/programming/reactive/reactive/#reactive-programming-is-not-necessary-for-microservices","title":"Reactive programming is not necessary for microservices","text":"<p>The Reactive Manifesto is certainly relevant for microservices. But a microservice does not have to be implemented with reactive programming in order to achieve the goals of the Reactive Manifesto.</p> <p>Whether or not a microservice is implemented with reactive programming can be different for each microservice.</p> <p>This can be a micro architecture decision and therefore affects only individual microservices, but not the system as a whole.</p> <p>It is important to understand the difference, because otherwise the choice of technologies might be limited to reactive programming frameworks even though that is not necessary.</p> <p>It is perfectly fine to stay with established technologies. In fact, using a technology stack that you are used to might be easier and bring faster results.</p> <p>At the same time, it is possible to try new technologies like reactive programming in one microservice and then use it in other microservices if it has proven to be useful.</p>"},{"location":"self/slides/slide-until2019/","title":"Slide until2019","text":"Slides Archived Until 2019"},{"location":"self/software/ddd/ddd/","title":"Ddd","text":""},{"location":"self/software/ddd/ddd/#domain-driven-design-dddjava","title":"Domain-Driven Design (DDD)(Java)","text":"Transfer analysis from event storming perspective Ubiquitous language A similar word in different subdomains Bounded context and their models Bounded contexts are the solution space Relationships between bounded contexts Interacting with external services through ACL Common functionalities between components/ microservice Microservice Microservice Executing a command in a bounded context Commands and ubiquitous language Event created after execution of request Sharing domain events between bounded contexts Query executed in a bounded context Response queries change when changing state in between Ubiquitous language in query handlers Ubiquitous language in query handlers <p>Beyond the Model Driven Design (MDD) methodology, the Object Management Group (OMG) created a conceptual framework called Model Driven Architecture (MDA) . 1.  Computation Independent Model (CIM): This model focuses on the domain model. 2.  Platform Independent Model (PIM): This model focuses on a general platform, where a solution is deployed. 3.  Platform Specific Model (PSM): This model focuses on a specific platform, where a solution is deployed.</p> <p>There are three possible domain objects for the implementation of business logic: entities, value objects, and aggregates.</p>"},{"location":"self/software/ddd/ddd/#entity","title":"Entity","text":"<p>Account, Credit Card, Customer, or Transaction. An entity shows well-defined attributes and domain behavior. ID or a key, which implies that attribute values may change when required. This is why this domain object is mutable. The identification of an object is not affected when attribute values change. <code>The characteristics of an entity</code> Entities must meet the following characteristics to be well-defined: - [x] Each needs a unique identifier. An entity should be defined within a specific bounded context. - [x] They should be meaningful only in one bounded context. - [x] They should not use setter methods. - [x] They may use getter methods, when necessary. - [x] If some logic is required, value objects can acquire it. - [x] A constructor should be the only way to create an entity.</p> <p></p> Two similar entities <p></p> Entity Transfer <p></p> Entity Transfer <pre><code>import java.util.Date;\n\npublic class Main{\n\n    public static void main(String[] args){\n        Transfer transfer = new Transfer(\"1234\", new Date(), 12000.7, 44354363L);\n\n        System.out.println(\"*** Amount limit validation ***\");\n        // Validate amount\n        if(transfer.isAmountLimitAllowed()){\n            System.out.println(\"Amount is allowed\");\n        }else{\n            System.out.println(\"Amount is not allowed\");\n        }\n\n        System.out.println(\"\\n *** Date validation ***\");\n        // Validate date\n        if(transfer.isDateAllowed()){\n            System.out.println(\"Date is allowed\");\n        }else{\n            System.out.println(\"Date is not allowed\");\n        }\n    }\n}\n</code></pre>"},{"location":"self/software/ddd/ddd/#value-objects","title":"Value Objects","text":"<p>Eric Evans book on DDD, describes what a value object is from the real-world perspective: \u201cWhen a child is drawing, he cares about the color of the marker he chooses, and he may care about the sharpness of the tip. But if there are two markers of the same color and shape, he probably won\u2019t care which one he uses. If a marker is lost and replaced by another of the same color from a new pack, he can resume his work unconcerned about the switch.\u201d  <code>Characteristics of a value object</code> Value objects should meet the following characteristics to be well-defined: - [x] These objects are immutable. Some common examples of value objects are Address, emailAddress, Amount, and so on. - [x] that value objects do not have an ID, and they are identifiable only by their set of attributes. - [x] They should be defined within a specific bounded context. - [x] A value object in one bounded context may be an entity. - [x] They should be meaningful only in one bounded context. - [x] They should have any logic that is required for their use. - [x] They should not use setter methods. - [x] They may use getter methods, when necessary. - [x] A constructor should be the only way to create a value object.</p> <p></p> Value object of amount <pre><code>// Amount is the value objects that has information and logic related to an amount\npublic class Amount {\n\n    // Attributes of an amount value object\n    private Double value;\n    private String currency;\n\n    // Amount is the only way to create an Amount value object\n    public Amount(Double value, String currency){\n        this.value = value;\n        this.currency = currency;\n    }\n\n    // isAmountLimitAllowed checks whether amount to transfer does not got beyond the bank limits\n    public boolean isAmountLimitAllowed(){\n        if(this.value &gt;= 10000)\n            return false;\n        return true;\n    }\n}\n\n///\n\nimport java.util.Date;\n\n// Transfer is the entity that has information and logic related to a transfer\npublic class Transfer {\n\n    // Attributes of a transfer entity\n    private String id;\n    private Date date;\n    private Amount amount;\n    private Long accountId;\n\n    // Transfer is the only way to create a transfer entity\n    public Transfer(String id,Date date, Double amount, String currency, Long accountId){\n        this.id = id;\n        this.date = date;\n        this.amount = new Amount(amount,currency);\n        this.accountId = accountId;\n    }\n\n    // isDateAllowed checks whether transfer is executed in the current day\n    public boolean isDateAllowed(){\n        Date now = new Date();\n        if(this.date.after(now)){\n            return false;\n        }\n        return true;\n    }\n\n    public boolean isAmountLimitAllowed(){\n        return this.amount.isAmountLimitAllowed();\n    }\n}\nimport java.util.Date;\n\npublic class Main{\n\n    public static void main(String[] args){\n        Transfer transfer = new Transfer(\"1234\", new Date(), 12000.7,\"USD\", 44354363L);\n\n        // Validate amount\n        if(transfer.isAmountLimitAllowed()){\n            System.out.println(\"Amount is allowed\");\n        }else{\n            System.out.println(\"Amount is not allowed\");\n        }\n\n        // Validate date\n        if(transfer.isDateAllowed()){\n            System.out.println(\"Date is allowed\");\n        }else{\n            System.out.println(\"Date is not allowed\");\n        }\n    }\n}\n</code></pre>"},{"location":"self/software/ddd/ddd/#aggregate","title":"Aggregate","text":"<p>It might be necessary to create a huge number of entities and value objects and facilitate interactions between them, when we deal with a complex bounded context. An aggregate object is a cluster of entities and value objects that are treated as a single unit from the domain and data perspective. This object acts as a load balancer for accessing a set of nodes. This means that an aggregate is the only access point for external objects. As the image below shows, an aggregate has clear bounds and the artifacts inside it cannot interact with the outside world. Therefore, an aggregate should expose a type of interface that allows external objects to reach the functionalities inside it.</p> <p></p> Aggregate and its objects <p></p> Object invokes some aggregate internal logic <p>In this case, an aggregate called Transaction is introduced to put objects together.</p> <pre><code>{\n    \"eventId\" : \"1ce5608e-c76c-4412-8bd1-a2c6ed42970d\",\n    \"eventType\" : \"Transfers\",\n    \"eventName\": \"moneyTransfered\",\n    \"timestamp\" : \"1628360557000\",\n    \"data\" : {\n        \"transaction\":{\n            \"id\": \"1ce5608e-c76c-4412-8bd1-a2c6ed42970d\",\n            \"bankName\": \"Bank test\",\n            \"amount\":{\n                \"value\": 76567.78,\n                \"Currency\": \"USD\"\n            },\n            \"transfer\":{\n                \"id\": \"1ce5608e-c76c-4412-8bd1-a2c6ed42970d\",\n                \"date\": \"2021-08-07T17:10:43+00:00\",\n                \"accountId\": \"09876543\"\n            }\n        }\n    }\n  }\n</code></pre> <p></p> Aggregate transaction contains Transfer and Amount artifacts <pre><code>import java.util.Date;\n\npublic class Main{\n\n    public static void main(String[] args){\n        Transaction transfer = new Transaction(\"123\", \"Educative bank\", 23453.98, \"USD\", new Date(), 453646L);\n\n        System.out.println(\"**** Before executing a transfer ****\");\n\n        // Transfer money, it validates business rules\n        if(transfer.transferMoney()){\n            System.out.println(\"Transfer is done\");\n        }else{\n            System.out.println(\"Transfer is not done\");\n        }\n    }\n}\n// Amount is the value objects that has information and logic related to an amount\npublic class Amount {\n\n    // Attributes of an amount value object\n    private Double value;\n    private String currency;\n\n    // Amount is the only way to create an Amount value object\n    public Amount(Double value, String currency){\n        this.value = value;\n        this.currency = currency;\n    }\n\n    // isAmountLimitAllowed checks whether amount to transfer does not got beyond the bank limits\n    public boolean isAmountLimitAllowed(){\n        if(this.value &gt;= 10000)\n            return false;\n        return true;\n    }\n}\nimport java.util.Date;\n\n// Transfer is the entity that has information and logic related to a transfer\npublic class Transfer {\n\n    // Attributes of a transfer entity\n    private String id;\n    private Date date;\n    private Long accountId;\n\n    // Transfer is the only way to create a transfer entity\n    public Transfer(String id,Date date, Long accountId){\n        this.id = id;\n        this.date = date;\n        this.accountId = accountId;\n    }\n\n    // isDateAllowed checks whether transfer is executed in the current day\n    public boolean isDateAllowed(){\n        Date now = new Date();\n        if(this.date.after(now)){\n            return false;\n        }\n        return true;\n    }\n}\nimport java.util.Date;\n\n// Transaction is the aggregate, it contains Transfer and Amount artifacts\npublic class Transaction {\n\n    // Attributes of a transaction aggregate\n    private String id;\n    private String bankName;\n    private Amount amount;\n    private Transfer transfer;\n\n    // Transaction is the only way to create a transaction object and its entities and value objects\n    public Transaction(String id, String bankName, Double amount, String currency, Date date, Long accountId) {\n        this.id = id;\n        this.bankName = bankName;\n        this.amount = new Amount(amount,currency);\n        this.transfer = new Transfer(id,date,accountId);\n    }\n\n    // TransferMoney validates date and limit before executing a transfer.\n    // Date and limit validation is based on transfer and amount artifacts\n    public boolean transferMoney(){\n        if(!this.transfer.isDateAllowed())\n            return false;\n\n        if(!this.amount.isAmountLimitAllowed())\n            return false;\n\n        return this.executeTransfer();\n\n    }\n\n    // isDateAllowed checks whether transfer is executed in the current day\n    private boolean executeTransfer(){\n        // here is where transfer logic should be placed\n        return true;\n    }\n}\n</code></pre>"},{"location":"self/software/ddd/ddd/#aggregate-root","title":"Aggregate Root","text":"<p>an aggregate root is a cluster of objects with entities, values, or even other aggregates. The main difference between them is that an aggregate root is the main aggregate, while a simple aggregate is not the main aggregate. This means that everything outside of the domain layer boundary must use business logic, through interaction with the aggregate root. The aggregate root should, in turn, orchestrate logic in other aggregates, value objects, and entities.</p> <p></p> Aggregate root <p></p> Different aggregate roots <p>It is important to consider the following questions:  1.  If the entity is deleted, is it necessary to delete the other entities? 2.  Does a single transaction span across multiple entities and value objects? 3.  Is the entity involved in multiple functionalities inside the same aggregate root? 4.  Does the entity execute more functionalities than other entities?</p> <p></p> Aggregate root of transfer <pre><code>{\n    \"eventId\": \"1ce5608e-c76c-4412-8bd1-a2c6ed42970d\",\n    \"eventType\": \"Transfers\",\n    \"eventName\": \"moneyTransfered\",\n    \"timestamp\": \"1628360557000\",\n    \"data\": {\n        \"transaction\": {\n            \"id\": \"1ce5608e-c76c-4412-8bd1-a2c6ed42970d\",\n            \"bankName\": \"Bank test\",\n            \"customer\": {\n                \"id\": \"8867g87m\",\n                \"firstName\": \"DDD\",\n                \"lastName\": \"test\"\n            },\n            \"amount\": {\n                \"value\": 76567.78,\n                \"Currency\": \"USD\"\n            },\n            \"transfer\": {\n                \"id\": \"1ce5608e-c76c-4412-8bd1-a2c6ed42970d\",\n                \"date\": \"2021-08-07T17:10:43+00:00\",\n                \"account\": {\n                    \"accountId\": \"0098976\",\n                    \"balance\": 7675.9,\n                    \"nickname\": \"test-account\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Program:</p> <pre><code>import java.util.Date;\n\npublic class Main{\n\n    public static void main(String[] args){\n        Transaction transfer = new Transaction(\"123\", \"Educative bank\", 23453.98, \"USD\", new Date(), 453646, 98765);\n\n        System.out.println(\"**** Before executing a transfer ****\");\n\n        // Transfer money, it validates business rules\n        if(transfer.transferMoney()){\n            System.out.println(\"Transfer is done\");\n        }else{\n            System.out.println(\"Transfer is not done\");\n        }\n    }\n}\n// Customer is the entity that has information and logic related to a customer\npublic class Customer {\n\n    // Attributes of a customer entity\n    private Integer id;\n    private String firstName;\n    private String lastName;\n\n    // Customer is the only way to create an account entity\n    public Customer(Integer id) {\n        this.id = id;\n    }\n}\n// Account is the entity that has information and logic related to an account\npublic class Account {\n\n    // Attributes of an account entity\n    private Integer accountId;\n    private Double balance;\n    private String nickname;\n\n    // Account is the only way to create an account entity\n    public Account(Integer accountId){\n        this.accountId = accountId;\n    }\n}\nimport java.util.Date;\n\n// Transfer is the aggregate that has information and logic related to a transfer\npublic class Transfer {\n\n    // Attributes of a transfer aggregate\n    private String id;\n    private Date date;\n    private Account accountId;\n\n    // Transfer is the only way to create a transfer aggregate\n    public Transfer(String id,Date date, Integer accountId){\n        this.id = id;\n        this.date = date;\n        this.accountId = new Account(accountId);\n    }\n\n    // isDateAllowed checks whether transfer is executed in the current day\n    public boolean isDateAllowed(){\n        Date now = new Date();\n        if(this.date.after(now)){\n            return false;\n        }\n        return true;\n    }\n}\n// Amount is the value objects that has information and logic related to an amount\npublic class Amount {\n\n    // Attributes of an amount value object\n    private Double value;\n    private String currency;\n\n    // Amount is the only way to create an Amount value object\n    public Amount(Double value, String currency){\n        this.value = value;\n        this.currency = currency;\n    }\n\n    // isAmountLimitAllowed checks whether amount to transfer does not got beyond the bank limits\n    public boolean isAmountLimitAllowed(){\n        if(this.value &gt;= 10000)\n            return false;\n        return true;\n    }\n}\nimport java.util.Date;\n\n// Transaction is the aggregate, it contains Transfer and Amount artifacts\npublic class Transaction {\n\n    // Attributes of a transaction aggregate\n    private String id;\n    private String bankName;\n    private Customer customer;\n    private Amount amount;\n    private Transfer transfer;\n\n    // Transaction is the only way to create a transaction object and its entities and value objects\n    public Transaction(String id, String bankName, Double amount, String currency, Date date, Integer accountId, Integer customerId) {\n        this.id = id;\n        this.bankName = bankName;\n        this.customer = new Customer(customerId);\n        this.amount = new Amount(amount,currency);\n        this.transfer = new Transfer(id,date,accountId);\n    }\n\n    // TransferMoney validates date and limit before executing a transfer.\n    // Date and limit validation is based on transfer and amount artifacts\n    public boolean transferMoney(){\n        if(!this.transfer.isDateAllowed())\n            return false;\n\n        if(!this.amount.isAmountLimitAllowed())\n            return false;\n\n        return this.executeTransfer();\n\n    }\n\n    // isDateAllowed checks whether transfer is executed in the current day\n    private boolean executeTransfer(){\n        // here is where transfer logic should be placed\n        return true;\n    }\n}\n</code></pre>"},{"location":"self/software/ddd/ddd/#repository","title":"Repository","text":"<p>A repository is a pattern, which isolates business logic from data-store-interaction logic. It functions as a collection of objects in memory. it invokes functions in a repository. It only knows a group of objects in memory. It is unaware of what lies behind such a repository.</p> <p></p> Repository <p></p> Every aggregate has its repository <p>A repository interface should only expose business-logic behavior. Functions and their attributes should be named in relation to their domain behavior. As the image below shows, the function, getAccount(Account), is named in non-technical terms and receives the artifact account. On the other hand, the wrong definition defines a technical function, getAccountById(id), and receives an ID.</p> <p></p> Business name vs. technical name <p>Persistence operations should be atomic. If the user needs to store a new state of a domain, it should be guaranteed as every stored aggregate acquires a new state. This behavior is depicted in the image shown below.</p> <p></p> Atomicity in a transaction between different aggregates"},{"location":"self/software/ddd/ddd/#benefits-of-repositories","title":"Benefits of repositories","text":"<p>The implementation of repositories give us the following benefits: - [x] It helps in the isolation of the domain model from the storage layer. It enables us to change storage technology, without affecting the business logic. - [x] It gives us a flexible way to implement unit tests, as it is possible to use a mock-storage system. - [x] It promotes the separation of concerns among the domain layer and the data-access layer.</p>"},{"location":"self/software/ddd/ddd/#drawbacks-of-repositories","title":"Drawbacks of repositories","text":"<p>It is important to consider the following drawbacks when repositories are implemented: - [x] It is possible to experience some performance problems when the aggregate is large. Multiple database operations may be required to store or receive objects in a large aggregate. - [x] Repositories may lead to criteria-based query problems. As was previously mentioned, functions in a repository should be defined with business terms. When a specific inquiry is required, this implementation may be complicated.</p> <p></p> Aggregate root of transfer <pre><code>import java.util.Date;\n\n\npublic class Main{\n\n    // main is the start point\n    public static void main(String[] args){\n        Sells sells = new Sells(new ProductRepositoryImplementation());\n\n        System.out.println(\"List of products:\");\n        for(Product product: sells.ListProducts()){\n            System.out.println(product.getId() + \" - \" + product.getName() + \" - \" + product.getPrice().toString());\n        }        \n    }\n}\n// Product is an entity\npublic class Product {\n\n    // Attributes of a product\n    private String id;\n    private Double price;\n    private String name;\n\n    // Product is the only way to create a product object\n    public Product(String id, Double price, String name) {\n        this.id = id;\n        this.price = price;\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public Double getPrice() {\n        return price;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\nimport java.util.List;\n\n// Sells is an aggregate root\npublic class Sells {\n\n    // Attributes of Sells\n    private Product product;\n    private ProductRepository repository;\n\n    // Sells is the only way to create a sells object\n    public Sells(ProductRepository repository){\n        this.repository = repository;\n    }\n\n    // ListProducts returns all products that are in a repository\n    public List&lt;Product&gt; ListProducts(){\n        return this.repository.GetAllProducts();\n    }\n}\nimport java.util.List;\n\n// ProductRepository defines all functionalities in a repository\npublic interface ProductRepository {\n\n    // GetAllProducts allows to search for all products\n    public List&lt;Product&gt; GetAllProducts();\n}\nimport java.util.ArrayList;\nimport java.util.List;\n\n// ProductRepositoryImplementation is the implementation of the repository\npublic class ProductRepositoryImplementation implements ProductRepository{\n\n    @Override\n    public List&lt;Product&gt; GetAllProducts() {\n        List&lt;Product&gt; products = new ArrayList&lt;&gt;();\n        for(int i=0; i&lt; 10; i++){\n            products.add(new Product(String.valueOf(i),5644.8,\"Product # \" + i));\n        }\n        return products;\n    }\n}\nimport java.util.ArrayList;\nimport java.util.List;\n\n// ProductRepositoryImplementation is the implementation of the repository\npublic class ProductRepositoryImplementation implements ProductRepository{\n\n    @Override\n    public List&lt;Product&gt; GetAllProducts() {\n        List&lt;Product&gt; products = new ArrayList&lt;&gt;();\n        for(int i=0; i&lt; 10; i++){\n            products.add(new Product(String.valueOf(i),5644.8,\"Product # \" + i));\n        }\n        return products;\n    }\n}\n</code></pre>"},{"location":"self/software/ddd/ddd/#factory","title":"Factory","text":"<p>factory is a tactical pattern used in the DDD world. It helps us create complex objects. It is important to keep in mind that we should only implement this pattern when the instantiation of an object is complex. e.g., To build an Account entity is necessary to load information from external sources, validate the customer information. Interacting with those objects is what adds complexity to objects\u2019 creation. To deal with this situation, DDD suggests that we implement a factory.</p> <p>In the context of DDD, the use of a factory pattern is not required to implement the factory design pattern. It is possible to implement any design pattern, such as a Builder or even a custom implementation. The only thing necessary for the factory design pattern to isolate business logic from the creation of complex objects.</p> <p>A factory should only be present inside the aggregate root, as this is the object that orchestrates all of the business logic.</p> <p></p> Factory interacting with an aggregate root and repositories <p><code>When is it appropriate to implement a factory?</code> As was mentioned before, a factory is not always the best solution. However, it is a suitable approach when: - [x] Business logic requires the instantiation of many objects. Perhaps, in this context, a factory pattern is required to look for information in some external systems. - [x] The aggregate root input data is extensive and variable. We can use the data in different use cases. In this scenario, a builder pattern would make perfect sense. - [x] The aggregates, entities, or value objects that need to be instantiated vary in accordance with the use case. - [x] It is necessary to translate one bounded context into another.</p> <p></p> Factory model <p>When the Sells object is instantiated, it creates all of the dependencies it needs to execute its work. To test it, a main method creates a Sell object and executes the GenerateBill() method. This will print all of the information related to a bill.</p> <pre><code>import java.util.Date;\n\npublic class Main{\n\n    // main is the start point\n    public static void main(String[] args){\n        Sells sells = new Sells(\"123\",\"987\", \n            new ProductRepositoryImplementation(),\n            new CustomerRepositoryImplementation());\n\n        System.out.println(\"Information about a bill: \");\n        sells.generateBill();\n    }\n}\n// Product is an aggregate\npublic class Product {\n\n    // Attributes of a product\n    private String id;\n    private Price price;\n    private String name;\n\n    // Product is the only way to create a product object\n    public Product(String id, Double price, String name) {\n        this.id = id;\n        this.price = new Price(price,\"USD\");\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public Price getPrice() {\n        return price;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n// PersonName is a value object\npublic class PersonName {\n\n    // Attributes of personName\n    private String firstName;\n    private String lastName;\n\n    // PersonName is the only way to create a personName object\n    public PersonName(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n}\n// Customer is an aggregate\npublic class Customer {\n\n    // Attributes of customer\n    private String customerId;\n    private PersonName name;\n\n    // Customer is the only way to create a customer object\n    public Customer(String customerId, String firstName, String lastName) {\n        this.customerId = customerId;\n        this.name = new PersonName(firstName,lastName);\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public PersonName getName() {\n        return name;\n    }\n}\n// Price is a value object\npublic class Price {\n\n    // Attributes of Price\n    private Double value;\n    private String currency;\n\n    // Price is the only way to create a price object\n    public Price(Double value, String currency) {\n        this.value = value;\n        this.currency = currency;\n    }\n\n    public Double getValue() {\n        return value;\n    }\n\n    public String getCurrency() {\n        return currency;\n    }\n}\n// ProductRepository defines all functionalities in a repository\npublic interface ProductRepository {\n\n    // GetProductInformation allows to search for a particular product\n    public Product GetProductInformation(String productId);\n}\n// ProductRepositoryImplementation is the implementation of the ProductRepository\npublic class ProductRepositoryImplementation implements ProductRepository {\n\n    @Override\n    public Product GetProductInformation(String productId) {\n        return new Product(productId,5644.8,\"Product # \"+ productId);\n    }\n}\n// CustomerRepository defines all functionalities in a repository\npublic interface CustomerRepository {\n\n    // GetCustomerInformation allows to search for a particular customer\n    public Customer GetCustomerInformation(String customerId);\n}\n// CustomerRepositoryImplementation is the implementation of CustomerRepository\npublic class CustomerRepositoryImplementation implements CustomerRepository{\n    @Override\n    public Customer GetCustomerInformation(String customerId) {\n        return new Customer(customerId,\"DDD\",\"Test\");\n    }\n}\nimport java.util.List;\n\n// Sells is an aggregate root\npublic class Sells {\n\n    // Attributes of Sells\n    private Product product;\n    private Customer customer;\n    private ProductRepository productRepository;\n    private CustomerRepository customerRepository;\n\n    // Sells is the only way to create a sells object\n    public Sells(String productId, String customerId,ProductRepository productRepository, CustomerRepository customerRepository) {\n        this.productRepository = productRepository;\n        this.customerRepository = customerRepository;\n        createBillInformation(productId,customerId);\n    }\n\n    // generateBill generates a bill based on the information generated previously\n    public void generateBill(){\n        System.out.println(String.format(\"Generating bill for customer %s whose name is %s. The product is %s and its price is %4.2f\",\n                this.customer.getCustomerId(),\n                this.customer.getName().getFirstName(),\n                this.product.getId(),\n                this.product.getPrice().getValue()));\n    }\n\n    // createBillInformation is a custom implementation of an aggregate\n    private void createBillInformation(String productId, String customerId){\n        this.customer = this.customerRepository.GetCustomerInformation(customerId);\n        this.product = this.productRepository.GetProductInformation(productId);\n    }\n}\n</code></pre>"},{"location":"self/software/ddd/ddd/#services","title":"Services","text":"<p>However, what happens if the particular logic does not fit into any entity or value object? The answer can be found in the functionality of a service which cannot be modeled naturally in any entity or value object as part of the domain logic. Domain services are usually implemented when the logic of two or more domain objects is invoked. If service logic needs to interact with an external system, it should be built with the definition of an interface in the domain layer and the implementation of it in another layer.</p> <p></p> Definition and implementation of a domain service"},{"location":"self/software/ddd/ddd/#characteristics-of-a-domain-service","title":"Characteristics of a domain service","text":"<p>Domain services should meet the following characteristics to be well-defined and isolated from the domain model: - [x] They should be stateless. They should not maintain information between calls. Once an execution is completed, all of the information related to the execution should disappear. - [x] They can produce domain events. This may, in turn, cause the execution of other bounded contexts. - [x] They must be highly cohesive. These objects must execute only one specific task. Since the domain logic contained within domain services does not fit elsewhere, they need to accomplish domain logic through interactions with other business objects. This means that domain objects are aware of value objects and entities. - [x] They can interact with other domain services and repositories, as required.</p> <p></p> Service model <pre><code>// Sells is an aggregate root\npublic class Sells {\n\n    // Attributes of Sells\n    private Product product;\n    private Customer customer;\n    private ProductRepository productRepository;\n    private CustomerRepository customerRepository;\n\n    // Sells is the only way to create a sells object\n    public Sells(String productId, String customerId,ProductRepository productRepository, CustomerRepository customerRepository) {\n        this.productRepository = productRepository;\n        this.customerRepository = customerRepository;\n        createBillInformation(productId,customerId);\n    }\n\n    // GenerateBill generates a bill based on the information generated previously and sends an email to the customer\n    public void generateBill(EmailSender emailImplementation){\n        System.out.println(String.format(\"Generating bill for customer %s whose name is %s. The product is %s and its price is %4.2f\",\n                this.customer.getCustomerId(),\n                this.customer.getName().getFirstName(),\n                this.product.getId(),\n                this.product.getPrice().getValue()));\n\n        emailImplementation.sendEmail(this.customer,this.product);\n\n    }\n\n    // createBillInformation is a custom implementation of an aggregate\n    private void createBillInformation(String productId, String customerId){\n        this.customer = this.customerRepository.GetCustomerInformation(customerId);\n        this.product = this.productRepository.GetProductInformation(productId);\n    }\n}\n// Customer is an aggregate\npublic class Customer {\n\n    // Attributes of customer\n    private String customerId;\n    private PersonName name;\n    private String emailAddress;\n\n    // Customer is the only way to create a customer object\n    public Customer(String customerId, String firstName, String lastName,String emailAddress) {\n        this.customerId = customerId;\n        this.name = new PersonName(firstName,lastName);\n        this.emailAddress=emailAddress;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public PersonName getName() {\n        return name;\n    }\n\n    public String getEmailAddress(){return emailAddress;}\n}\n// Sells is an aggregate root\npublic class Sells {\n\n    // Attributes of Sells\n    private Product product;\n    private Customer customer;\n    private ProductRepository productRepository;\n    private CustomerRepository customerRepository;\n\n    // Sells is the only way to create a sells object\n    public Sells(String productId, String customerId,ProductRepository productRepository, CustomerRepository customerRepository) {\n        this.productRepository = productRepository;\n        this.customerRepository = customerRepository;\n        createBillInformation(productId,customerId);\n    }\n\n    // GenerateBill generates a bill based on the information generated previously and sends an email to the customer\n    public void generateBill(EmailSender emailImplementation){\n        System.out.println(String.format(\"Generating bill for customer %s whose name is %s. The product is %s and its price is %4.2f\",\n                this.customer.getCustomerId(),\n                this.customer.getName().getFirstName(),\n                this.product.getId(),\n                this.product.getPrice().getValue()));\n\n        emailImplementation.sendEmail(this.customer,this.product);\n\n    }\n\n    // createBillInformation is a custom implementation of an aggregate\n    private void createBillInformation(String productId, String customerId){\n        this.customer = this.customerRepository.GetCustomerInformation(customerId);\n        this.product = this.productRepository.GetProductInformation(productId);\n    }\n}\n// Sells is an aggregate root\npublic class Sells {\n\n    // Attributes of Sells\n    private Product product;\n    private Customer customer;\n    private ProductRepository productRepository;\n    private CustomerRepository customerRepository;\n\n    // Sells is the only way to create a sells object\n    public Sells(String productId, String customerId,ProductRepository productRepository, CustomerRepository customerRepository) {\n        this.productRepository = productRepository;\n        this.customerRepository = customerRepository;\n        createBillInformation(productId,customerId);\n    }\n\n    // GenerateBill generates a bill based on the information generated previously and sends an email to the customer\n    public void generateBill(EmailSender emailImplementation){\n        System.out.println(String.format(\"Generating bill for customer %s whose name is %s. The product is %s and its price is %4.2f\",\n                this.customer.getCustomerId(),\n                this.customer.getName().getFirstName(),\n                this.product.getId(),\n                this.product.getPrice().getValue()));\n\n        emailImplementation.sendEmail(this.customer,this.product);\n\n    }\n\n    // createBillInformation is a custom implementation of an aggregate\n    private void createBillInformation(String productId, String customerId){\n        this.customer = this.customerRepository.GetCustomerInformation(customerId);\n        this.product = this.productRepository.GetProductInformation(productId);\n    }\n}\n// ProductRepositoryImplementation is the implementation of the ProductRepository\npublic class ProductRepositoryImplementation implements ProductRepository {\n\n    @Override\n    public Product GetProductInformation(String productId) {\n        return new Product(productId,5644.8,\"Product # \"+ productId);\n    }\n}\n// ProductRepository defines all functionalities in a repository\npublic interface ProductRepository {\n\n    // GetProductInformation allows to search for a particular product\n    public Product GetProductInformation(String productId);\n}\n// Product is an aggregate\npublic class Product {\n\n    // Attributes of a product\n    private String id;\n    private Price price;\n    private String name;\n\n    // Product is the only way to create a product object\n    public Product(String id, Double price, String name) {\n        this.id = id;\n        this.price = new Price(price,\"USD\");\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public Price getPrice() {\n        return price;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n// Price is a value object\npublic class Price {\n\n    // Attributes of Price\n    private Double value;\n    private String currency;\n\n    // Price is the only way to create a price object\n    public Price(Double value, String currency) {\n        this.value = value;\n        this.currency = currency;\n    }\n\n    public Double getValue() {\n        return value;\n    }\n\n    public String getCurrency() {\n        return currency;\n    }\n}\n// PersonName is a value object\npublic class PersonName {\n\n    // Attributes of personName\n    private String firstName;\n    private String lastName;\n\n    // PersonName is the only way to create a personName object\n    public PersonName(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n}\n// EmailSenderImplementation implements EmailSender interface\npublic class EmailSenderImplementation implements EmailSender{\n\n    public void sendEmail(Customer customer, Product product) {\n        System.out.println(\"Invoking SMTP server\");\n        System.out.println(String.format(\"Sending email to %s. Product bought is %s\",customer.getEmailAddress(),product.getName()));\n    }\n}\n// EmailSender defines functionality to send an email\npublic interface EmailSender {\n\n    // sendEmail receives customer and product to send an email\n    public void sendEmail(Customer customer, Product product);\n}\n// CustomerRepositoryImplementation is the implementation of CustomerRepository\npublic class CustomerRepositoryImplementation implements CustomerRepository {\n    @Override\n    public Customer GetCustomerInformation(String customerId) {\n        return new Customer(customerId,\"DDD\",\"Test\",\"dddTest@educative.com\");\n    }\n}\n</code></pre> <p><code>What is software architecture?</code></p> <p>This is not an easy term to define, because it can be abstract depending on the perspective. When software for a company is designed, there are three different levels to the process: - [x] Strategic level: This is known as enterprise architecture. It deals with problems related to processes, applications, infrastructure, and actors that are involved across an organization. - [x] Solution level: This is known as solution architecture. It solves everything related to a particular solution of software. The solution may involve different components, actors, and specific processes of an organization. - [x] Artifact level: This is known as software architecture. It deals with problems related to a particular component, in an ecosystem of components, and structures it. It may involve layers, a programming language, design patterns, and so on.</p> <p>In this case, efforts will be oriented to define how to design and implement a specific component, how we should build parts inside the component, and how those parts should interact amongst themselves. These are the concerns that software architecture deals with. It also gives us good practices, guidelines, and many more things.</p> <p><code>The levels of architectural abstraction</code> The following image shows the levels of architectural abstraction:</p> <p></p> Levels of architectural abstraction <p>At the top level, which is the most abstract representation of software, there is a system. A system may consist of a set one or more subsystems. Subsystems are typically divided into one or more layers. In the same way, layers are often divided into different components. Similarly, components contain classes that, in turn, contain data and methods.</p>"},{"location":"self/software/ddd/ddd/#what-is-hexagonal-architecture","title":"What is hexagonal architecture?","text":"<p>Hexagonal architecture, also known as ports and adapters architecture, is an architectural pattern that separates the business logic from the outside world. It involves APIs exposure or database integration. To understand whether this pattern is well implemented or not, one could ask themselves questions such as: What would happen if functionality was exposed through another protocol? Or what would happen if the database was changed? If the business logic was required to change too, then this would imply that the hexagonal architecture was poorly implemented. If not, then the pattern is proven to be implemented well.</p> <p></p> Hexagonal architecture <p>As the image above shows, this pattern is represented by a hexagon where the business logic is placed in the center and the adapters are situated on the edges. Hexagonal architecture can be implemented in DDD projects, because they complement each other. Although it is not required, it is a good practice to combine them because they aim for similar goals.</p> <p><code>Why is it good to invest in hexagonal architecture?</code></p> <p>The first reason to invest in hexagonal architecture comes from a cost-benefit argument. Not only is it beneficial from a technical perspective, but also from a business point of view. One of the primary goals of an architect is to minimize the cost of the creation and maintenance of software and, simultaneously, maximize the architecture\u2019s benefits to the business.</p> <p>The main benefit of hexagonal architecture for the organization is in the form of money. Companies invest a lot of capital every month in software maintenance, which can encompass refactoring or even rebuilding an application. Hexagonal architecture reduces the cost of maintenance by separating different parts of the application. This clear separation of responsibilities and layers allows us to evolve or change functionalities more easily.</p> <p>For example, when we want to change from REST to gRPC, we only need to focus our efforts on the transport layer while the rest of the code can remain intact.</p> <p>Hexagonal architecture is based on a few principles that should be followed to build well-structured components. If we overlook any of them, we will experience problems in the future. Additionally, it can be quite tortuous to change bad implementations, especially in a system that runs on production.</p>"},{"location":"self/software/ddd/ddd/#solid-principles","title":"SOLID principles","text":"<p>To implement components based on hexagonal architecture, it is necessary to understand the SOLID principles, which are as follows:</p> <ol> <li>The single-responsibility principle: This principle states that a class should only change due to one reason. The class should only execute one functionality.</li> <li>The open-close principle: This principle states that a class should be opened to extension, but closed to modification.</li> <li>Liskov\u2019s substitution principle: This principle states that the objects of a superclass should be replaceable with the objects of its subclasses, and that this replacement will not cause a break in the system.</li> <li>The interface-segregation principle: This principle states that the use of one interface with many defined methods, which may not be required in some implementers, is not the best approach.</li> <li>The dependency-inversion principle: This principle states that high-level functions should be reusable and unaffected by changes in low-level functions. To follow this principle, it is necessary to introduce abstractions to decouple both the levels from one another. This is the most important principle that is used to implement hexagonal architecture.</li> </ol>"},{"location":"self/software/ddd/ddd/#clear-separation-principle","title":"Clear-separation principle","text":"<p>There must be a clear separation of responsibilities. In every component, there is a way to identify these responsibilities through analysis. For example, we can identify these responsibilities if we analyze a specific action that is executed or a way that is used to save information. To comply with this principle, it is important to separate these functionalities from one another. The following image shows the basic form of the separation of responsibilities.</p> <p></p> Separation of responsibilities <p>Layer boundaries must be clearly defined. To comply with this principle, it is good practice to define interfaces that expose functionalities and the data that is required to execute them. Dependency between the layers should be based on the interfaces.</p> <p></p> Well-defined boundaries"},{"location":"self/software/ddd/ddd/#communication-from-the-outside-to-the-inside","title":"Communication from the outside to the inside","text":"<p>Communication must always come from the outermost layer to the innermost one. This means that every execution starts in the API adapter. Business logic is executed afterward and, ultimately, the storage logic is also executed. Internal layers cannot know anything about the external layers.</p>"},{"location":"self/software/ddd/ddd/#communication-from-the-outside-to-the-inside_1","title":"Communication from the outside to the inside","text":"<p><code>The layers of hexagonal architecture</code> Hexagonal architecture defines four layers to structure a component. As was mentioned before, these layers are focused on all of the parts that an application consists of, such as frameworks, database connections, business flows, and so on. Let\u2019s look at them one by one.</p> <p><code>Domain objects layer</code> Located in the center of the hexagon, a domain contains all of the objects related to the business. In DDD terms, business objects are entities, value objects, and aggregates. Additionally, this layer contains all of the abstractions that are defined to carry out a business process. The abstractions are factories and the definition of repositories. Services can result in two possibilities. If the services interact with external dependencies, the domain layer will only have access to the services\u2019 definition. If they do not interact with external dependencies, then the domain layer will have access to the full implementation.</p> <p></p> Domain Layer <p><code>Example definition</code> This restaurant wants to allow a customer to order something through its website. The website consumes REST APIs to execute the business logic. Therefore, we have to implement a microservice that exposes the functionality to create an order. This use case displays the following restrictions: - [x] If a customer has no previously created orders, it is possible to create a new order. - [x] If a customer has already created an order, it is not possible to create a new order.</p> <p>In the upcoming lessons, each layer of this microservice will be implemented in order to accomplish the business need.</p> <p><code>Model definition</code> The following diagram depicts the domain layer and how the domain objects should be implemented to fulfill the business rules.</p> <p></p> Domain package <pre><code>package exampleCase.domain;\n\n// Address is a value object\npublic class Address {\n\n    // Attributes of this value object\n    private String streetName;\n    private Integer streetNumber;\n\n    // Address is the only way to create this object\n    public Address(String streetName, Integer streetNumber) {\n        this.streetName = streetName;\n        this.streetNumber = streetNumber;\n    }\n}\npackage exampleCase.domain;\n\n// Customer is an entity\npublic class Product {\n\n    // Attributes of this entity\n    private String productId;\n    private String productName;\n\n    // Product is the only way to create this object\n    public Product(String productId, String productName) {\n        this.productId = productId;\n        this.productName = productName;\n    }\n}\npackage exampleCase.domain;\n\n// Customer is an aggregate root\npublic class Order {\n\n    // Attributes of this aggregate root\n    private String orderId;\n    private Customer customer;\n    private Product product;\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    // Order is the only way to create this object\n    public Order(String orderId,CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.orderId = orderId;\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n    // lookUpCustomer looks for customer information\n    public void LookUpCustomer(String customerId){\n        this.customer = this.customerRepository.getCustomer(customerId);\n    }\n\n    // lookUpProduct looks for product information\n    public void lookUpProduct(String productId){\n        this.product = this.productRepository.getProduct(productId);\n    }\n\n    // createOrder creates an order\n    public boolean createOrder(){\n        if(!this.customer.isNumberOrderAllowed()){\n            return false;\n        }\n\n        return this.orderRepository.createOrder(this.orderId,this.customer);\n    }\n}\npackage exampleCase.domain;\n\n// Customer is an entity\npublic class Customer {\n\n    // Attributes of this entity\n    private String customerId;\n    private String customerName;\n    private Integer ordersInProgress;\n    private Address address;\n\n    // Customer is the only way to create this object\n    public Customer(String customerId, String customerName, Integer ordersInProgress,String streetName, Integer streetNumber) {\n        this.customerId = customerId;\n        this.customerName = customerName;\n        this.ordersInProgress = ordersInProgress;\n    }\n\n    // isNumberOrderAllowed verifies whether customer has opened orders\n    public boolean isNumberOrderAllowed(){\n        return this.ordersInProgress == 0;\n    }\n\n    // customerId returns customerId value\n    public String customerId() {\n        return customerId;\n    }\n}\n///\npackage exampleCase.domain;\n\npublic interface ProductRepository {\n\n    // getProduct looks for information of a particular product\n    public Product getProduct(String productId);\n}\npackage exampleCase.domain;\n\npublic interface OrderRepository {\n\n    // createOrder saves an order\n    public boolean createOrder(String orderId, Customer customer);\n}\npackage exampleCase.domain;\n\npublic interface CustomerRepository {\n\n    // getCustomer looks for information of a particular customer\n    public Customer getCustomer(String customerId);\n}\n</code></pre> <p>The code above shows how we can translate a model into code. In this case, the code implements the business functionalities that were modeled in the diagram above.</p>"},{"location":"self/software/ddd/ddd/#use-cases-layer","title":"Use cases layer","text":"<p>The use cases layer exposes functionalities to fulfill business requirements. This layer is located on top of the domain object layer. It can orchestrate logic in an aggregate root, and between two or more of them if necessary. Suppose that there is a requirement to create an order in a restaurant. However, the customer cannot place another order, while the previous one is still in progress. To fulfill this requirement, we will need to search for customer-opened orders. It will be possible to execute the creation if the customer shows no record of opened orders. Otherwise, the request will be rejected. A use case layer can implement the previous scenario.</p> <p></p> Use case layer <p>This layer will be in charge of the orchestration of domain objects to fulfill business needs. Model definition The following diagram depicts the use case layer, which defines two artifacts. Additionally, this layer makes use of the domain layer.</p> <p><code>Model explanation</code> This layer contains the following artifacts:</p> <ul> <li> A CreateOrderinterface: This interface defines a method to carry out an order creation.</li> <li> A CreateOrderImplobject: This object implements the CreateOrder interface. It orchestrates the logic to look up information about a customer and a product.</li> </ul> <pre><code>package exampleCase.domain;\n\n// Customer is an entity\npublic class Customer {\n\n    // Attributes of this entity\n    private String customerId;\n    private String customerName;\n    private Integer ordersInProgress;\n    private Address address;\n\n    // Customer is the only way to create this object\n    public Customer(String customerId, String customerName, Integer ordersInProgress,String streetName, Integer streetNumber) {\n        this.customerId = customerId;\n        this.customerName = customerName;\n        this.ordersInProgress = ordersInProgress;\n    }\n\n    // isNumberOrderAllowed verifies whether customer has opened orders\n    public boolean isNumberOrderAllowed(){\n        return this.ordersInProgress == 0;\n    }\n\n    // customerId returns customerId value\n    public String customerId() {\n        return customerId;\n    }\n}\npackage exampleCase.domain;\n\n// Address is a value object\npublic class Address {\n\n    // Attributes of this value object\n    private String streetName;\n    private Integer streetNumber;\n\n    // Address is the only way to create this object\n    public Address(String streetName, Integer streetNumber) {\n        this.streetName = streetName;\n        this.streetNumber = streetNumber;\n    }\n}\npackage exampleCase.domain;\n\n// Customer is an aggregate root\npublic class Order {\n\n    // Attributes of this aggregate root\n    private String orderId;\n    private Customer customer;\n    private Product product;\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    // Order is the only way to create this object\n    public Order(String orderId,CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.orderId = orderId;\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n    // lookUpCustomer looks for customer information\n    public void LookUpCustomer(String customerId){\n        this.customer = this.customerRepository.getCustomer(customerId);\n    }\n\n    // lookUpProduct looks for product information\n    public void lookUpProduct(String productId){\n        this.product = this.productRepository.getProduct(productId);\n    }\n\n    // createOrder creates an order\n    public boolean createOrder(){\n        if(!this.customer.isNumberOrderAllowed()){\n            return false;\n        }\n\n        return this.orderRepository.createOrder(this.orderId,this.customer);\n    }\n}\npackage exampleCase.domain;\n\n// Customer is an entity\npublic class Product {\n\n    // Attributes of this entity\n    private String productId;\n    private String productName;\n\n    // Product is the only way to create this object\n    public Product(String productId, String productName) {\n        this.productId = productId;\n        this.productName = productName;\n    }\n}\npackage exampleCase.useCase;\n\npublic interface CreateOrder {\n\n    // createOrder defines function required to create an order\n    public boolean createOrder(String orderId, String customerId, String productId);\n}\npackage exampleCase.domain;\n\npublic interface OrderRepository {\n\n    // createOrder saves an order\n    public boolean createOrder(String orderId, Customer customer);\n}\npackage exampleCase.domain;\n\npublic interface CustomerRepository {\n\n    // getCustomer looks for information of a particular customer\n    public Customer getCustomer(String customerId);\n}\npackage exampleCase.useCase;\n\nimport exampleCase.domain.CustomerRepository;\nimport exampleCase.domain.Order;\nimport exampleCase.domain.ProductRepository;\nimport exampleCase.domain.OrderRepository;\n\n// CreateOrderImpl defines is an use case\npublic class CreateOrderImpl implements CreateOrder {\n\n    // Attributes of this object\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    @Autowired\n    public CreateOrderImpl(CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n\n    // createOrder executes logic required to create an order\n    @Override\n    public boolean createOrder(String orderId, String customerId, String productId) {\n        Order order = new Order(orderId,this.customerRepository,this.productRepository,this.orderRepository);\n        order.LookUpCustomer(customerId);\n        order.lookUpProduct(productId);\n        return order.createOrder();\n    }\n}\n</code></pre> <p></p> The code above shows how we can translate a model into code. In this case, the code implements an orchestration that controls the flow of the business logic."},{"location":"self/software/ddd/ddd/#ports-layer","title":"Ports layer","text":"<p>A port is an interface, which defines the functions and the data required to carry them out. Ports are placed between the domain logic and the outside world that is designed for a particular purpose or protocol. They are used to allow outside clients to access the domain logic, and topermit the business logic to access the external systems. To compare a port with an example from the real world, we can say that it is a plug that exposes a particular interface. Ultimately, this layer is located after the use case layer.</p> <p></p> Ports layer <p>It is important to mention that this layer will be in charge of exposing an interface, which will define the functionalities that a component offers and how we can invoke them.</p> <p></p> Final Model DDD"},{"location":"self/software/ddd/ddd/#model-definition","title":"Model definition","text":"<p>The following diagram depicts the port layer, which defines four artifacts. Additionally, this layer makes use of the use case layer.</p> <p></p> Class-digram <pre><code>package exampleCase.domain;\n\n// Address is a value object\npublic class Address {\n\n    // Attributes of this value object\n    private String streetName;\n    private Integer streetNumber;\n\n    // Address is the only way to create this object\n    public Address(String streetName, Integer streetNumber) {\n        this.streetName = streetName;\n        this.streetNumber = streetNumber;\n    }\n}\npackage exampleCase.port;\n\n// OutputDTO defines data returned after executing order creation\npublic class OutputDTO {\n    public String result;\n}\npackage exampleCase.port;\n\n// InputDTO contains data required to create and order\npublic class InputDTO {\n    public String orderId;\n    public String customerId;\n    public String productId;\n}\npackage exampleCase.port;\n\nimport exampleCase.domain.CustomerRepository;\nimport exampleCase.domain.OrderRepository;\nimport exampleCase.domain.ProductRepository;\nimport exampleCase.useCase.CreateOrder;\nimport exampleCase.useCase.CreateOrderImpl;\n\n// CreateOrderPortImpl is a port\npublic class CreateOrderPortImpl implements CreateOrderPort{\n\n    // Attributes of this object\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    @Autowired\n    public CreateOrderPortImpl(CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n\n    // CreateOrderPort executes an order creation\n    @Override\n    public OutputDTO createOrderPort(InputDTO dto) {\n        CreateOrder createOrder = new CreateOrderImpl(this.customerRepository,this.productRepository, this.orderRepository);\n        boolean result = createOrder.createOrder(dto.orderId,dto.customerId,dto.productId);\n        OutputDTO res= new OutputDTO();\n        if(result){\n            res.result = \"Creation successful\";\n        }else {\n            res.result = \"Creation failed\";\n        }\n\n        return res;\n    }\n}\n\npackage exampleCase.port;\n\npublic interface CreateOrderPort {\n\n    // createOrderPort exposes interface to create an order\n    public OutputDTO createOrderPort(InputDTO dto);\n}\npackage exampleCase.useCase;\n\nimport exampleCase.domain.CustomerRepository;\nimport exampleCase.domain.Order;\nimport exampleCase.domain.ProductRepository;\nimport exampleCase.domain.OrderRepository;\n\n// CreateOrderImpl defines is an use case\npublic class CreateOrderImpl implements CreateOrder {\n\n    // Attributes of this object\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    @Autowired\n    public CreateOrderImpl(CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n\n    // createOrder executes logic required to create an order\n    @Override\n    public boolean createOrder(String orderId, String customerId, String productId) {\n        Order order = new Order(orderId,this.customerRepository,this.productRepository,this.orderRepository);\n        order.LookUpCustomer(customerId);\n        order.lookUpProduct(productId);\n        return order.createOrder();\n    }\n}\npackage exampleCase.useCase;\n\npublic interface CreateOrder {\n\n    // createOrder defines function required to create an order\n    public boolean createOrder(String orderId, String customerId, String productId);\n}\npackage exampleCase.domain;\n\npublic interface ProductRepository {\n\n    // getProduct looks for information of a particular product\n    public Product getProduct(String productId);\n}\npackage exampleCase.domain;\n\n// Customer is an entity\npublic class Product {\n\n    // Attributes of this entity\n    private String productId;\n    private String productName;\n\n    // Product is the only way to create this object\n    public Product(String productId, String productName) {\n        this.productId = productId;\n        this.productName = productName;\n    }\n}\npackage exampleCase.domain;\n\npublic interface OrderRepository {\n\n    // createOrder saves an order\n    public boolean createOrder(String orderId, Customer customer);\n}\npackage exampleCase.domain;\n\n// Customer is an aggregate root\npublic class Order {\n\n    // Attributes of this aggregate root\n    private String orderId;\n    private Customer customer;\n    private Product product;\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    // Order is the only way to create this object\n    public Order(String orderId,CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.orderId = orderId;\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n    // lookUpCustomer looks for customer information\n    public void LookUpCustomer(String customerId){\n        this.customer = this.customerRepository.getCustomer(customerId);\n    }\n\n    // lookUpProduct looks for product information\n    public void lookUpProduct(String productId){\n        this.product = this.productRepository.getProduct(productId);\n    }\n\n    // createOrder creates an order\n    public boolean createOrder(){\n        if(!this.customer.isNumberOrderAllowed()){\n            return false;\n        }\n\n        return this.orderRepository.createOrder(this.orderId,this.customer);\n    }\n}\npackage exampleCase.domain;\n\npublic interface CustomerRepository {\n\n    // getCustomer looks for information of a particular customer\n    public Customer getCustomer(String customerId);\n}\npackage exampleCase.domain;\n\n// Customer is an entity\npublic class Customer {\n\n    // Attributes of this entity\n    private String customerId;\n    private String customerName;\n    private Integer ordersInProgress;\n    private Address address;\n\n    // Customer is the only way to create this object\n    public Customer(String customerId, String customerName, Integer ordersInProgress,String streetName, Integer streetNumber) {\n        this.customerId = customerId;\n        this.customerName = customerName;\n        this.ordersInProgress = ordersInProgress;\n    }\n\n    // isNumberOrderAllowed verifies whether customer has opened orders\n    public boolean isNumberOrderAllowed(){\n        return this.ordersInProgress == 0;\n    }\n\n    // customerId returns customerId value\n    public String customerId() {\n        return customerId;\n    }\n}\n</code></pre> <p>The code above shows how we can translate a model into code. In this case, the code will implement a type of interface that will allow adapters to invoke business functionalities.</p>"},{"location":"self/software/ddd/ddd/#adapters-layer","title":"Adapters layer","text":"<p>The adapters layer is the outermost layer of the hexagonal architecture. It interacts with the outside world directly. An adapter uses a specific technology. Therefore, this layer has a high coupling with a specific technological stack. Such a stack may be REST or gRPC, which are used to expose functionalities, or it may be JDBC or Cache, which are used to store information. The implementation of an adapter allows the external systems to execute the domain logic. An adapter must comply with the interface definition and send all of the required data to achieve that interaction.</p> <p></p> Adapter Layer <p>This layer is in charge of communication with the outside world, for example, communication with database connections, HTTP, and so on.</p>"},{"location":"self/software/ddd/ddd/#model-definition_1","title":"Model definition","text":"<p>The following diagram depicts the adapter layer, which defines six artifacts. Additionally, this layer makes use of the port layer. Due to its large size, this model is divided into two parts. Part one shows the domain, use case, and port layers, whereas part two shows the interaction between the port and abstract layers.</p> <p></p> Adapter Layer <p>The image above shows what was implemented previously. Now, it is time to understand how the adapter layer interacts only with the port layer. This interaction can be seen in the image below.</p> <p></p> Adapter-class-digram <pre><code>// Customer is an entity\npublic class Customer {\n\n    // Attributes of this entity\n    private String customerId;\n    private String customerName;\n    private Integer ordersInProgress;\n    private Address address;\n\n    // Customer is the only way to create this object\n    public Customer(String customerId, String customerName, Integer ordersInProgress,String streetName, Integer streetNumber) {\n        this.customerId = customerId;\n        this.customerName = customerName;\n        this.ordersInProgress = ordersInProgress;\n    }\n\n    // isNumberOrderAllowed verifies whether customer has opened orders\n    public boolean isNumberOrderAllowed(){\n        return this.ordersInProgress == 0;\n    }\n\n    // customerId returns customerId value\n    public String customerId() {\n        return customerId;\n    }\n}\npublic interface CustomerRepository {\n\n    // getCustomer looks for information of a particular customer\n    public Customer getCustomer(String customerId);\n}\n// Customer is an aggregate root\npublic class Order {\n\n    // Attributes of this aggregate root\n    private String orderId;\n    private Customer customer;\n    private Product product;\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    // Order is the only way to create this object\n    public Order(String orderId,CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.orderId = orderId;\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n    // lookUpCustomer looks for customer information\n    public void LookUpCustomer(String customerId){\n        this.customer = this.customerRepository.getCustomer(customerId);\n    }\n\n    // lookUpProduct looks for product information\n    public void lookUpProduct(String productId){\n        this.product = this.productRepository.getProduct(productId);\n    }\n\n    // createOrder creates an order\n    public boolean createOrder(){\n        if(!this.customer.isNumberOrderAllowed()){\n            return false;\n        }\n\n        return this.orderRepository.createOrder(this.orderId,this.customer);\n    }\n}\npublic interface OrderRepository {\n\n    // createOrder saves an order\n    public boolean createOrder(String orderId, Customer customer);\n}\n// Customer is an entity\npublic class Product {\n\n    // Attributes of this entity\n    private String productId;\n    private String productName;\n\n    // Product is the only way to create this object\n    public Product(String productId, String productName) {\n        this.productId = productId;\n        this.productName = productName;\n    }\n}\npublic interface ProductRepository {\n\n    // getProduct looks for information of a particular product\n    public Product getProduct(String productId);\n}\npublic interface CreateOrder {\n\n    // createOrder defines function required to create an order\n    public boolean createOrder(String orderId, String customerId, String productId);\n}\n// CreateOrderImpl defines is an use case\npublic class CreateOrderImpl implements CreateOrder {\n\n    // Attributes of this object\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    public CreateOrderImpl(CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n\n    // createOrder executes logic required to create an order\n    @Override\n    public boolean createOrder(String orderId, String customerId, String productId) {\n        Order order = new Order(orderId,this.customerRepository,this.productRepository,this.orderRepository);\n        order.LookUpCustomer(customerId);\n        order.lookUpProduct(productId);\n        return order.createOrder();\n    }\n}\npublic interface CreateOrderPort {\n\n    // createOrderPort exposes interface to create an order\n    public OutputDTO createOrderPort(InputDTO dto);\n}\n// CreateOrderPortImpl is a port\npublic class CreateOrderPortImpl implements CreateOrderPort{\n\n    // Attributes of this object\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    public CreateOrderPortImpl(CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n\n    // CreateOrderPort executes an order creation\n    @Override\n    public OutputDTO createOrderPort(InputDTO dto) {\n        CreateOrder createOrder = new CreateOrderImpl(this.customerRepository,this.productRepository, this.orderRepository);\n        boolean result = createOrder.createOrder(dto.orderId,dto.customerId,dto.productId);\n        OutputDTO res= new OutputDTO();\n        if(result){\n            res.result = \"Creation successful\";\n        }else {\n            res.result = \"Creation failed\";\n        }\n\n        return res;\n    }\n}\n// InputDTO contains data required to create and order\npublic class InputDTO {\n    public String orderId;\n    public String customerId;\n    public String productId;\n}\n// OutputDTO defines data returned after executing order creation\npublic class OutputDTO {\n    public String result;\n}\npublic class InMemoryCustomerRepository implements CustomerRepository{\n\n    // getCustomer implements interface CustomerRepository, it mocks a store system\n    @Override\n    public Customer getCustomer(String customerId) {\n        return new Customer(customerId,\"DDD\",0,\"educative\",1);\n    }\n}\npublic class InMemoryOrderRepository implements OrderRepository {\n\n    // createOrder implements interface OrderRepository, it mocks a store system\n    @Override\n    public boolean createOrder(String orderId, Customer customer) {\n        System.out.println(String.format(\"Creating order %s to customer %s\",orderId,customer.customerId()));\n        return true;\n    }\n}\npublic class InMemoryProductRepository implements ProductRepository {\n\n    // getProduct implements interface CustomerRepository, it mocks a store system\n    @Override\n    public Product getProduct(String productId) {\n        return new Product(productId,\"pizza\");\n    }\n}\n// Request defines input rest fields\npublic class Request {\n    public String orderId;\n    public String customerId;\n    public String productId;\n\n    public Request(String orderId, String customerId, String productId) {\n        this.orderId = orderId;\n        this.customerId = customerId;\n        this.productId = productId;\n    }\n}\n// Response defines output rest fields\npublic class Response {\n    public String result;\n}\n// AdapterDesktop is the adapter\npublic class AdapterDesktop {\n\n    private CustomerRepository customerRepository;\n    private ProductRepository productRepository;\n    private OrderRepository orderRepository;\n\n    public AdapterDesktop(CustomerRepository customerRepository, ProductRepository productRepository, OrderRepository orderRepository) {\n        this.customerRepository = customerRepository;\n        this.productRepository = productRepository;\n        this.orderRepository = orderRepository;\n    }\n\n    // createOrder executes creation of an order\n    public Response createOrder(Request req){\n        InputDTO inputDTO = new InputDTO();\n        inputDTO.customerId = req.customerId;\n        inputDTO.productId=req.productId;\n        inputDTO.orderId=req.orderId;\n\n        // Invokes function that the create order port exposes\n        CreateOrderPort adapter = new CreateOrderPortImpl(this.customerRepository,this.productRepository,this.orderRepository);\n        Response res = new Response();\n        res.result = adapter.createOrderPort(inputDTO).result;\n        return res;\n    }\n\n    public static void main(String[] args) {\n        // Instantiation oof dependencies\n        CustomerRepository customerRepository = new InMemoryCustomerRepository();\n        OrderRepository orderRepository = new InMemoryOrderRepository();\n        ProductRepository productRepository = new InMemoryProductRepository();\n        Request req = new Request(\"O-1234\",\"1234\",\"P-24244\");\n\n        AdapterDesktop adapterDesktop = new AdapterDesktop(customerRepository,productRepository,orderRepository);\n\n        System.out.println(\"Before creating an order\");\n\n        Response res = adapterDesktop.createOrder(req);\n\n        System.out.println(\"\\nAfter creating an order the result is: \"+ res.result);\n    }\n}\n// Address is a value object\npublic class Address {\n\n    // Attributes of this value object\n    private String streetName;\n    private Integer streetNumber;\n\n    // Address is the only way to create this object\n    public Address(String streetName, Integer streetNumber) {\n        this.streetName = streetName;\n        this.streetNumber = streetNumber;\n    }\n}\n</code></pre> <p>The code above shows how we can translate a model into code. In this case, the code implements an adapter that invokes business capabilities through interaction with a port.</p> <p>Output</p> <pre><code>1.4s\nBefore creating an order Creating order O-1234 to customer 1234 After creating an order the result is: Creation successful.\n</code></pre>"},{"location":"self/software/ddd/ddd/#the-benefits-of-hexagonal-architecture-are-as-follows","title":"The benefits of hexagonal architecture are as follows:","text":"<ul> <li> Hexagonal architecture has a well-defined dependency structure, which results in a clear domain model implementation.</li> <li> It emphasizes the domain logic, which is a good match within a DDD context.</li> <li> It clearly defines what to put in the code and where. That definition is important to maintain the code. It helps in faster, more focused, and automated tests for domain logic, mocking databases, and other external services.</li> <li> An independent and incremental evolution of concerns is possible with hexagonal architecture. This means that every layer can evolve independently.</li> <li> It allows the domain model to evolve to fulfill business requirements, without breaking APIs or migrating a database on every refactoring.</li> </ul> Different implementations of a repository <p>Drawbacks of hexagonal architecture - [x] The domain layer tends to become huge, as it can contain many objects if there is no good analysis of bounded contexts. - [x] With several levels of indirection and isolation, the cost of building and maintaining the application may increase. Therefore, applications with hexagonal architecture can become more complex. - [x] Complexity may increase, since applications are built with different levels of abstraction. - [x] Performance may be affected, as a request must pass through different layers and it may imply more classes than the usual. - [x] Hexagonal architecture will overcomplicate a project if changing the database regularly or exposing functionality through different protocols is not a requirement.</p> <p></p> Many parts involved in a request <p>Which is the bottom-most level of architectural abstraction?</p> <p>A) Layers B) Classes C) Data and methods D)None of the above</p> <p>What is the port layer in hexagonal architecture?</p> <p>A) A layer where the business logic is placed. B) A strategy for the isolation of business flows from rules validation. Correct Answer C) A layer where an interface is exposed to allow us to consume business logic. D) None of the above</p> <p>Which SOLID principle helps in the isolation of the domain layer from the adapter layer?</p> <p>A) Single-responsibility principle B) Interface-segregation principle Correct Answer C) Dependency-inversion principle D)None of the above</p> <p>Which layer should the domain layer have a relationship with?</p> <p>A) The adapter layer B) The port layer C) The use case layer Correct Answer D)None of the above (The Domain layer must not know anything about the others.)</p> <p>Adapters are the most important layer in hexagonal architecture?</p> <p>A) True Correct Answer B) False</p>"},{"location":"self/technical/technical/","title":"Technical","text":"<p>Relaychain-Podcasts</p>"}]}